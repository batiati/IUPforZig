// This code was generated by a tool.
// IUP Metadata Code Generator
// https://github.com/batiati/IUPMetadata
//
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.

const std = @import("std");

const c = @import("../c.zig");
const iup = @import("../iup.zig");

const Impl = @import("../impl.zig").Impl;
const CallbackHandler = @import("../callback_handler.zig").CallbackHandler;

const debug = std.debug;
const trait = std.meta.trait;

const Element = iup.Element;
const Handle = iup.Handle;
const Error = iup.Error;
const ChildrenIterator = iup.ChildrenIterator;
const Size = iup.Size;
const Margin = iup.Margin;

/// 
/// Creates an editable field with one or more lines.
/// Since IUP 3.0, IupText has support for multiple lines when the MULTILINE
/// attribute is set to YES.
/// Now when a IupMultiline element is created in fact a IupText element with
/// MULTILINE=YES is created.
/// See IupText
pub const Multiline = opaque {
    pub const CLASS_NAME = "multiline";
    const Self = @This();

    pub const OnTouchFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: i32, arg3: [:0]const u8) anyerror!void;

    /// 
    /// K_ANY K_ANY Action generated when a keyboard event occurs.
    /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
    /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
    /// c: identifier of typed key.
    /// Please refer to the Keyboard Codes table for a list of possible values.
    /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
    /// the control and not propagated.
    /// If returns IUP_CONTINUE, the key will be processed and the event will be
    /// propagated to the parent of the element receiving it, this is the default behavior.
    /// If returns IUP_DEFAULT the key is processed but it is not propagated.
    /// IUP_CLOSE will be processed.
    /// Notes Keyboard callbacks depend on the keyboard usage of the control with
    /// the focus.
    /// So if you return IUP_IGNORE the control will usually not process the key.
    /// But be aware that sometimes the control process the key in another event so
    /// even returning IUP_IGNORE the key can get processed.
    /// Although it will not be propagated.
    /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
    /// the IUP_CONTINUE return value to work while the control is in focus.
    /// If the callback does not exists it is automatically propagated to the
    /// parent of the element.
    /// K_* callbacks All defined keys are also callbacks of any element, called
    /// when the respective key is activated.
    /// For example: "K_cC" is also a callback activated when the user press
    /// Ctrl+C, when the focus is at the element or at a children with focus.
    /// This is the way an application can create shortcut keys, also called hot keys.
    /// These callbacks are not available in IupLua.
    /// Affects All elements with keyboard interaction.
    pub const OnKAnyFn = fn (self: *Self, arg0: i32) anyerror!void;

    /// 
    /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
    /// In Motif is also activated by the Help button in some workstations keyboard.
    /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Returns: IUP_CLOSE will be processed.
    /// Affects All elements with user interaction.
    pub const OnHelpFn = fn (self: *Self) anyerror!void;

    pub const OnDropMotionFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: [:0]const u8) anyerror!void;

    pub const OnDragEndFn = fn (self: *Self, arg0: i32) anyerror!void;

    pub const OnDragBeginFn = fn (self: *Self, arg0: i32, arg1: i32) anyerror!void;

    /// 
    /// ACTION ACTION Action generated when the element is activated.
    /// Affects each element differently.
    /// Callback int function(Ihandle *ih); [in C] ih:action() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// In some elements, this callback may receive more parameters, apart from ih.
    /// Please refer to each element's documentation.
    /// Affects IupButton, IupItem, IupList, IupText, IupCanvas, IupMultiline,
    /// IupToggle
    pub const OnActionFn = fn (self: *Self, arg0: i32, arg1: [:0]const u8) anyerror!void;

    pub const OnMultiTouchFn = fn (self: *Self, arg0: i32, arg1: *i32, arg2: *i32, arg3: *i32) anyerror!void;

    /// 
    /// MOTION_CB MOTION_CB Action generated when the mouse moves.
    /// Callback int function(Ihandle *ih, int x, int y, char *status); [in C]
    /// ih:motion_cb(x, y: number, status: string) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of mouse buttons and certain keyboard keys at the moment the
    /// event was generated.
    /// The same macros used for BUTTON_CB can be used for this status.
    /// Notes Between press and release all mouse events are redirected only to
    /// this control, even if the cursor moves outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupGLCanvas
    pub const OnMotionFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: [:0]const u8) anyerror!void;

    /// 
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnMapFn = fn (self: *Self) anyerror!void;

    /// 
    /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also LEAVEWINDOW_CB
    pub const OnEnterWindowFn = fn (self: *Self) anyerror!void;

    /// 
    /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
    /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Notes If the dialog is visible then it is hidden before it is destroyed.
    /// The callback will be called right after it is hidden.
    /// The callback will be called before all other destroy procedures.
    /// For instance, if the element has children then it is called before the
    /// children are destroyed.
    /// For language binding implementations use the callback name "LDESTROY_CB" to
    /// release memory allocated by the binding for the element.
    /// Also the callback will be called before the language callback.
    /// Affects All.
    pub const OnDestroyFn = fn (self: *Self) anyerror!void;

    pub const OnDropDataFn = fn (self: *Self, arg0: [:0]const u8, arg1: *iup.Unknow, arg2: i32, arg3: i32, arg4: i32) anyerror!void;

    /// 
    /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
    /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Affects All elements with user interaction, except menus.
    /// In Windows, there are restrictions when using this callback.
    /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
    /// function calls that display or activate a window.
    /// This causes the thread to yield control and can cause the application to
    /// stop responding to messages.
    /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
    pub const OnKillFocusFn = fn (self: *Self) anyerror!void;

    pub const OnDragDataFn = fn (self: *Self, arg0: [:0]const u8, arg1: *iup.Unknow, arg2: i32) anyerror!void;

    pub const OnDragDataSizeFn = fn (self: *Self, arg0: [:0]const u8) anyerror!void;

    /// 
    /// DROPFILES_CB DROPFILES_CB Action called when a file is "dropped" into the control.
    /// When several files are dropped at once, the callback is called several
    /// times, once for each file.
    /// If defined after the element is mapped then the attribute DROPFILESTARGET
    /// must be set to YES.
    /// [Windows and GTK Only] (GTK 2.6) Callback int function(Ihandle *ih, const
    /// char* filename, int num, int x, int y); [in C] ih:dropfiles_cb(filename:
    /// string; num, x, y: number) -> (ret: number) [in Lua] ih: identifier of the
    /// element that activated the event.
    /// filename: Name of the dropped file.
    /// num: Number index of the dropped file.
    /// If several files are dropped, num is the index of the dropped file starting
    /// from "total-1" to "0".
    /// x: X coordinate of the point where the user released the mouse button.
    /// y: Y coordinate of the point where the user released the mouse button.
    /// Returns: If IUP_IGNORE is returned the callback will NOT be called for the
    /// next dropped files, and the processing of dropped files will be interrupted.
    /// Affects IupDialog, IupCanvas, IupGLCanvas, IupText, IupList
    pub const OnDropFilesFn = fn (self: *Self, arg0: [:0]const u8, arg1: i32, arg2: i32, arg3: i32) anyerror!void;

    /// 
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnUnmapFn = fn (self: *Self) anyerror!void;

    pub const OnCaretFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: i32) anyerror!void;

    /// 
    /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
    /// This callback is called after the KILLFOCUS_CB of the element that loosed
    /// the focus.
    /// The IupGetFocus function during the callback returns the element that
    /// loosed the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that received keyboard focus.
    /// Affects All elements with user interaction, except menus.
    /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
    pub const OnGetFocusFn = fn (self: *Self) anyerror!void;

    /// 
    /// BUTTON_CB BUTTON_CB Action generated when a mouse button is pressed or released.
    /// Callback int function(Ihandle* ih, int button, int pressed, int x, int y,
    /// char* status); [in C] ih:button_cb(button, pressed, x, y: number, status:
    /// string) -> (ret: number) [in Lua] ih: identifies the element that activated
    /// the event.
    /// button: identifies the activated mouse button: IUP_BUTTON1 - left mouse
    /// button (button 1); IUP_BUTTON2 - middle mouse button (button 2);
    /// IUP_BUTTON3 - right mouse button (button 3).
    /// pressed: indicates the state of the button: 0 - mouse button was released;
    /// 1 - mouse button was pressed.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of the mouse buttons and some keyboard keys at the moment
    /// the event is generated.
    /// The following macros must be used for verification: iup_isshift(status)
    /// iup_iscontrol(status) iup_isbutton1(status) iup_isbutton2(status)
    /// iup_isbutton3(status) iup_isbutton4(status) iup_isbutton5(status)
    /// iup_isdouble(status) iup_isalt(status) iup_issys(status) They return 1 if
    /// the respective key or button is pressed, and 0 otherwise.
    /// These macros are also available in Lua, returning a boolean.
    /// Returns: IUP_CLOSE will be processed.
    /// On some controls if IUP_IGNORE is returned the action is ignored (this is
    /// system dependent).
    /// Notes This callback can be used to customize a button behavior.
    /// For a standard button behavior use the ACTION callback of the IupButton.
    /// For a single click the callback is called twice, one for pressed=1 and one
    /// for pressed=0.
    /// Only after both calls the ACTION callback is called.
    /// In Windows, if a dialog is shown or popup in any situation there could be
    /// unpredictable results because the native system still has processing to be
    /// done even after the callback is called.
    /// A double click is preceded by two single clicks, one for pressed=1 and one
    /// for pressed=0, and followed by a press=0, all three without the double
    /// click flag set.
    /// In GTK, it is preceded by an additional two single clicks sequence.
    /// For example, for one double click all the following calls are made:
    /// BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) BUTTON_CB(but=1 (0), x=154, y=83 [
    /// 1 ]) BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1
    /// (0), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1 (1), x=154, y=83 [ 1
    /// D ]) BUTTON_CB(but=1 (0), x=154, y=83 [ 1 ]) Between press and release all
    /// mouse events are redirected only to this control, even if the cursor moves
    /// outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupButton, IupText, IupList, IupGLCanvas
    pub const OnButtonFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: [:0]const u8) anyerror!void;

    pub const OnValueChangedFn = fn (self: *Self) anyerror!void;

    pub const OnSpinFn = fn (self: *Self, arg0: i32) anyerror!void;

    pub const OnLDestroyFn = fn (self: *Self) anyerror!void;

    /// 
    /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also ENTERWINDOW_CB
    pub const OnLeaveWindowFn = fn (self: *Self) anyerror!void;

    pub const OnPostMessageFn = fn (self: *Self, arg0: [:0]const u8, arg1: i32, arg2: f64, arg3: *iup.Unknow) anyerror!void;

    pub const ZOrder = enum {
        Top,
        Bottom,
    };

    pub const MaskReal = enum {
        Signed,
        Unsigned,
    };

    pub const Expand = enum {
        Yes,
        Horizontal,
        Vertical,
        HorizontalFree,
        VerticalFree,
        No,
    };

    pub const LoadRtfStatus = enum {
        Ok,
        Failed,
    };

    pub const Floating = enum {
        Yes,
        Ignore,
        No,
    };

    pub const SaveRtfStatus = enum {
        Ok,
        Failed,
    };

    pub const SpinAlign = enum {
        Left,
        Right,
    };

    pub const Filter = enum {
        LowerCase,
        Number,
        UpperCase,
    };

    pub const ChangeCase = enum {
        Upper,
        Lower,
        Toggle,
        Title,
    };

    pub const Clipboard = enum {
        Copy,
        Cut,
        Paste,
        Clear,
        Undo,
        Redo,
    };

    pub const RemoveFormatting = enum {
        All,
        Selection,
    };

    pub const Initializer = struct {
        last_error: ?anyerror = null,
        ref: *Self,

        ///
        /// Returns a pointer to IUP element or an error.
        /// Only top-level or detached elements needs to be unwraped,
        pub fn unwrap(self: Initializer) !*Self {
            if (self.last_error) |e| {
                return e;
            } else {
                return self.ref;
            }
        }

        ///
        /// Captures a reference into a external variable
        /// Allows to capture some references even using full declarative API
        pub fn capture(self: *Initializer, ref: **Self) Initializer {
            ref.* = self.ref;
            return self.*;
        }

        pub fn setStrAttribute(self: *Initializer, attributeName: [:0]const u8, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setStrAttribute(self.ref, attributeName, arg);
            return self.*;
        }

        pub fn setIntAttribute(self: *Initializer, attributeName: [:0]const u8, arg: i32) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setIntAttribute(self.ref, attributeName, arg);
            return self.*;
        }

        pub fn setBoolAttribute(self: *Initializer, attributeName: [:0]const u8, arg: bool) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setBoolAttribute(self.ref, attributeName, bool);
            return self.*;
        }

        pub fn setPtrAttribute(self: *Initializer, comptime T: type, attributeName: [:0]const u8, value: ?*T) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setPtrAttribute(self.ref, T, attributeName, value);
            return self.*;
        }

        pub fn setFgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "FGCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setTipBalloon(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TIPBALLOON", void, void, arg);
            return self.*;
        }

        pub fn setHandleName(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "HANDLENAME", void, void, arg);
            return self.*;
        }

        pub fn setTipBgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "TIPBGCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setWordWrap(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "WORDWRAP", void, void, arg);
            return self.*;
        }

        pub fn setPassword(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "PASSWORD", void, void, arg);
            return self.*;
        }

        pub fn setCaret(self: *Initializer, lin: i32, col: i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = iup.LinColPos.intIntToString(&buffer, lin, col, ',');
            c.setStrAttribute(self.ref, "CARET", void, void, value);
            return self.*;
        }

        pub fn setMaskDecimalSymbol(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "MASKDECIMALSYMBOL", void, void, arg);
            return self.*;
        }

        pub fn setOverwrite(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "OVERWRITE", void, void, arg);
            return self.*;
        }

        pub fn setAddFormatTagHandle(self: *Initializer, arg: *iup.User) Initializer {
            c.setHandleAttribute(self.ref, "ADDFORMATTAG_HANDLE", void, void, arg);
            return self.*;
        }

        pub fn setSpinInc(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "SPININC", void, void, arg);
            return self.*;
        }

        pub fn setNoHideSel(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "NOHIDESEL", void, void, arg);
            return self.*;
        }

        pub fn setMaxSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "MAXSIZE", void, void, value);
            return self.*;
        }

        pub fn setPosition(self: *Initializer, x: i32, y: i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
            c.setStrAttribute(self.ref, "POSITION", void, void, value);
            return self.*;
        }

        pub fn setAppendNewLine(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "APPENDNEWLINE", void, void, arg);
            return self.*;
        }

        pub fn loadRtf(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "LOADRTF", void, void, arg);
            return self.*;
        }

        pub fn setDropFilesTarget(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DROPFILESTARGET", void, void, arg);
            return self.*;
        }

        pub fn setTip(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "TIP", void, void, arg);
            return self.*;
        }

        pub fn setCanFocus(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "CANFOCUS", void, void, arg);
            return self.*;
        }

        pub fn setDragSourceMove(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DRAGSOURCEMOVE", void, void, arg);
            return self.*;
        }

        pub fn setAddFormatTag(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "ADDFORMATTAG", void, void, arg);
            return self.*;
        }

        pub fn setVisible(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "VISIBLE", void, void, arg);
            return self.*;
        }

        pub fn setNc(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "NC", void, void, arg);
            return self.*;
        }

        pub fn saveRtf(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "SAVERTF", void, void, arg);
            return self.*;
        }

        pub fn zOrder(self: *Initializer, arg: ?ZOrder) Initializer {
            if (arg) |value| switch (value) {
                .Top => c.setStrAttribute(self.ref, "ZORDER", void, void, "TOP"),
                .Bottom => c.setStrAttribute(self.ref, "ZORDER", void, void, "BOTTOM"),
            } else {
                c.clearAttribute(self.ref, "ZORDER", void, void);
            }
            return self.*;
        }

        pub fn setDragDrop(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DRAGDROP", void, void, arg);
            return self.*;
        }

        pub fn setTheme(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "THEME", void, void, arg);
            return self.*;
        }

        pub fn setMaskReal(self: *Initializer, arg: ?MaskReal) Initializer {
            if (arg) |value| switch (value) {
                .Signed => c.setStrAttribute(self.ref, "MASKREAL", void, void, "SIGNED"),
                .Unsigned => c.setStrAttribute(self.ref, "MASKREAL", void, void, "UNSIGNED"),
            } else {
                c.clearAttribute(self.ref, "MASKREAL", void, void);
            }
            return self.*;
        }

        pub fn setDragCursorCopy(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "DRAGCURSORCOPY", void, void, arg);
            return self.*;
        }

        pub fn setExpand(self: *Initializer, arg: ?Expand) Initializer {
            if (arg) |value| switch (value) {
                .Yes => c.setStrAttribute(self.ref, "EXPAND", void, void, "YES"),
                .Horizontal => c.setStrAttribute(self.ref, "EXPAND", void, void, "HORIZONTAL"),
                .Vertical => c.setStrAttribute(self.ref, "EXPAND", void, void, "VERTICAL"),
                .HorizontalFree => c.setStrAttribute(self.ref, "EXPAND", void, void, "HORIZONTALFREE"),
                .VerticalFree => c.setStrAttribute(self.ref, "EXPAND", void, void, "VERTICALFREE"),
                .No => c.setStrAttribute(self.ref, "EXPAND", void, void, "NO"),
            } else {
                c.clearAttribute(self.ref, "EXPAND", void, void);
            }
            return self.*;
        }

        pub fn setVisibleLines(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "VISIBLELINES", void, void, arg);
            return self.*;
        }

        pub fn setSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "SIZE", void, void, value);
            return self.*;
        }

        pub fn setPadding(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "PADDING", void, void, value);
            return self.*;
        }

        pub fn setSpinMin(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "SPINMIN", void, void, arg);
            return self.*;
        }

        pub fn setLoadRtfStatus(self: *Initializer, arg: ?LoadRtfStatus) Initializer {
            if (arg) |value| switch (value) {
                .Ok => c.setStrAttribute(self.ref, "LOADRTFSTATUS", void, void, "OK"),
                .Failed => c.setStrAttribute(self.ref, "LOADRTFSTATUS", void, void, "FAILED"),
            } else {
                c.clearAttribute(self.ref, "LOADRTFSTATUS", void, void);
            }
            return self.*;
        }

        pub fn setFontSize(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "FONTSIZE", void, void, arg);
            return self.*;
        }

        pub fn setDropTypes(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "DROPTYPES", void, void, arg);
            return self.*;
        }

        pub fn setUserSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "USERSIZE", void, void, value);
            return self.*;
        }

        pub fn setTipDelay(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "TIPDELAY", void, void, arg);
            return self.*;
        }

        pub fn setScrollBar(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "SCROLLBAR", void, void, arg);
            return self.*;
        }

        pub fn setDragStart(self: *Initializer, x: i32, y: i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
            c.setStrAttribute(self.ref, "DRAGSTART", void, void, value);
            return self.*;
        }

        pub fn setTabsIZe(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "TABSIZE", void, void, arg);
            return self.*;
        }

        pub fn setPropagateFocus(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "PROPAGATEFOCUS", void, void, arg);
            return self.*;
        }

        pub fn setBgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "BGCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setTipBalloonTitle(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "TIPBALLOONTITLE", void, void, arg);
            return self.*;
        }

        pub fn setDropTarget(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DROPTARGET", void, void, arg);
            return self.*;
        }

        pub fn valueMasked(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "VALUEMASKED", void, void, arg);
            return self.*;
        }

        pub fn setDragSource(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DRAGSOURCE", void, void, arg);
            return self.*;
        }

        pub fn setFloating(self: *Initializer, arg: ?Floating) Initializer {
            if (arg) |value| switch (value) {
                .Yes => c.setStrAttribute(self.ref, "FLOATING", void, void, "YES"),
                .Ignore => c.setStrAttribute(self.ref, "FLOATING", void, void, "IGNORE"),
                .No => c.setStrAttribute(self.ref, "FLOATING", void, void, "NO"),
            } else {
                c.clearAttribute(self.ref, "FLOATING", void, void);
            }
            return self.*;
        }

        pub fn setNormalizerGroup(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "NORMALIZERGROUP", void, void, arg);
            return self.*;
        }

        pub fn setRasterSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "RASTERSIZE", void, void, value);
            return self.*;
        }

        pub fn scrollTopOs(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "SCROLLTOPOS", void, void, arg);
            return self.*;
        }

        pub fn setFormatting(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "FORMATTING", void, void, arg);
            return self.*;
        }

        pub fn scrollTo(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "SCROLLTO", void, void, arg);
            return self.*;
        }

        pub fn setTipFgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "TIPFGCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setControlId(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "CONTROLID", void, void, arg);
            return self.*;
        }

        pub fn setSaveRtfStatus(self: *Initializer, arg: ?SaveRtfStatus) Initializer {
            if (arg) |value| switch (value) {
                .Ok => c.setStrAttribute(self.ref, "SAVERTFSTATUS", void, void, "OK"),
                .Failed => c.setStrAttribute(self.ref, "SAVERTFSTATUS", void, void, "FAILED"),
            } else {
                c.clearAttribute(self.ref, "SAVERTFSTATUS", void, void);
            }
            return self.*;
        }

        pub fn setSpinWrap(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "SPINWRAP", void, void, arg);
            return self.*;
        }

        pub fn setFontFace(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FONTFACE", void, void, arg);
            return self.*;
        }

        pub fn setVisibleColumns(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "VISIBLECOLUMNS", void, void, arg);
            return self.*;
        }

        pub fn setMaskInt(self: *Initializer, begin: i32, end: i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = iup.Range.intIntToString(&buffer, begin, end, ',');
            c.setStrAttribute(self.ref, "MASKINT", void, void, value);
            return self.*;
        }

        pub fn setSpinValue(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "SPINVALUE", void, void, arg);
            return self.*;
        }

        pub fn setSpinAlign(self: *Initializer, arg: ?SpinAlign) Initializer {
            if (arg) |value| switch (value) {
                .Left => c.setStrAttribute(self.ref, "SPINALIGN", void, void, "LEFT"),
                .Right => c.setStrAttribute(self.ref, "SPINALIGN", void, void, "RIGHT"),
            } else {
                c.clearAttribute(self.ref, "SPINALIGN", void, void);
            }
            return self.*;
        }

        pub fn setName(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "NAME", void, void, arg);
            return self.*;
        }

        pub fn setMaskCasei(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "MASKCASEI", void, void, arg);
            return self.*;
        }

        pub fn setTipBalloonTitleIcon(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TIPBALLOONTITLEICON", void, void, arg);
            return self.*;
        }

        pub fn setSelectionPos(self: *Initializer, begin: i32, end: i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = iup.Range.intIntToString(&buffer, begin, end, ',');
            c.setStrAttribute(self.ref, "SELECTIONPOS", void, void, value);
            return self.*;
        }

        pub fn setValue(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "VALUE", void, void, arg);
            return self.*;
        }

        pub fn setFilter(self: *Initializer, arg: ?Filter) Initializer {
            if (arg) |value| switch (value) {
                .LowerCase => c.setStrAttribute(self.ref, "FILTER", void, void, "LOWERCASE"),
                .Number => c.setStrAttribute(self.ref, "FILTER", void, void, "NUMBER"),
                .UpperCase => c.setStrAttribute(self.ref, "FILTER", void, void, "UPPERCASE"),
            } else {
                c.clearAttribute(self.ref, "FILTER", void, void);
            }
            return self.*;
        }

        pub fn setSpinMax(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "SPINMAX", void, void, arg);
            return self.*;
        }

        pub fn setMultiline(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "MULTILINE", void, void, arg);
            return self.*;
        }

        pub fn setSelectedText(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "SELECTEDTEXT", void, void, arg);
            return self.*;
        }

        pub fn setCPadding(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "CPADDING", void, void, value);
            return self.*;
        }

        pub fn setActive(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "ACTIVE", void, void, arg);
            return self.*;
        }

        pub fn setTipVisible(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TIPVISIBLE", void, void, arg);
            return self.*;
        }

        pub fn changeCase(self: *Initializer, arg: ?ChangeCase) Initializer {
            if (arg) |value| switch (value) {
                .Upper => c.setStrAttribute(self.ref, "CHANGECASE", void, void, "UPPER"),
                .Lower => c.setStrAttribute(self.ref, "CHANGECASE", void, void, "LOWER"),
                .Toggle => c.setStrAttribute(self.ref, "CHANGECASE", void, void, "TOGGLE"),
                .Title => c.setStrAttribute(self.ref, "CHANGECASE", void, void, "TITLE"),
            } else {
                c.clearAttribute(self.ref, "CHANGECASE", void, void);
            }
            return self.*;
        }

        pub fn setCueBanner(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "CUEBANNER", void, void, arg);
            return self.*;
        }

        pub fn setExpandWeight(self: *Initializer, arg: f64) Initializer {
            c.setDoubleAttribute(self.ref, "EXPANDWEIGHT", void, void, arg);
            return self.*;
        }

        pub fn setMinSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "MINSIZE", void, void, value);
            return self.*;
        }

        pub fn setSpin(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "SPIN", void, void, arg);
            return self.*;
        }

        pub fn setNTheme(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "NTHEME", void, void, arg);
            return self.*;
        }

        pub fn setBorder(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "BORDER", void, void, arg);
            return self.*;
        }

        pub fn setCaretPos(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "CARETPOS", void, void, arg);
            return self.*;
        }

        pub fn setSpinAuto(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "SPINAUTO", void, void, arg);
            return self.*;
        }

        pub fn setMask(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "MASK", void, void, arg);
            return self.*;
        }

        pub fn setDragTypes(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "DRAGTYPES", void, void, arg);
            return self.*;
        }

        pub fn setAutoHide(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "AUTOHIDE", void, void, arg);
            return self.*;
        }

        pub fn setFontStyle(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FONTSTYLE", void, void, arg);
            return self.*;
        }

        pub fn autoRedraw(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "AUTOREDRAW", void, void, arg);
            return self.*;
        }

        pub fn setTouch(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TOUCH", void, void, arg);
            return self.*;
        }

        pub fn setClipboard(self: *Initializer, arg: ?Clipboard) Initializer {
            if (arg) |value| switch (value) {
                .Copy => c.setStrAttribute(self.ref, "CLIPBOARD", void, void, "COPY"),
                .Cut => c.setStrAttribute(self.ref, "CLIPBOARD", void, void, "CUT"),
                .Paste => c.setStrAttribute(self.ref, "CLIPBOARD", void, void, "PASTE"),
                .Clear => c.setStrAttribute(self.ref, "CLIPBOARD", void, void, "CLEAR"),
                .Undo => c.setStrAttribute(self.ref, "CLIPBOARD", void, void, "UNDO"),
                .Redo => c.setStrAttribute(self.ref, "CLIPBOARD", void, void, "REDO"),
            } else {
                c.clearAttribute(self.ref, "CLIPBOARD", void, void);
            }
            return self.*;
        }

        pub fn removeFormatting(self: *Initializer, arg: ?RemoveFormatting) Initializer {
            if (arg) |value| switch (value) {
                .All => c.setStrAttribute(self.ref, "REMOVEFORMATTING", void, void, "ALL"),
                .Selection => c.setStrAttribute(self.ref, "REMOVEFORMATTING", void, void, "SELECTION"),
            } else {
                c.clearAttribute(self.ref, "REMOVEFORMATTING", void, void);
            }
            return self.*;
        }

        pub fn setReadonly(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "READONLY", void, void, arg);
            return self.*;
        }

        pub fn append(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "APPEND", void, void, arg);
            return self.*;
        }

        pub fn setDragCursor(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "DRAGCURSOR", void, void, arg);
            return self.*;
        }

        pub fn setMaskNoEmpty(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "MASKNOEMPTY", void, void, arg);
            return self.*;
        }

        pub fn setFont(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FONT", void, void, arg);
            return self.*;
        }

        pub fn setTouchCallback(self: *Initializer, callback: ?OnTouchFn) Initializer {
            const Handler = CallbackHandler(Self, OnTouchFn, "TOUCH_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// K_ANY K_ANY Action generated when a keyboard event occurs.
        /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
        /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
        /// c: identifier of typed key.
        /// Please refer to the Keyboard Codes table for a list of possible values.
        /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
        /// the control and not propagated.
        /// If returns IUP_CONTINUE, the key will be processed and the event will be
        /// propagated to the parent of the element receiving it, this is the default behavior.
        /// If returns IUP_DEFAULT the key is processed but it is not propagated.
        /// IUP_CLOSE will be processed.
        /// Notes Keyboard callbacks depend on the keyboard usage of the control with
        /// the focus.
        /// So if you return IUP_IGNORE the control will usually not process the key.
        /// But be aware that sometimes the control process the key in another event so
        /// even returning IUP_IGNORE the key can get processed.
        /// Although it will not be propagated.
        /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
        /// the IUP_CONTINUE return value to work while the control is in focus.
        /// If the callback does not exists it is automatically propagated to the
        /// parent of the element.
        /// K_* callbacks All defined keys are also callbacks of any element, called
        /// when the respective key is activated.
        /// For example: "K_cC" is also a callback activated when the user press
        /// Ctrl+C, when the focus is at the element or at a children with focus.
        /// This is the way an application can create shortcut keys, also called hot keys.
        /// These callbacks are not available in IupLua.
        /// Affects All elements with keyboard interaction.
        pub fn setKAnyCallback(self: *Initializer, callback: ?OnKAnyFn) Initializer {
            const Handler = CallbackHandler(Self, OnKAnyFn, "K_ANY");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
        /// In Motif is also activated by the Help button in some workstations keyboard.
        /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Returns: IUP_CLOSE will be processed.
        /// Affects All elements with user interaction.
        pub fn setHelpCallback(self: *Initializer, callback: ?OnHelpFn) Initializer {
            const Handler = CallbackHandler(Self, OnHelpFn, "HELP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDropMotionCallback(self: *Initializer, callback: ?OnDropMotionFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropMotionFn, "DROPMOTION_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDragEndCallback(self: *Initializer, callback: ?OnDragEndFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragEndFn, "DRAGEND_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDragBeginCallback(self: *Initializer, callback: ?OnDragBeginFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragBeginFn, "DRAGBEGIN_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// ACTION ACTION Action generated when the element is activated.
        /// Affects each element differently.
        /// Callback int function(Ihandle *ih); [in C] ih:action() -> (ret: number) [in
        /// Lua] ih: identifier of the element that activated the event.
        /// In some elements, this callback may receive more parameters, apart from ih.
        /// Please refer to each element's documentation.
        /// Affects IupButton, IupItem, IupList, IupText, IupCanvas, IupMultiline,
        /// IupToggle
        pub fn setActionCallback(self: *Initializer, callback: ?OnActionFn) Initializer {
            const Handler = CallbackHandler(Self, OnActionFn, "ACTION");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setMultiTouchCallback(self: *Initializer, callback: ?OnMultiTouchFn) Initializer {
            const Handler = CallbackHandler(Self, OnMultiTouchFn, "MULTITOUCH_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// MOTION_CB MOTION_CB Action generated when the mouse moves.
        /// Callback int function(Ihandle *ih, int x, int y, char *status); [in C]
        /// ih:motion_cb(x, y: number, status: string) -> (ret: number) [in Lua] ih:
        /// identifier of the element that activated the event.
        /// x, y: position in the canvas where the event has occurred, in pixels.
        /// status: status of mouse buttons and certain keyboard keys at the moment the
        /// event was generated.
        /// The same macros used for BUTTON_CB can be used for this status.
        /// Notes Between press and release all mouse events are redirected only to
        /// this control, even if the cursor moves outside the element.
        /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
        /// called with coordinates outside the element rectangle.
        /// Affects IupCanvas, IupGLCanvas
        pub fn setMotionCallback(self: *Initializer, callback: ?OnMotionFn) Initializer {
            const Handler = CallbackHandler(Self, OnMotionFn, "MOTION_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
        /// updated in IupMap.
        /// When the element is a dialog, it is called after the layout is updated.
        /// For all other elements is called before the layout is updated, so the
        /// element current size will still be 0x0 during MAP_CB (since 3.14).
        /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
        /// Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setMapCallback(self: *Initializer, callback: ?OnMapFn) Initializer {
            const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
        /// native element.
        /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Notes When the cursor is moved from one element to another, the call order
        /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
        /// control followed by the ENTERWINDOW_CB callback of the new control.
        /// (since 3.14) If the mouse button is hold pressed and the cursor moves
        /// outside the element the behavior is system dependent.
        /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
        /// GTK the callbacks are called.
        /// Affects All controls with user interaction.
        /// See Also LEAVEWINDOW_CB
        pub fn setEnterWindowCallback(self: *Initializer, callback: ?OnEnterWindowFn) Initializer {
            const Handler = CallbackHandler(Self, OnEnterWindowFn, "ENTERWINDOW_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
        /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Notes If the dialog is visible then it is hidden before it is destroyed.
        /// The callback will be called right after it is hidden.
        /// The callback will be called before all other destroy procedures.
        /// For instance, if the element has children then it is called before the
        /// children are destroyed.
        /// For language binding implementations use the callback name "LDESTROY_CB" to
        /// release memory allocated by the binding for the element.
        /// Also the callback will be called before the language callback.
        /// Affects All.
        pub fn setDestroyCallback(self: *Initializer, callback: ?OnDestroyFn) Initializer {
            const Handler = CallbackHandler(Self, OnDestroyFn, "DESTROY_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDropDataCallback(self: *Initializer, callback: ?OnDropDataFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropDataFn, "DROPDATA_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
        /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
        /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Affects All elements with user interaction, except menus.
        /// In Windows, there are restrictions when using this callback.
        /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
        /// function calls that display or activate a window.
        /// This causes the thread to yield control and can cause the application to
        /// stop responding to messages.
        /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
        pub fn setKillFocusCallback(self: *Initializer, callback: ?OnKillFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnKillFocusFn, "KILLFOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDragDataCallback(self: *Initializer, callback: ?OnDragDataFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragDataFn, "DRAGDATA_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDragDataSizeCallback(self: *Initializer, callback: ?OnDragDataSizeFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragDataSizeFn, "DRAGDATASIZE_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// DROPFILES_CB DROPFILES_CB Action called when a file is "dropped" into the control.
        /// When several files are dropped at once, the callback is called several
        /// times, once for each file.
        /// If defined after the element is mapped then the attribute DROPFILESTARGET
        /// must be set to YES.
        /// [Windows and GTK Only] (GTK 2.6) Callback int function(Ihandle *ih, const
        /// char* filename, int num, int x, int y); [in C] ih:dropfiles_cb(filename:
        /// string; num, x, y: number) -> (ret: number) [in Lua] ih: identifier of the
        /// element that activated the event.
        /// filename: Name of the dropped file.
        /// num: Number index of the dropped file.
        /// If several files are dropped, num is the index of the dropped file starting
        /// from "total-1" to "0".
        /// x: X coordinate of the point where the user released the mouse button.
        /// y: Y coordinate of the point where the user released the mouse button.
        /// Returns: If IUP_IGNORE is returned the callback will NOT be called for the
        /// next dropped files, and the processing of dropped files will be interrupted.
        /// Affects IupDialog, IupCanvas, IupGLCanvas, IupText, IupList
        pub fn setDropFilesCallback(self: *Initializer, callback: ?OnDropFilesFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropFilesFn, "DROPFILES_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
        /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setUnmapCallback(self: *Initializer, callback: ?OnUnmapFn) Initializer {
            const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setCaretCallback(self: *Initializer, callback: ?OnCaretFn) Initializer {
            const Handler = CallbackHandler(Self, OnCaretFn, "CARET_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
        /// This callback is called after the KILLFOCUS_CB of the element that loosed
        /// the focus.
        /// The IupGetFocus function during the callback returns the element that
        /// loosed the focus.
        /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that received keyboard focus.
        /// Affects All elements with user interaction, except menus.
        /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
        pub fn setGetFocusCallback(self: *Initializer, callback: ?OnGetFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnGetFocusFn, "GETFOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// BUTTON_CB BUTTON_CB Action generated when a mouse button is pressed or released.
        /// Callback int function(Ihandle* ih, int button, int pressed, int x, int y,
        /// char* status); [in C] ih:button_cb(button, pressed, x, y: number, status:
        /// string) -> (ret: number) [in Lua] ih: identifies the element that activated
        /// the event.
        /// button: identifies the activated mouse button: IUP_BUTTON1 - left mouse
        /// button (button 1); IUP_BUTTON2 - middle mouse button (button 2);
        /// IUP_BUTTON3 - right mouse button (button 3).
        /// pressed: indicates the state of the button: 0 - mouse button was released;
        /// 1 - mouse button was pressed.
        /// x, y: position in the canvas where the event has occurred, in pixels.
        /// status: status of the mouse buttons and some keyboard keys at the moment
        /// the event is generated.
        /// The following macros must be used for verification: iup_isshift(status)
        /// iup_iscontrol(status) iup_isbutton1(status) iup_isbutton2(status)
        /// iup_isbutton3(status) iup_isbutton4(status) iup_isbutton5(status)
        /// iup_isdouble(status) iup_isalt(status) iup_issys(status) They return 1 if
        /// the respective key or button is pressed, and 0 otherwise.
        /// These macros are also available in Lua, returning a boolean.
        /// Returns: IUP_CLOSE will be processed.
        /// On some controls if IUP_IGNORE is returned the action is ignored (this is
        /// system dependent).
        /// Notes This callback can be used to customize a button behavior.
        /// For a standard button behavior use the ACTION callback of the IupButton.
        /// For a single click the callback is called twice, one for pressed=1 and one
        /// for pressed=0.
        /// Only after both calls the ACTION callback is called.
        /// In Windows, if a dialog is shown or popup in any situation there could be
        /// unpredictable results because the native system still has processing to be
        /// done even after the callback is called.
        /// A double click is preceded by two single clicks, one for pressed=1 and one
        /// for pressed=0, and followed by a press=0, all three without the double
        /// click flag set.
        /// In GTK, it is preceded by an additional two single clicks sequence.
        /// For example, for one double click all the following calls are made:
        /// BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) BUTTON_CB(but=1 (0), x=154, y=83 [
        /// 1 ]) BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1
        /// (0), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1 (1), x=154, y=83 [ 1
        /// D ]) BUTTON_CB(but=1 (0), x=154, y=83 [ 1 ]) Between press and release all
        /// mouse events are redirected only to this control, even if the cursor moves
        /// outside the element.
        /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
        /// called with coordinates outside the element rectangle.
        /// Affects IupCanvas, IupButton, IupText, IupList, IupGLCanvas
        pub fn setButtonCallback(self: *Initializer, callback: ?OnButtonFn) Initializer {
            const Handler = CallbackHandler(Self, OnButtonFn, "BUTTON_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setValueChangedCallback(self: *Initializer, callback: ?OnValueChangedFn) Initializer {
            const Handler = CallbackHandler(Self, OnValueChangedFn, "VALUECHANGED_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setSpinCallback(self: *Initializer, callback: ?OnSpinFn) Initializer {
            const Handler = CallbackHandler(Self, OnSpinFn, "SPIN_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setLDestroyCallback(self: *Initializer, callback: ?OnLDestroyFn) Initializer {
            const Handler = CallbackHandler(Self, OnLDestroyFn, "LDESTROY_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
        /// native element.
        /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Notes When the cursor is moved from one element to another, the call order
        /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
        /// control followed by the ENTERWINDOW_CB callback of the new control.
        /// (since 3.14) If the mouse button is hold pressed and the cursor moves
        /// outside the element the behavior is system dependent.
        /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
        /// GTK the callbacks are called.
        /// Affects All controls with user interaction.
        /// See Also ENTERWINDOW_CB
        pub fn setLeaveWindowCallback(self: *Initializer, callback: ?OnLeaveWindowFn) Initializer {
            const Handler = CallbackHandler(Self, OnLeaveWindowFn, "LEAVEWINDOW_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setPostMessageCallback(self: *Initializer, callback: ?OnPostMessageFn) Initializer {
            const Handler = CallbackHandler(Self, OnPostMessageFn, "POSTMESSAGE_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }
    };

    ///
    /// Creates an interface element given its class name and parameters.
    /// After creation the element still needs to be attached to a container and mapped to the native system so it can be visible.
    pub fn init() Initializer {
        var handle = c.IupCreate(Self.CLASS_NAME);

        if (handle) |valid| {
            return .{
                .ref = @ptrCast(*Self, valid),
            };
        } else {
            return .{ .ref = undefined, .last_error = Error.NotInitialized };
        }
    }

    /// 
    /// Destroys an interface element and all its children.
    /// Only dialogs, timers, popup menus and images should be normally destroyed, but detached elements can also be destroyed.        
    pub fn deinit(self: *Self) void {
        c.IupDestroy(c.getHandle(self));
    }

    pub fn setStrAttribute(self: *Self, attributeName: [:0]const u8, arg: [:0]const u8) void {
        c.setStrAttribute(self, attributeName, void, void, arg);
    }

    pub fn getStrAttribute(self: *Self, attributeName: [:0]const u8) [:0]const u8 {
        return c.getStrAttribute(self, attributeName, void, void);
    }

    pub fn setIntAttribute(self: *Self, attributeName: [:0]const u8, arg: i32) void {
        c.setIntAttribute(self, attributeName, void, void, arg);
    }

    pub fn getIntAttribute(self: *Self, attributeName: [:0]const u8) i32 {
        return c.getIntAttribute(self, attributeName, void, void);
    }

    pub fn setBoolAttribute(self: *Self, attributeName: [:0]const u8, arg: bool) void {
        c.setBoolAttribute(self, attributeName, void, void, arg);
    }

    pub fn getBoolAttribute(self: *Self, attributeName: [:0]const u8) bool {
        return c.getBoolAttribute(self, attributeName, void, void);
    }

    pub fn getPtrAttribute(handle: *Self, comptime T: type, attributeName: [:0]const u8) ?*T {
        return c.getPtrAttribute(T, handle, attributeName, void, void);
    }

    pub fn setPtrAttribute(handle: *Self, comptime T: type, attributeName: [:0]const u8, value: ?*T) void {
        c.setPtrAttribute(T, handle, attributeName, void, void, value);
    }

    ///
    ///
    pub fn getDialog(self: *Self) ?*iup.Dialog {
        if (c.IupGetDialog(c.getHandle(self))) |handle| {
            return c.fromHandle(iup.Dialog, handle);
        } else {
            return null;
        }
    }

    ///
    /// Converts a (lin, col) character positioning into an absolute position. lin and col starts at 1, pos starts at 0. For single line controls pos is always "col - 1". (since 3.0)
    pub fn convertLinColToPos(self: *Self, lin: i32, col: i32) ?i32 {
        return Impl(Self).convertLinColToPos(self, lin, col);
    }

    ///
    ///
    pub fn convertPosToLinCol(self: *Self, pos: i32) ?iup.LinColPos {
        return Impl(Self).convertPosToLinCol(self, pos);
    }

    ///
    /// Returns the the child element that has the NAME attribute equals to the given value on the same dialog hierarchy.
    /// Works also for children of a menu that is associated with a dialog.
    pub fn getDialogChild(self: *Self, byName: [:0]const u8) ?Element {
        var child = c.IupGetDialogChild(c.getHandle(self), c.toCStr(byName)) orelse return null;
        var className = c.fromCStr(c.IupGetClassName(child));

        return Element.fromClassName(className, child);
    }

    ///
    /// Updates the size and layout of all controls in the same dialog.
    /// To be used after changing size attributes, or attributes that affect the size of the control. Can be used for any element inside a dialog, but the layout of the dialog and all controls will be updated. It can change the layout of all the controls inside the dialog because of the dynamic layout positioning.
    pub fn refresh(self: *Self) void {
        try Impl(Self).refresh(self);
    }

    pub fn getFgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "FGCOLOR", void, void);
    }

    pub fn setFgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "FGCOLOR", void, void, rgb);
    }

    pub fn getCount(self: *Self) i32 {
        return c.getIntAttribute(self, "COUNT", void, void);
    }

    pub fn getTipBalloon(self: *Self) bool {
        return c.getBoolAttribute(self, "TIPBALLOON", void, void);
    }

    pub fn setTipBalloon(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TIPBALLOON", void, void, arg);
    }

    pub fn getHandleName(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "HANDLENAME", void, void);
    }

    pub fn setHandleName(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "HANDLENAME", void, void, arg);
    }

    pub fn getTipBgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "TIPBGCOLOR", void, void);
    }

    pub fn setTipBgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "TIPBGCOLOR", void, void, rgb);
    }

    pub fn getWordWrap(self: *Self) bool {
        return c.getBoolAttribute(self, "WORDWRAP", void, void);
    }

    pub fn setWordWrap(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "WORDWRAP", void, void, arg);
    }

    pub fn getPassword(self: *Self) bool {
        return c.getBoolAttribute(self, "PASSWORD", void, void);
    }

    pub fn setPassword(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "PASSWORD", void, void, arg);
    }

    pub fn getCaret(self: *Self) iup.LinColPos {
        var str = c.getStrAttribute(self, "CARET", void, void);
        return iup.LinColPos.parse(str, ',');
    }

    pub fn setCaret(self: *Self, lin: i32, col: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.LinColPos.intIntToString(&buffer, lin, col, ',');
        c.setStrAttribute(self, "CARET", void, void, value);
    }

    pub fn getMaskDecimalSymbol(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "MASKDECIMALSYMBOL", void, void);
    }

    pub fn setMaskDecimalSymbol(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "MASKDECIMALSYMBOL", void, void, arg);
    }

    pub fn getOverwrite(self: *Self) bool {
        return c.getBoolAttribute(self, "OVERWRITE", void, void);
    }

    pub fn setOverwrite(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "OVERWRITE", void, void, arg);
    }

    pub fn getAddFormatTagHandle(self: *Self) ?*iup.User {
        if (c.getHandleAttribute(self, "ADDFORMATTAG_HANDLE", void, void)) |handle| {
            return @ptrCast(*iup.User, handle);
        } else {
            return null;
        }
    }

    pub fn setAddFormatTagHandle(self: *Self, arg: *iup.User) void {
        c.setHandleAttribute(self, "ADDFORMATTAG_HANDLE", void, void, arg);
    }

    pub fn getSpinInc(self: *Self) i32 {
        return c.getIntAttribute(self, "SPININC", void, void);
    }

    pub fn setSpinInc(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "SPININC", void, void, arg);
    }

    pub fn getNoHideSel(self: *Self) bool {
        return c.getBoolAttribute(self, "NOHIDESEL", void, void);
    }

    pub fn setNoHideSel(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "NOHIDESEL", void, void, arg);
    }

    pub fn getMaxSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "MAXSIZE", void, void);
        return Size.parse(str);
    }

    pub fn setMaxSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "MAXSIZE", void, void, value);
    }

    pub fn getScreenPosition(self: *Self) iup.XYPos {
        var str = c.getStrAttribute(self, "SCREENPOSITION", void, void);
        return iup.XYPos.parse(str, ',');
    }

    pub fn getPosition(self: *Self) iup.XYPos {
        var str = c.getStrAttribute(self, "POSITION", void, void);
        return iup.XYPos.parse(str, ',');
    }

    pub fn setPosition(self: *Self, x: i32, y: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
        c.setStrAttribute(self, "POSITION", void, void, value);
    }

    pub fn getAppendNewLine(self: *Self) bool {
        return c.getBoolAttribute(self, "APPENDNEWLINE", void, void);
    }

    pub fn setAppendNewLine(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "APPENDNEWLINE", void, void, arg);
    }

    pub fn loadRtf(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "LOADRTF", void, void, arg);
    }

    pub fn getDropFilesTarget(self: *Self) bool {
        return c.getBoolAttribute(self, "DROPFILESTARGET", void, void);
    }

    pub fn setDropFilesTarget(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DROPFILESTARGET", void, void, arg);
    }

    pub fn getTip(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "TIP", void, void);
    }

    pub fn setTip(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "TIP", void, void, arg);
    }

    pub fn getCanFocus(self: *Self) bool {
        return c.getBoolAttribute(self, "CANFOCUS", void, void);
    }

    pub fn setCanFocus(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "CANFOCUS", void, void, arg);
    }

    pub fn getDragSourceMove(self: *Self) bool {
        return c.getBoolAttribute(self, "DRAGSOURCEMOVE", void, void);
    }

    pub fn setDragSourceMove(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DRAGSOURCEMOVE", void, void, arg);
    }

    pub fn getAddFormatTag(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "ADDFORMATTAG", void, void);
    }

    pub fn setAddFormatTag(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "ADDFORMATTAG", void, void, arg);
    }

    pub fn getVisible(self: *Self) bool {
        return c.getBoolAttribute(self, "VISIBLE", void, void);
    }

    pub fn setVisible(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "VISIBLE", void, void, arg);
    }

    pub fn getNc(self: *Self) i32 {
        return c.getIntAttribute(self, "NC", void, void);
    }

    pub fn setNc(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "NC", void, void, arg);
    }

    pub fn saveRtf(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "SAVERTF", void, void, arg);
    }

    pub fn zOrder(self: *Self, arg: ?ZOrder) void {
        if (arg) |value| switch (value) {
            .Top => c.setStrAttribute(self, "ZORDER", void, void, "TOP"),
            .Bottom => c.setStrAttribute(self, "ZORDER", void, void, "BOTTOM"),
        } else {
            c.clearAttribute(self, "ZORDER", void, void);
        }
    }

    pub fn getX(self: *Self) i32 {
        return c.getIntAttribute(self, "X", void, void);
    }

    pub fn getY(self: *Self) i32 {
        return c.getIntAttribute(self, "Y", void, void);
    }

    pub fn getDragDrop(self: *Self) bool {
        return c.getBoolAttribute(self, "DRAGDROP", void, void);
    }

    pub fn setDragDrop(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DRAGDROP", void, void, arg);
    }

    pub fn getTheme(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "THEME", void, void);
    }

    pub fn setTheme(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "THEME", void, void, arg);
    }

    pub fn getMaskReal(self: *Self) ?MaskReal {
        var ret = c.getStrAttribute(self, "MASKREAL", void, void);

        if (std.ascii.eqlIgnoreCase("SIGNED", ret)) return .Signed;
        if (std.ascii.eqlIgnoreCase("UNSIGNED", ret)) return .Unsigned;
        return null;
    }

    pub fn setMaskReal(self: *Self, arg: ?MaskReal) void {
        if (arg) |value| switch (value) {
            .Signed => c.setStrAttribute(self, "MASKREAL", void, void, "SIGNED"),
            .Unsigned => c.setStrAttribute(self, "MASKREAL", void, void, "UNSIGNED"),
        } else {
            c.clearAttribute(self, "MASKREAL", void, void);
        }
    }

    pub fn getDragCursorCopy(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "DRAGCURSORCOPY", void, void);
    }

    pub fn setDragCursorCopy(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "DRAGCURSORCOPY", void, void, arg);
    }

    pub fn getLineValue(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "LINEVALUE", void, void);
    }

    pub fn getExpand(self: *Self) ?Expand {
        var ret = c.getStrAttribute(self, "EXPAND", void, void);

        if (std.ascii.eqlIgnoreCase("YES", ret)) return .Yes;
        if (std.ascii.eqlIgnoreCase("HORIZONTAL", ret)) return .Horizontal;
        if (std.ascii.eqlIgnoreCase("VERTICAL", ret)) return .Vertical;
        if (std.ascii.eqlIgnoreCase("HORIZONTALFREE", ret)) return .HorizontalFree;
        if (std.ascii.eqlIgnoreCase("VERTICALFREE", ret)) return .VerticalFree;
        if (std.ascii.eqlIgnoreCase("NO", ret)) return .No;
        return null;
    }

    pub fn setExpand(self: *Self, arg: ?Expand) void {
        if (arg) |value| switch (value) {
            .Yes => c.setStrAttribute(self, "EXPAND", void, void, "YES"),
            .Horizontal => c.setStrAttribute(self, "EXPAND", void, void, "HORIZONTAL"),
            .Vertical => c.setStrAttribute(self, "EXPAND", void, void, "VERTICAL"),
            .HorizontalFree => c.setStrAttribute(self, "EXPAND", void, void, "HORIZONTALFREE"),
            .VerticalFree => c.setStrAttribute(self, "EXPAND", void, void, "VERTICALFREE"),
            .No => c.setStrAttribute(self, "EXPAND", void, void, "NO"),
        } else {
            c.clearAttribute(self, "EXPAND", void, void);
        }
    }

    pub fn getVisibleLines(self: *Self) i32 {
        return c.getIntAttribute(self, "VISIBLELINES", void, void);
    }

    pub fn setVisibleLines(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "VISIBLELINES", void, void, arg);
    }

    pub fn getSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "SIZE", void, void);
        return Size.parse(str);
    }

    pub fn setSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "SIZE", void, void, value);
    }

    pub fn getPadding(self: *Self) Size {
        var str = c.getStrAttribute(self, "PADDING", void, void);
        return Size.parse(str);
    }

    pub fn setPadding(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "PADDING", void, void, value);
    }

    pub fn getSpinMin(self: *Self) i32 {
        return c.getIntAttribute(self, "SPINMIN", void, void);
    }

    pub fn setSpinMin(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "SPINMIN", void, void, arg);
    }

    pub fn getWId(self: *Self) i32 {
        return c.getIntAttribute(self, "WID", void, void);
    }

    pub fn getLoadRtfStatus(self: *Self) ?LoadRtfStatus {
        var ret = c.getStrAttribute(self, "LOADRTFSTATUS", void, void);

        if (std.ascii.eqlIgnoreCase("OK", ret)) return .Ok;
        if (std.ascii.eqlIgnoreCase("FAILED", ret)) return .Failed;
        return null;
    }

    pub fn setLoadRtfStatus(self: *Self, arg: ?LoadRtfStatus) void {
        if (arg) |value| switch (value) {
            .Ok => c.setStrAttribute(self, "LOADRTFSTATUS", void, void, "OK"),
            .Failed => c.setStrAttribute(self, "LOADRTFSTATUS", void, void, "FAILED"),
        } else {
            c.clearAttribute(self, "LOADRTFSTATUS", void, void);
        }
    }

    pub fn getFontSize(self: *Self) i32 {
        return c.getIntAttribute(self, "FONTSIZE", void, void);
    }

    pub fn setFontSize(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "FONTSIZE", void, void, arg);
    }

    pub fn getNaturalSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "NATURALSIZE", void, void);
        return Size.parse(str);
    }

    pub fn getDropTypes(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "DROPTYPES", void, void);
    }

    pub fn setDropTypes(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "DROPTYPES", void, void, arg);
    }

    pub fn getUserSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "USERSIZE", void, void);
        return Size.parse(str);
    }

    pub fn setUserSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "USERSIZE", void, void, value);
    }

    pub fn getTipDelay(self: *Self) i32 {
        return c.getIntAttribute(self, "TIPDELAY", void, void);
    }

    pub fn setTipDelay(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "TIPDELAY", void, void, arg);
    }

    pub fn getScrollBar(self: *Self) bool {
        return c.getBoolAttribute(self, "SCROLLBAR", void, void);
    }

    pub fn setScrollBar(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "SCROLLBAR", void, void, arg);
    }

    pub fn getDragStart(self: *Self) iup.XYPos {
        var str = c.getStrAttribute(self, "DRAGSTART", void, void);
        return iup.XYPos.parse(str, ',');
    }

    pub fn setDragStart(self: *Self, x: i32, y: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
        c.setStrAttribute(self, "DRAGSTART", void, void, value);
    }

    pub fn getTabsIZe(self: *Self) i32 {
        return c.getIntAttribute(self, "TABSIZE", void, void);
    }

    pub fn setTabsIZe(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "TABSIZE", void, void, arg);
    }

    pub fn getPropagateFocus(self: *Self) bool {
        return c.getBoolAttribute(self, "PROPAGATEFOCUS", void, void);
    }

    pub fn setPropagateFocus(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "PROPAGATEFOCUS", void, void, arg);
    }

    pub fn getBgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "BGCOLOR", void, void);
    }

    pub fn setBgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "BGCOLOR", void, void, rgb);
    }

    pub fn getTipBalloonTitle(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "TIPBALLOONTITLE", void, void);
    }

    pub fn setTipBalloonTitle(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "TIPBALLOONTITLE", void, void, arg);
    }

    pub fn getDropTarget(self: *Self) bool {
        return c.getBoolAttribute(self, "DROPTARGET", void, void);
    }

    pub fn setDropTarget(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DROPTARGET", void, void, arg);
    }

    pub fn valueMasked(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "VALUEMASKED", void, void, arg);
    }

    pub fn getDragSource(self: *Self) bool {
        return c.getBoolAttribute(self, "DRAGSOURCE", void, void);
    }

    pub fn setDragSource(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DRAGSOURCE", void, void, arg);
    }

    pub fn getFloating(self: *Self) ?Floating {
        var ret = c.getStrAttribute(self, "FLOATING", void, void);

        if (std.ascii.eqlIgnoreCase("YES", ret)) return .Yes;
        if (std.ascii.eqlIgnoreCase("IGNORE", ret)) return .Ignore;
        if (std.ascii.eqlIgnoreCase("NO", ret)) return .No;
        return null;
    }

    pub fn setFloating(self: *Self, arg: ?Floating) void {
        if (arg) |value| switch (value) {
            .Yes => c.setStrAttribute(self, "FLOATING", void, void, "YES"),
            .Ignore => c.setStrAttribute(self, "FLOATING", void, void, "IGNORE"),
            .No => c.setStrAttribute(self, "FLOATING", void, void, "NO"),
        } else {
            c.clearAttribute(self, "FLOATING", void, void);
        }
    }

    pub fn getNormalizerGroup(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "NORMALIZERGROUP", void, void);
    }

    pub fn setNormalizerGroup(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "NORMALIZERGROUP", void, void, arg);
    }

    pub fn getRasterSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "RASTERSIZE", void, void);
        return Size.parse(str);
    }

    pub fn setRasterSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "RASTERSIZE", void, void, value);
    }

    pub fn scrollTopOs(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "SCROLLTOPOS", void, void, arg);
    }

    pub fn getFormatting(self: *Self) bool {
        return c.getBoolAttribute(self, "FORMATTING", void, void);
    }

    pub fn setFormatting(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "FORMATTING", void, void, arg);
    }

    pub fn scrollTo(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "SCROLLTO", void, void, arg);
    }

    pub fn getTipFgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "TIPFGCOLOR", void, void);
    }

    pub fn setTipFgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "TIPFGCOLOR", void, void, rgb);
    }

    pub fn getControlId(self: *Self) i32 {
        return c.getIntAttribute(self, "CONTROLID", void, void);
    }

    pub fn setControlId(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "CONTROLID", void, void, arg);
    }

    pub fn getLineCount(self: *Self) i32 {
        return c.getIntAttribute(self, "LINECOUNT", void, void);
    }

    pub fn getSaveRtfStatus(self: *Self) ?SaveRtfStatus {
        var ret = c.getStrAttribute(self, "SAVERTFSTATUS", void, void);

        if (std.ascii.eqlIgnoreCase("OK", ret)) return .Ok;
        if (std.ascii.eqlIgnoreCase("FAILED", ret)) return .Failed;
        return null;
    }

    pub fn setSaveRtfStatus(self: *Self, arg: ?SaveRtfStatus) void {
        if (arg) |value| switch (value) {
            .Ok => c.setStrAttribute(self, "SAVERTFSTATUS", void, void, "OK"),
            .Failed => c.setStrAttribute(self, "SAVERTFSTATUS", void, void, "FAILED"),
        } else {
            c.clearAttribute(self, "SAVERTFSTATUS", void, void);
        }
    }

    pub fn getSpinWrap(self: *Self) bool {
        return c.getBoolAttribute(self, "SPINWRAP", void, void);
    }

    pub fn setSpinWrap(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "SPINWRAP", void, void, arg);
    }

    pub fn getFontFace(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FONTFACE", void, void);
    }

    pub fn setFontFace(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FONTFACE", void, void, arg);
    }

    pub fn getVisibleColumns(self: *Self) i32 {
        return c.getIntAttribute(self, "VISIBLECOLUMNS", void, void);
    }

    pub fn setVisibleColumns(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "VISIBLECOLUMNS", void, void, arg);
    }

    pub fn getMaskInt(self: *Self) iup.Range {
        var str = c.getStrAttribute(self, "MASKINT", void, void);
        return iup.Range.parse(str, ',');
    }

    pub fn setMaskInt(self: *Self, begin: i32, end: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.Range.intIntToString(&buffer, begin, end, ',');
        c.setStrAttribute(self, "MASKINT", void, void, value);
    }

    pub fn getSpinValue(self: *Self) i32 {
        return c.getIntAttribute(self, "SPINVALUE", void, void);
    }

    pub fn setSpinValue(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "SPINVALUE", void, void, arg);
    }

    pub fn getSpinAlign(self: *Self) ?SpinAlign {
        var ret = c.getStrAttribute(self, "SPINALIGN", void, void);

        if (std.ascii.eqlIgnoreCase("LEFT", ret)) return .Left;
        if (std.ascii.eqlIgnoreCase("RIGHT", ret)) return .Right;
        return null;
    }

    pub fn setSpinAlign(self: *Self, arg: ?SpinAlign) void {
        if (arg) |value| switch (value) {
            .Left => c.setStrAttribute(self, "SPINALIGN", void, void, "LEFT"),
            .Right => c.setStrAttribute(self, "SPINALIGN", void, void, "RIGHT"),
        } else {
            c.clearAttribute(self, "SPINALIGN", void, void);
        }
    }

    pub fn getName(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "NAME", void, void);
    }

    pub fn setName(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "NAME", void, void, arg);
    }

    pub fn getMaskCasei(self: *Self) bool {
        return c.getBoolAttribute(self, "MASKCASEI", void, void);
    }

    pub fn setMaskCasei(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "MASKCASEI", void, void, arg);
    }

    pub fn getTipBalloonTitleIcon(self: *Self) bool {
        return c.getBoolAttribute(self, "TIPBALLOONTITLEICON", void, void);
    }

    pub fn setTipBalloonTitleIcon(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TIPBALLOONTITLEICON", void, void, arg);
    }

    pub fn getSelectionPos(self: *Self) iup.Range {
        var str = c.getStrAttribute(self, "SELECTIONPOS", void, void);
        return iup.Range.parse(str, ',');
    }

    pub fn setSelectionPos(self: *Self, begin: i32, end: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.Range.intIntToString(&buffer, begin, end, ',');
        c.setStrAttribute(self, "SELECTIONPOS", void, void, value);
    }

    pub fn getValue(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "VALUE", void, void);
    }

    pub fn setValue(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "VALUE", void, void, arg);
    }

    pub fn getFilter(self: *Self) ?Filter {
        var ret = c.getStrAttribute(self, "FILTER", void, void);

        if (std.ascii.eqlIgnoreCase("LOWERCASE", ret)) return .LowerCase;
        if (std.ascii.eqlIgnoreCase("NUMBER", ret)) return .Number;
        if (std.ascii.eqlIgnoreCase("UPPERCASE", ret)) return .UpperCase;
        return null;
    }

    pub fn setFilter(self: *Self, arg: ?Filter) void {
        if (arg) |value| switch (value) {
            .LowerCase => c.setStrAttribute(self, "FILTER", void, void, "LOWERCASE"),
            .Number => c.setStrAttribute(self, "FILTER", void, void, "NUMBER"),
            .UpperCase => c.setStrAttribute(self, "FILTER", void, void, "UPPERCASE"),
        } else {
            c.clearAttribute(self, "FILTER", void, void);
        }
    }

    pub fn getSpinMax(self: *Self) i32 {
        return c.getIntAttribute(self, "SPINMAX", void, void);
    }

    pub fn setSpinMax(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "SPINMAX", void, void, arg);
    }

    pub fn getMultiline(self: *Self) bool {
        return c.getBoolAttribute(self, "MULTILINE", void, void);
    }

    pub fn setMultiline(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "MULTILINE", void, void, arg);
    }

    pub fn getSelectedText(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "SELECTEDTEXT", void, void);
    }

    pub fn setSelectedText(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "SELECTEDTEXT", void, void, arg);
    }

    pub fn getCPadding(self: *Self) Size {
        var str = c.getStrAttribute(self, "CPADDING", void, void);
        return Size.parse(str);
    }

    pub fn setCPadding(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "CPADDING", void, void, value);
    }

    pub fn getActive(self: *Self) bool {
        return c.getBoolAttribute(self, "ACTIVE", void, void);
    }

    pub fn setActive(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "ACTIVE", void, void, arg);
    }

    pub fn getTipVisible(self: *Self) bool {
        return c.getBoolAttribute(self, "TIPVISIBLE", void, void);
    }

    pub fn setTipVisible(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TIPVISIBLE", void, void, arg);
    }

    pub fn changeCase(self: *Self, arg: ?ChangeCase) void {
        if (arg) |value| switch (value) {
            .Upper => c.setStrAttribute(self, "CHANGECASE", void, void, "UPPER"),
            .Lower => c.setStrAttribute(self, "CHANGECASE", void, void, "LOWER"),
            .Toggle => c.setStrAttribute(self, "CHANGECASE", void, void, "TOGGLE"),
            .Title => c.setStrAttribute(self, "CHANGECASE", void, void, "TITLE"),
        } else {
            c.clearAttribute(self, "CHANGECASE", void, void);
        }
    }

    pub fn getCueBanner(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "CUEBANNER", void, void);
    }

    pub fn setCueBanner(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "CUEBANNER", void, void, arg);
    }

    pub fn getExpandWeight(self: *Self) f64 {
        return c.getDoubleAttribute(self, "EXPANDWEIGHT", void, void);
    }

    pub fn setExpandWeight(self: *Self, arg: f64) void {
        c.setDoubleAttribute(self, "EXPANDWEIGHT", void, void, arg);
    }

    pub fn getMinSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "MINSIZE", void, void);
        return Size.parse(str);
    }

    pub fn setMinSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "MINSIZE", void, void, value);
    }

    pub fn getSpin(self: *Self) bool {
        return c.getBoolAttribute(self, "SPIN", void, void);
    }

    pub fn setSpin(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "SPIN", void, void, arg);
    }

    pub fn getNTheme(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "NTHEME", void, void);
    }

    pub fn setNTheme(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "NTHEME", void, void, arg);
    }

    pub fn getBorder(self: *Self) bool {
        return c.getBoolAttribute(self, "BORDER", void, void);
    }

    pub fn setBorder(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "BORDER", void, void, arg);
    }

    pub fn getCharSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "CHARSIZE", void, void);
        return Size.parse(str);
    }

    pub fn getCaretPos(self: *Self) i32 {
        return c.getIntAttribute(self, "CARETPOS", void, void);
    }

    pub fn setCaretPos(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "CARETPOS", void, void, arg);
    }

    pub fn getSpinAuto(self: *Self) bool {
        return c.getBoolAttribute(self, "SPINAUTO", void, void);
    }

    pub fn setSpinAuto(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "SPINAUTO", void, void, arg);
    }

    pub fn getMask(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "MASK", void, void);
    }

    pub fn setMask(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "MASK", void, void, arg);
    }

    pub fn getDragTypes(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "DRAGTYPES", void, void);
    }

    pub fn setDragTypes(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "DRAGTYPES", void, void, arg);
    }

    pub fn getAutoHide(self: *Self) bool {
        return c.getBoolAttribute(self, "AUTOHIDE", void, void);
    }

    pub fn setAutoHide(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "AUTOHIDE", void, void, arg);
    }

    pub fn getFontStyle(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FONTSTYLE", void, void);
    }

    pub fn setFontStyle(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FONTSTYLE", void, void, arg);
    }

    pub fn autoRedraw(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "AUTOREDRAW", void, void, arg);
    }

    pub fn getTouch(self: *Self) bool {
        return c.getBoolAttribute(self, "TOUCH", void, void);
    }

    pub fn setTouch(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TOUCH", void, void, arg);
    }

    pub fn getClipboard(self: *Self) ?Clipboard {
        var ret = c.getStrAttribute(self, "CLIPBOARD", void, void);

        if (std.ascii.eqlIgnoreCase("COPY", ret)) return .Copy;
        if (std.ascii.eqlIgnoreCase("CUT", ret)) return .Cut;
        if (std.ascii.eqlIgnoreCase("PASTE", ret)) return .Paste;
        if (std.ascii.eqlIgnoreCase("CLEAR", ret)) return .Clear;
        if (std.ascii.eqlIgnoreCase("UNDO", ret)) return .Undo;
        if (std.ascii.eqlIgnoreCase("REDO", ret)) return .Redo;
        return null;
    }

    pub fn setClipboard(self: *Self, arg: ?Clipboard) void {
        if (arg) |value| switch (value) {
            .Copy => c.setStrAttribute(self, "CLIPBOARD", void, void, "COPY"),
            .Cut => c.setStrAttribute(self, "CLIPBOARD", void, void, "CUT"),
            .Paste => c.setStrAttribute(self, "CLIPBOARD", void, void, "PASTE"),
            .Clear => c.setStrAttribute(self, "CLIPBOARD", void, void, "CLEAR"),
            .Undo => c.setStrAttribute(self, "CLIPBOARD", void, void, "UNDO"),
            .Redo => c.setStrAttribute(self, "CLIPBOARD", void, void, "REDO"),
        } else {
            c.clearAttribute(self, "CLIPBOARD", void, void);
        }
    }

    pub fn removeFormatting(self: *Self, arg: ?RemoveFormatting) void {
        if (arg) |value| switch (value) {
            .All => c.setStrAttribute(self, "REMOVEFORMATTING", void, void, "ALL"),
            .Selection => c.setStrAttribute(self, "REMOVEFORMATTING", void, void, "SELECTION"),
        } else {
            c.clearAttribute(self, "REMOVEFORMATTING", void, void);
        }
    }

    pub fn getReadonly(self: *Self) bool {
        return c.getBoolAttribute(self, "READONLY", void, void);
    }

    pub fn setReadonly(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "READONLY", void, void, arg);
    }

    pub fn append(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "APPEND", void, void, arg);
    }

    pub fn getDragCursor(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "DRAGCURSOR", void, void);
    }

    pub fn setDragCursor(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "DRAGCURSOR", void, void, arg);
    }

    pub fn getMaskNoEmpty(self: *Self) bool {
        return c.getBoolAttribute(self, "MASKNOEMPTY", void, void);
    }

    pub fn setMaskNoEmpty(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "MASKNOEMPTY", void, void, arg);
    }

    pub fn getFont(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FONT", void, void);
    }

    pub fn setFont(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FONT", void, void, arg);
    }

    pub fn setTouchCallback(self: *Self, callback: ?OnTouchFn) void {
        const Handler = CallbackHandler(Self, OnTouchFn, "TOUCH_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// K_ANY K_ANY Action generated when a keyboard event occurs.
    /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
    /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
    /// c: identifier of typed key.
    /// Please refer to the Keyboard Codes table for a list of possible values.
    /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
    /// the control and not propagated.
    /// If returns IUP_CONTINUE, the key will be processed and the event will be
    /// propagated to the parent of the element receiving it, this is the default behavior.
    /// If returns IUP_DEFAULT the key is processed but it is not propagated.
    /// IUP_CLOSE will be processed.
    /// Notes Keyboard callbacks depend on the keyboard usage of the control with
    /// the focus.
    /// So if you return IUP_IGNORE the control will usually not process the key.
    /// But be aware that sometimes the control process the key in another event so
    /// even returning IUP_IGNORE the key can get processed.
    /// Although it will not be propagated.
    /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
    /// the IUP_CONTINUE return value to work while the control is in focus.
    /// If the callback does not exists it is automatically propagated to the
    /// parent of the element.
    /// K_* callbacks All defined keys are also callbacks of any element, called
    /// when the respective key is activated.
    /// For example: "K_cC" is also a callback activated when the user press
    /// Ctrl+C, when the focus is at the element or at a children with focus.
    /// This is the way an application can create shortcut keys, also called hot keys.
    /// These callbacks are not available in IupLua.
    /// Affects All elements with keyboard interaction.
    pub fn setKAnyCallback(self: *Self, callback: ?OnKAnyFn) void {
        const Handler = CallbackHandler(Self, OnKAnyFn, "K_ANY");
        Handler.setCallback(self, callback);
    }

    /// 
    /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
    /// In Motif is also activated by the Help button in some workstations keyboard.
    /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Returns: IUP_CLOSE will be processed.
    /// Affects All elements with user interaction.
    pub fn setHelpCallback(self: *Self, callback: ?OnHelpFn) void {
        const Handler = CallbackHandler(Self, OnHelpFn, "HELP_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDropMotionCallback(self: *Self, callback: ?OnDropMotionFn) void {
        const Handler = CallbackHandler(Self, OnDropMotionFn, "DROPMOTION_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragEndCallback(self: *Self, callback: ?OnDragEndFn) void {
        const Handler = CallbackHandler(Self, OnDragEndFn, "DRAGEND_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragBeginCallback(self: *Self, callback: ?OnDragBeginFn) void {
        const Handler = CallbackHandler(Self, OnDragBeginFn, "DRAGBEGIN_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// ACTION ACTION Action generated when the element is activated.
    /// Affects each element differently.
    /// Callback int function(Ihandle *ih); [in C] ih:action() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// In some elements, this callback may receive more parameters, apart from ih.
    /// Please refer to each element's documentation.
    /// Affects IupButton, IupItem, IupList, IupText, IupCanvas, IupMultiline,
    /// IupToggle
    pub fn setActionCallback(self: *Self, callback: ?OnActionFn) void {
        const Handler = CallbackHandler(Self, OnActionFn, "ACTION");
        Handler.setCallback(self, callback);
    }

    pub fn setMultiTouchCallback(self: *Self, callback: ?OnMultiTouchFn) void {
        const Handler = CallbackHandler(Self, OnMultiTouchFn, "MULTITOUCH_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// MOTION_CB MOTION_CB Action generated when the mouse moves.
    /// Callback int function(Ihandle *ih, int x, int y, char *status); [in C]
    /// ih:motion_cb(x, y: number, status: string) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of mouse buttons and certain keyboard keys at the moment the
    /// event was generated.
    /// The same macros used for BUTTON_CB can be used for this status.
    /// Notes Between press and release all mouse events are redirected only to
    /// this control, even if the cursor moves outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupGLCanvas
    pub fn setMotionCallback(self: *Self, callback: ?OnMotionFn) void {
        const Handler = CallbackHandler(Self, OnMotionFn, "MOTION_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setMapCallback(self: *Self, callback: ?OnMapFn) void {
        const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also LEAVEWINDOW_CB
    pub fn setEnterWindowCallback(self: *Self, callback: ?OnEnterWindowFn) void {
        const Handler = CallbackHandler(Self, OnEnterWindowFn, "ENTERWINDOW_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
    /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Notes If the dialog is visible then it is hidden before it is destroyed.
    /// The callback will be called right after it is hidden.
    /// The callback will be called before all other destroy procedures.
    /// For instance, if the element has children then it is called before the
    /// children are destroyed.
    /// For language binding implementations use the callback name "LDESTROY_CB" to
    /// release memory allocated by the binding for the element.
    /// Also the callback will be called before the language callback.
    /// Affects All.
    pub fn setDestroyCallback(self: *Self, callback: ?OnDestroyFn) void {
        const Handler = CallbackHandler(Self, OnDestroyFn, "DESTROY_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDropDataCallback(self: *Self, callback: ?OnDropDataFn) void {
        const Handler = CallbackHandler(Self, OnDropDataFn, "DROPDATA_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
    /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Affects All elements with user interaction, except menus.
    /// In Windows, there are restrictions when using this callback.
    /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
    /// function calls that display or activate a window.
    /// This causes the thread to yield control and can cause the application to
    /// stop responding to messages.
    /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
    pub fn setKillFocusCallback(self: *Self, callback: ?OnKillFocusFn) void {
        const Handler = CallbackHandler(Self, OnKillFocusFn, "KILLFOCUS_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragDataCallback(self: *Self, callback: ?OnDragDataFn) void {
        const Handler = CallbackHandler(Self, OnDragDataFn, "DRAGDATA_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragDataSizeCallback(self: *Self, callback: ?OnDragDataSizeFn) void {
        const Handler = CallbackHandler(Self, OnDragDataSizeFn, "DRAGDATASIZE_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// DROPFILES_CB DROPFILES_CB Action called when a file is "dropped" into the control.
    /// When several files are dropped at once, the callback is called several
    /// times, once for each file.
    /// If defined after the element is mapped then the attribute DROPFILESTARGET
    /// must be set to YES.
    /// [Windows and GTK Only] (GTK 2.6) Callback int function(Ihandle *ih, const
    /// char* filename, int num, int x, int y); [in C] ih:dropfiles_cb(filename:
    /// string; num, x, y: number) -> (ret: number) [in Lua] ih: identifier of the
    /// element that activated the event.
    /// filename: Name of the dropped file.
    /// num: Number index of the dropped file.
    /// If several files are dropped, num is the index of the dropped file starting
    /// from "total-1" to "0".
    /// x: X coordinate of the point where the user released the mouse button.
    /// y: Y coordinate of the point where the user released the mouse button.
    /// Returns: If IUP_IGNORE is returned the callback will NOT be called for the
    /// next dropped files, and the processing of dropped files will be interrupted.
    /// Affects IupDialog, IupCanvas, IupGLCanvas, IupText, IupList
    pub fn setDropFilesCallback(self: *Self, callback: ?OnDropFilesFn) void {
        const Handler = CallbackHandler(Self, OnDropFilesFn, "DROPFILES_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setUnmapCallback(self: *Self, callback: ?OnUnmapFn) void {
        const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setCaretCallback(self: *Self, callback: ?OnCaretFn) void {
        const Handler = CallbackHandler(Self, OnCaretFn, "CARET_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
    /// This callback is called after the KILLFOCUS_CB of the element that loosed
    /// the focus.
    /// The IupGetFocus function during the callback returns the element that
    /// loosed the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that received keyboard focus.
    /// Affects All elements with user interaction, except menus.
    /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
    pub fn setGetFocusCallback(self: *Self, callback: ?OnGetFocusFn) void {
        const Handler = CallbackHandler(Self, OnGetFocusFn, "GETFOCUS_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// BUTTON_CB BUTTON_CB Action generated when a mouse button is pressed or released.
    /// Callback int function(Ihandle* ih, int button, int pressed, int x, int y,
    /// char* status); [in C] ih:button_cb(button, pressed, x, y: number, status:
    /// string) -> (ret: number) [in Lua] ih: identifies the element that activated
    /// the event.
    /// button: identifies the activated mouse button: IUP_BUTTON1 - left mouse
    /// button (button 1); IUP_BUTTON2 - middle mouse button (button 2);
    /// IUP_BUTTON3 - right mouse button (button 3).
    /// pressed: indicates the state of the button: 0 - mouse button was released;
    /// 1 - mouse button was pressed.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of the mouse buttons and some keyboard keys at the moment
    /// the event is generated.
    /// The following macros must be used for verification: iup_isshift(status)
    /// iup_iscontrol(status) iup_isbutton1(status) iup_isbutton2(status)
    /// iup_isbutton3(status) iup_isbutton4(status) iup_isbutton5(status)
    /// iup_isdouble(status) iup_isalt(status) iup_issys(status) They return 1 if
    /// the respective key or button is pressed, and 0 otherwise.
    /// These macros are also available in Lua, returning a boolean.
    /// Returns: IUP_CLOSE will be processed.
    /// On some controls if IUP_IGNORE is returned the action is ignored (this is
    /// system dependent).
    /// Notes This callback can be used to customize a button behavior.
    /// For a standard button behavior use the ACTION callback of the IupButton.
    /// For a single click the callback is called twice, one for pressed=1 and one
    /// for pressed=0.
    /// Only after both calls the ACTION callback is called.
    /// In Windows, if a dialog is shown or popup in any situation there could be
    /// unpredictable results because the native system still has processing to be
    /// done even after the callback is called.
    /// A double click is preceded by two single clicks, one for pressed=1 and one
    /// for pressed=0, and followed by a press=0, all three without the double
    /// click flag set.
    /// In GTK, it is preceded by an additional two single clicks sequence.
    /// For example, for one double click all the following calls are made:
    /// BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) BUTTON_CB(but=1 (0), x=154, y=83 [
    /// 1 ]) BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1
    /// (0), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1 (1), x=154, y=83 [ 1
    /// D ]) BUTTON_CB(but=1 (0), x=154, y=83 [ 1 ]) Between press and release all
    /// mouse events are redirected only to this control, even if the cursor moves
    /// outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupButton, IupText, IupList, IupGLCanvas
    pub fn setButtonCallback(self: *Self, callback: ?OnButtonFn) void {
        const Handler = CallbackHandler(Self, OnButtonFn, "BUTTON_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setValueChangedCallback(self: *Self, callback: ?OnValueChangedFn) void {
        const Handler = CallbackHandler(Self, OnValueChangedFn, "VALUECHANGED_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setSpinCallback(self: *Self, callback: ?OnSpinFn) void {
        const Handler = CallbackHandler(Self, OnSpinFn, "SPIN_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setLDestroyCallback(self: *Self, callback: ?OnLDestroyFn) void {
        const Handler = CallbackHandler(Self, OnLDestroyFn, "LDESTROY_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also ENTERWINDOW_CB
    pub fn setLeaveWindowCallback(self: *Self, callback: ?OnLeaveWindowFn) void {
        const Handler = CallbackHandler(Self, OnLeaveWindowFn, "LEAVEWINDOW_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setPostMessageCallback(self: *Self, callback: ?OnPostMessageFn) void {
        const Handler = CallbackHandler(Self, OnPostMessageFn, "POSTMESSAGE_CB");
        Handler.setCallback(self, callback);
    }
};

test "Multiline FgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setFgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getFgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "Multiline TipBalloon" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setTipBalloon(true).unwrap());
    defer item.deinit();

    var ret = item.getTipBalloon();

    try std.testing.expect(ret == true);
}

test "Multiline HandleName" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setHandleName("Hello").unwrap());
    defer item.deinit();

    var ret = item.getHandleName();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Multiline TipBgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setTipBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTipBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "Multiline WordWrap" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setWordWrap(true).unwrap());
    defer item.deinit();

    var ret = item.getWordWrap();

    try std.testing.expect(ret == true);
}

test "Multiline Password" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setPassword(true).unwrap());
    defer item.deinit();

    var ret = item.getPassword();

    try std.testing.expect(ret == true);
}

test "Multiline Caret" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setCaret(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getCaret();

    try std.testing.expect(ret.lin == 9 and ret.col == 10);
}

test "Multiline MaskDecimalSymbol" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setMaskDecimalSymbol("Hello").unwrap());
    defer item.deinit();

    var ret = item.getMaskDecimalSymbol();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Multiline Overwrite" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setOverwrite(true).unwrap());
    defer item.deinit();

    var ret = item.getOverwrite();

    try std.testing.expect(ret == true);
}

test "Multiline SpinInc" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setSpinInc(42).unwrap());
    defer item.deinit();

    var ret = item.getSpinInc();

    try std.testing.expect(ret == 42);
}

test "Multiline NoHideSel" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setNoHideSel(true).unwrap());
    defer item.deinit();

    var ret = item.getNoHideSel();

    try std.testing.expect(ret == true);
}

test "Multiline MaxSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setMaxSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMaxSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Multiline Position" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setPosition(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getPosition();

    try std.testing.expect(ret.x == 9 and ret.y == 10);
}

test "Multiline AppendNewLine" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setAppendNewLine(true).unwrap());
    defer item.deinit();

    var ret = item.getAppendNewLine();

    try std.testing.expect(ret == true);
}

test "Multiline DropFilesTarget" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setDropFilesTarget(true).unwrap());
    defer item.deinit();

    var ret = item.getDropFilesTarget();

    try std.testing.expect(ret == true);
}

test "Multiline Tip" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setTip("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTip();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Multiline CanFocus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setCanFocus(true).unwrap());
    defer item.deinit();

    var ret = item.getCanFocus();

    try std.testing.expect(ret == true);
}

test "Multiline DragSourceMove" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setDragSourceMove(true).unwrap());
    defer item.deinit();

    var ret = item.getDragSourceMove();

    try std.testing.expect(ret == true);
}

test "Multiline AddFormatTag" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setAddFormatTag("Hello").unwrap());
    defer item.deinit();

    var ret = item.getAddFormatTag();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Multiline Visible" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setVisible(true).unwrap());
    defer item.deinit();

    var ret = item.getVisible();

    try std.testing.expect(ret == true);
}

test "Multiline Nc" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setNc(42).unwrap());
    defer item.deinit();

    var ret = item.getNc();

    try std.testing.expect(ret == 42);
}

test "Multiline DragDrop" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setDragDrop(true).unwrap());
    defer item.deinit();

    var ret = item.getDragDrop();

    try std.testing.expect(ret == true);
}

test "Multiline Theme" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setTheme("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTheme();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Multiline MaskReal" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setMaskReal(.Signed).unwrap());
    defer item.deinit();

    var ret = item.getMaskReal();

    try std.testing.expect(ret != null and ret.? == .Signed);
}

test "Multiline DragCursorCopy" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setDragCursorCopy("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDragCursorCopy();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Multiline Expand" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setExpand(.Yes).unwrap());
    defer item.deinit();

    var ret = item.getExpand();

    try std.testing.expect(ret != null and ret.? == .Yes);
}

test "Multiline VisibleLines" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setVisibleLines(42).unwrap());
    defer item.deinit();

    var ret = item.getVisibleLines();

    try std.testing.expect(ret == 42);
}

test "Multiline Size" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Multiline Padding" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setPadding(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getPadding();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Multiline SpinMin" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setSpinMin(42).unwrap());
    defer item.deinit();

    var ret = item.getSpinMin();

    try std.testing.expect(ret == 42);
}

test "Multiline LoadRtfStatus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setLoadRtfStatus(.Ok).unwrap());
    defer item.deinit();

    var ret = item.getLoadRtfStatus();

    try std.testing.expect(ret != null and ret.? == .Ok);
}

test "Multiline FontSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setFontSize(42).unwrap());
    defer item.deinit();

    var ret = item.getFontSize();

    try std.testing.expect(ret == 42);
}

test "Multiline DropTypes" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setDropTypes("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDropTypes();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Multiline UserSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setUserSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getUserSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Multiline TipDelay" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setTipDelay(42).unwrap());
    defer item.deinit();

    var ret = item.getTipDelay();

    try std.testing.expect(ret == 42);
}

test "Multiline ScrollBar" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setScrollBar(true).unwrap());
    defer item.deinit();

    var ret = item.getScrollBar();

    try std.testing.expect(ret == true);
}

test "Multiline DragStart" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setDragStart(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getDragStart();

    try std.testing.expect(ret.x == 9 and ret.y == 10);
}

test "Multiline TabsIZe" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setTabsIZe(42).unwrap());
    defer item.deinit();

    var ret = item.getTabsIZe();

    try std.testing.expect(ret == 42);
}

test "Multiline PropagateFocus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setPropagateFocus(true).unwrap());
    defer item.deinit();

    var ret = item.getPropagateFocus();

    try std.testing.expect(ret == true);
}

test "Multiline BgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "Multiline TipBalloonTitle" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setTipBalloonTitle("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTipBalloonTitle();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Multiline DropTarget" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setDropTarget(true).unwrap());
    defer item.deinit();

    var ret = item.getDropTarget();

    try std.testing.expect(ret == true);
}

test "Multiline DragSource" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setDragSource(true).unwrap());
    defer item.deinit();

    var ret = item.getDragSource();

    try std.testing.expect(ret == true);
}

test "Multiline Floating" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setFloating(.Yes).unwrap());
    defer item.deinit();

    var ret = item.getFloating();

    try std.testing.expect(ret != null and ret.? == .Yes);
}

test "Multiline NormalizerGroup" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setNormalizerGroup("Hello").unwrap());
    defer item.deinit();

    var ret = item.getNormalizerGroup();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Multiline RasterSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setRasterSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getRasterSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Multiline Formatting" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setFormatting(true).unwrap());
    defer item.deinit();

    var ret = item.getFormatting();

    try std.testing.expect(ret == true);
}

test "Multiline TipFgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setTipFgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTipFgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "Multiline ControlId" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setControlId(42).unwrap());
    defer item.deinit();

    var ret = item.getControlId();

    try std.testing.expect(ret == 42);
}

test "Multiline SaveRtfStatus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setSaveRtfStatus(.Ok).unwrap());
    defer item.deinit();

    var ret = item.getSaveRtfStatus();

    try std.testing.expect(ret != null and ret.? == .Ok);
}

test "Multiline SpinWrap" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setSpinWrap(true).unwrap());
    defer item.deinit();

    var ret = item.getSpinWrap();

    try std.testing.expect(ret == true);
}

test "Multiline FontFace" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setFontFace("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFontFace();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Multiline VisibleColumns" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setVisibleColumns(42).unwrap());
    defer item.deinit();

    var ret = item.getVisibleColumns();

    try std.testing.expect(ret == 42);
}

test "Multiline MaskInt" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setMaskInt(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMaskInt();

    try std.testing.expect(ret.begin == 9 and ret.end == 10);
}

test "Multiline SpinValue" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setSpinValue(42).unwrap());
    defer item.deinit();

    var ret = item.getSpinValue();

    try std.testing.expect(ret == 42);
}

test "Multiline SpinAlign" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setSpinAlign(.Left).unwrap());
    defer item.deinit();

    var ret = item.getSpinAlign();

    try std.testing.expect(ret != null and ret.? == .Left);
}

test "Multiline Name" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setName("Hello").unwrap());
    defer item.deinit();

    var ret = item.getName();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Multiline MaskCasei" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setMaskCasei(true).unwrap());
    defer item.deinit();

    var ret = item.getMaskCasei();

    try std.testing.expect(ret == true);
}

test "Multiline TipBalloonTitleIcon" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setTipBalloonTitleIcon(true).unwrap());
    defer item.deinit();

    var ret = item.getTipBalloonTitleIcon();

    try std.testing.expect(ret == true);
}

test "Multiline SelectionPos" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setSelectionPos(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getSelectionPos();

    try std.testing.expect(ret.begin == 9 and ret.end == 10);
}

test "Multiline Value" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setValue("Hello").unwrap());
    defer item.deinit();

    var ret = item.getValue();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Multiline Filter" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setFilter(.LowerCase).unwrap());
    defer item.deinit();

    var ret = item.getFilter();

    try std.testing.expect(ret != null and ret.? == .LowerCase);
}

test "Multiline SpinMax" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setSpinMax(42).unwrap());
    defer item.deinit();

    var ret = item.getSpinMax();

    try std.testing.expect(ret == 42);
}

test "Multiline Multiline" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setMultiline(true).unwrap());
    defer item.deinit();

    var ret = item.getMultiline();

    try std.testing.expect(ret == true);
}

test "Multiline SelectedText" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setSelectedText("Hello").unwrap());
    defer item.deinit();

    var ret = item.getSelectedText();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Multiline CPadding" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setCPadding(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getCPadding();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Multiline Active" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setActive(true).unwrap());
    defer item.deinit();

    var ret = item.getActive();

    try std.testing.expect(ret == true);
}

test "Multiline TipVisible" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setTipVisible(true).unwrap());
    defer item.deinit();

    var ret = item.getTipVisible();

    try std.testing.expect(ret == true);
}

test "Multiline CueBanner" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setCueBanner("Hello").unwrap());
    defer item.deinit();

    var ret = item.getCueBanner();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Multiline ExpandWeight" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setExpandWeight(3.14).unwrap());
    defer item.deinit();

    var ret = item.getExpandWeight();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "Multiline MinSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setMinSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMinSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Multiline Spin" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setSpin(true).unwrap());
    defer item.deinit();

    var ret = item.getSpin();

    try std.testing.expect(ret == true);
}

test "Multiline NTheme" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setNTheme("Hello").unwrap());
    defer item.deinit();

    var ret = item.getNTheme();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Multiline Border" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setBorder(true).unwrap());
    defer item.deinit();

    var ret = item.getBorder();

    try std.testing.expect(ret == true);
}

test "Multiline CaretPos" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setCaretPos(42).unwrap());
    defer item.deinit();

    var ret = item.getCaretPos();

    try std.testing.expect(ret == 42);
}

test "Multiline SpinAuto" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setSpinAuto(true).unwrap());
    defer item.deinit();

    var ret = item.getSpinAuto();

    try std.testing.expect(ret == true);
}

test "Multiline Mask" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setMask("Hello").unwrap());
    defer item.deinit();

    var ret = item.getMask();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Multiline DragTypes" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setDragTypes("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDragTypes();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Multiline AutoHide" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setAutoHide(true).unwrap());
    defer item.deinit();

    var ret = item.getAutoHide();

    try std.testing.expect(ret == true);
}

test "Multiline FontStyle" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setFontStyle("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFontStyle();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Multiline Touch" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setTouch(true).unwrap());
    defer item.deinit();

    var ret = item.getTouch();

    try std.testing.expect(ret == true);
}

test "Multiline Clipboard" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setClipboard(.Copy).unwrap());
    defer item.deinit();

    var ret = item.getClipboard();

    try std.testing.expect(ret != null and ret.? == .Copy);
}

test "Multiline Readonly" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setReadonly(true).unwrap());
    defer item.deinit();

    var ret = item.getReadonly();

    try std.testing.expect(ret == true);
}

test "Multiline DragCursor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setDragCursor("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDragCursor();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Multiline MaskNoEmpty" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setMaskNoEmpty(true).unwrap());
    defer item.deinit();

    var ret = item.getMaskNoEmpty();

    try std.testing.expect(ret == true);
}

test "Multiline Font" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Multiline.init().setFont("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFont();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}
