// This code was generated by a tool.
// IUP Metadata Code Generator
// https://github.com/batiati/IUPMetadata
//
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.

const std = @import("std");

const interop = @import("../interop.zig");
const iup = @import("../iup.zig");

const Impl = @import("../impl.zig").Impl;
const CallbackHandler = @import("../callback_handler.zig").CallbackHandler;

const debug = std.debug;
const trait = std.meta.trait;

const Element = iup.Element;
const Handle = iup.Handle;
const Error = iup.Error;
const ChildrenIterator = iup.ChildrenIterator;
const Size = iup.Size;
const Margin = iup.Margin;

///
/// Creates an interface element that displays a list of items, but it does not
/// have native decorations.
/// It behaves like IupList when DROPDOWN=NO and EDITBOX=NO.
/// It inherits from IupCanvas.
pub const FlatList = opaque {
    pub const CLASS_NAME = "flatlist";
    pub const NATIVE_TYPE = iup.NativeType.Canvas;
    const Self = @This();

    ///
    /// SCROLL_CB SCROLL_CB Called when some manipulation is made to the scrollbar.
    /// The canvas is automatically redrawn only if this callback is NOT defined.
    /// (GTK 2.8) Also the POSX and POSY values will not be correctly updated for
    /// older GTK versions.
    /// In Ubuntu, when liboverlay-scrollbar is enabled (the new tiny auto-hide
    /// scrollbar) only the IUP_SBPOSV and IUP_SBPOSH codes are used.
    /// Callback int function(Ihandle *ih, int op, float posx, float posy); [in C]
    /// ih:scroll_cb(op, posx, posy: number) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// op: indicates the operation performed on the scrollbar.
    /// If the manipulation was made on the vertical scrollbar, it can have the
    /// following values: IUP_SBUP - line up IUP_SBDN - line down IUP_SBPGUP - page
    /// up IUP_SBPGDN - page down IUP_SBPOSV - vertical positioning IUP_SBDRAGV -
    /// vertical drag If it was on the horizontal scrollbar, the following values
    /// are valid: IUP_SBLEFT - column left IUP_SBRIGHT - column right IUP_SBPGLEFT
    /// - page left IUP_SBPGRIGHT - page right IUP_SBPOSH - horizontal positioning
    /// IUP_SBDRAGH - horizontal drag posx, posy: the same as the ACTION canvas
    /// callback (corresponding to the values of attributes POSX and POSY).
    /// Notes IUP_SBDRAGH and IUP_SBDRAGV are not supported in GTK.
    /// During drag IUP_SBPOSH and IUP_SBPOSV are used.
    /// In Windows, after a drag when mouse is released IUP_SBPOSH or IUP_SBPOSV
    /// are called.
    /// Affects IupCanvas, IupGLCanvas, SCROLLBAR
    pub const OnScrollFn = fn (self: *Self, arg0: i32, arg1: f32, arg2: f32) anyerror!void;

    pub const OnFocusFn = fn (self: *Self, arg0: i32) anyerror!void;

    ///
    /// WOM_CB WOM_CB Action generated when an audio device receives an event.
    /// [Windows Only] Callback int function(Ihandle *ih, int state); [in C]
    /// ih:wom_cb(state: number) -> (ret: number) [in Lua] ih: identifies the
    /// element that activated the event.
    /// state: can be opening=1, done=0, or closing=-1.
    /// Notes This callback is used to syncronize video playback with audio.
    /// It is sent when the audio device: Message Description opening is opened by
    /// using the waveOutOpen function.
    /// done is finished with a data block sent by using the waveOutWrite function.
    /// closing is closed by using the waveOutClose function.
    /// You must use the HWND attribute when calling waveOutOpen in the dwCallback
    /// parameter and set fdwOpen to CALLBACK_WINDOW.
    /// Affects IupDialog, IupCanvas, IupGLCanvas
    pub const OnWomFn = fn (self: *Self, arg0: i32) anyerror!void;

    ///
    /// K_ANY K_ANY Action generated when a keyboard event occurs.
    /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
    /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
    /// c: identifier of typed key.
    /// Please refer to the Keyboard Codes table for a list of possible values.
    /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
    /// the control and not propagated.
    /// If returns IUP_CONTINUE, the key will be processed and the event will be
    /// propagated to the parent of the element receiving it, this is the default behavior.
    /// If returns IUP_DEFAULT the key is processed but it is not propagated.
    /// IUP_CLOSE will be processed.
    /// Notes Keyboard callbacks depend on the keyboard usage of the control with
    /// the focus.
    /// So if you return IUP_IGNORE the control will usually not process the key.
    /// But be aware that sometimes the control process the key in another event so
    /// even returning IUP_IGNORE the key can get processed.
    /// Although it will not be propagated.
    /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
    /// the IUP_CONTINUE return value to work while the control is in focus.
    /// If the callback does not exists it is automatically propagated to the
    /// parent of the element.
    /// K_* callbacks All defined keys are also callbacks of any element, called
    /// when the respective key is activated.
    /// For example: "K_cC" is also a callback activated when the user press
    /// Ctrl+C, when the focus is at the element or at a children with focus.
    /// This is the way an application can create shortcut keys, also called hot keys.
    /// These callbacks are not available in IupLua.
    /// Affects All elements with keyboard interaction.
    pub const OnKAnyFn = fn (self: *Self, arg0: i32) anyerror!void;

    pub const OnFlatFocusFn = fn (self: *Self, arg0: i32) anyerror!void;

    ///
    /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
    /// In Motif is also activated by the Help button in some workstations keyboard.
    /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Returns: IUP_CLOSE will be processed.
    /// Affects All elements with user interaction.
    pub const OnHelpFn = fn (self: *Self) anyerror!void;

    pub const OnDropMotionFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: [:0]const u8) anyerror!void;

    pub const OnFlatLeaveWindowFn = fn (self: *Self) anyerror!void;

    ///
    /// KEYPRESS_CB KEYPRESS_CB Action generated when a key is pressed or released.
    /// If the key is pressed and held several calls will occur.
    /// It is called after the callback K_ANY is processed.
    /// Callback int function(Ihandle *ih, int c, int press); [in C]
    /// ih:keypress_cb(c, press: number) -> (ret: number) [in Lua] ih: identifier
    /// of the element that activated the event.
    /// c: identifier of typed key.
    /// Please refer to the Keyboard Codes table for a list of possible values.
    /// press: 1 is the user pressed the key or 0 otherwise.
    /// Returns: If IUP_IGNORE is returned the key is ignored by the system.
    /// IUP_CLOSE will be processed.
    /// Affects IupCanvas
    pub const OnKeyPressFn = fn (self: *Self, arg0: i32, arg1: i32) anyerror!void;

    pub const OnDragEndFn = fn (self: *Self, arg0: i32) anyerror!void;

    pub const OnDragBeginFn = fn (self: *Self, arg0: i32, arg1: i32) anyerror!void;

    ///
    /// ACTION ACTION Action generated when the element is activated.
    /// Affects each element differently.
    /// Callback int function(Ihandle *ih); [in C] ih:action() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// In some elements, this callback may receive more parameters, apart from ih.
    /// Please refer to each element's documentation.
    /// Affects IupButton, IupItem, IupList, IupText, IupCanvas, IupMultiline,
    /// IupToggle
    pub const OnActionFn = fn (self: *Self, arg0: f32, arg1: f32) anyerror!void;

    ///
    /// MOTION_CB MOTION_CB Action generated when the mouse moves.
    /// Callback int function(Ihandle *ih, int x, int y, char *status); [in C]
    /// ih:motion_cb(x, y: number, status: string) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of mouse buttons and certain keyboard keys at the moment the
    /// event was generated.
    /// The same macros used for BUTTON_CB can be used for this status.
    /// Notes Between press and release all mouse events are redirected only to
    /// this control, even if the cursor moves outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupGLCanvas
    pub const OnMotionFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: [:0]const u8) anyerror!void;

    ///
    /// WHEEL_CB WHEEL_CB Action generated when the mouse wheel is rotated.
    /// If this callback is not defined the wheel will automatically scroll the
    /// canvas in the vertical direction by some lines, the SCROLL_CB callback if
    /// defined will be called with the IUP_SBDRAGV operation.
    /// Callback int function(Ihandle *ih, float delta, int x, int y, char
    /// *status); [in C] ih:wheel_cb(delta, x, y: number, status: string) -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// delta: the amount the wheel was rotated in notches.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of mouse buttons and certain keyboard keys at the moment the
    /// event was generated.
    /// The same macros used for BUTTON_CB can be used for this status.
    /// Notes In Motif and GTK delta is always 1 or -1.
    /// In Windows is some situations delta can reach the value of two.
    /// In the future with more precise wheels this increment can be changed.
    /// Affects IupCanvas, IupGLCanvas
    pub const OnWheelFn = fn (self: *Self, arg0: f32, arg1: i32, arg2: i32, arg3: [:0]const u8) anyerror!void;

    ///
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnMapFn = fn (self: *Self) anyerror!void;

    ///
    /// DRAGDROP_CB: Action generated when an internal drag and drop is executed.
    /// Only active if SHOWDRAGDROP=YES.
    /// int function(Ihandle *ih, int drag_id, int drop_id, int isshift, int
    /// iscontrol); [in C] ih:dragdrop_cb(drag_id, drop_id, isshift, iscontrol:
    /// number) -> (ret: number) [in Lua]
    pub const OnDragDropFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) anyerror!void;

    pub const OnFlatButtonFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: [:0]const u8) anyerror!void;

    ///
    /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also LEAVEWINDOW_CB
    pub const OnEnterWindowFn = fn (self: *Self) anyerror!void;

    ///
    /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
    /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Notes If the dialog is visible then it is hidden before it is destroyed.
    /// The callback will be called right after it is hidden.
    /// The callback will be called before all other destroy procedures.
    /// For instance, if the element has children then it is called before the
    /// children are destroyed.
    /// For language binding implementations use the callback name "LDESTROY_CB" to
    /// release memory allocated by the binding for the element.
    /// Also the callback will be called before the language callback.
    /// Affects All.
    pub const OnDestroyFn = fn (self: *Self) anyerror!void;

    pub const OnDropDataFn = fn (self: *Self, arg0: [:0]const u8, arg1: ?*anyopaque, arg2: i32, arg3: i32, arg4: i32) anyerror!void;

    ///
    /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
    /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Affects All elements with user interaction, except menus.
    /// In Windows, there are restrictions when using this callback.
    /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
    /// function calls that display or activate a window.
    /// This causes the thread to yield control and can cause the application to
    /// stop responding to messages.
    /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
    pub const OnKillFocusFn = fn (self: *Self) anyerror!void;

    ///
    /// DBLCLICK_CB: Action generated when the user double click an item.
    /// int function (Ihandle *ih, int item, char *text); [in
    /// C]ih:dblclick_cb(item: number, text: string) -> (ret: number) [in Lua]
    pub const OnDblClickFn = fn (self: *Self, arg0: i32, arg1: [:0]const u8) anyerror!void;

    pub const OnDragDataFn = fn (self: *Self, arg0: [:0]const u8, arg1: ?*anyopaque, arg2: i32) anyerror!void;

    pub const OnDragDataSizeFn = fn (self: *Self, arg0: [:0]const u8) anyerror!void;

    ///
    /// DROPFILES_CB DROPFILES_CB Action called when a file is "dropped" into the control.
    /// When several files are dropped at once, the callback is called several
    /// times, once for each file.
    /// If defined after the element is mapped then the attribute DROPFILESTARGET
    /// must be set to YES.
    /// [Windows and GTK Only] (GTK 2.6) Callback int function(Ihandle *ih, const
    /// char* filename, int num, int x, int y); [in C] ih:dropfiles_cb(filename:
    /// string; num, x, y: number) -> (ret: number) [in Lua] ih: identifier of the
    /// element that activated the event.
    /// filename: Name of the dropped file.
    /// num: Number index of the dropped file.
    /// If several files are dropped, num is the index of the dropped file starting
    /// from "total-1" to "0".
    /// x: X coordinate of the point where the user released the mouse button.
    /// y: Y coordinate of the point where the user released the mouse button.
    /// Returns: If IUP_IGNORE is returned the callback will NOT be called for the
    /// next dropped files, and the processing of dropped files will be interrupted.
    /// Affects IupDialog, IupCanvas, IupGLCanvas, IupText, IupList
    pub const OnDropFilesFn = fn (self: *Self, arg0: [:0]const u8, arg1: i32, arg2: i32, arg3: i32) anyerror!void;

    ///
    /// RESIZE_CB RESIZE_CB Action generated when the canvas or dialog size is changed.
    /// Callback int function(Ihandle *ih, int width, int height); [in C]
    /// ih:resize_cb(width, height: number) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// width: the width of the internal element size in pixels not considering the
    /// decorations (client size) height: the height of the internal element size
    /// in pixels not considering the decorations (client size) Notes For the
    /// dialog, this action is also generated when the dialog is mapped, after the
    /// map and before the show.
    /// When XAUTOHIDE=Yes or YAUTOHIDE=Yes, if the canvas scrollbar is
    /// hidden/shown after changing the DX or DY attributes from inside the
    /// callback, the size of the drawing area will immediately change, so the
    /// parameters with and height will be invalid.
    /// To update the parameters consult the DRAWSIZE attribute.
    /// Also activate the drawing toolkit only after updating the DX or DY attributes.
    /// Affects IupCanvas, IupGLCanvas, IupDialog
    pub const OnResizeFn = fn (self: *Self, arg0: i32, arg1: i32) anyerror!void;

    ///
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnUnmapFn = fn (self: *Self) anyerror!void;

    ///
    /// FLAT_ACTION: Action generated when the state of an item in the list is
    /// interactively changed.
    /// int function (Ihandle *ih, char *text, int item, int state); [in
    /// C]ih:action(text: string, item, state: number) -> (ret: number) [in Lua]
    pub const OnFlatActionFn = fn (self: *Self, arg0: [:0]const u8, arg1: i32, arg2: i32) anyerror!void;

    ///
    /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
    /// This callback is called after the KILLFOCUS_CB of the element that loosed
    /// the focus.
    /// The IupGetFocus function during the callback returns the element that
    /// loosed the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that received keyboard focus.
    /// Affects All elements with user interaction, except menus.
    /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
    pub const OnGetFocusFn = fn (self: *Self) anyerror!void;

    ///
    /// BUTTON_CB BUTTON_CB Action generated when a mouse button is pressed or released.
    /// Callback int function(Ihandle* ih, int button, int pressed, int x, int y,
    /// char* status); [in C] ih:button_cb(button, pressed, x, y: number, status:
    /// string) -> (ret: number) [in Lua] ih: identifies the element that activated
    /// the event.
    /// button: identifies the activated mouse button: IUP_BUTTON1 - left mouse
    /// button (button 1); IUP_BUTTON2 - middle mouse button (button 2);
    /// IUP_BUTTON3 - right mouse button (button 3).
    /// pressed: indicates the state of the button: 0 - mouse button was released;
    /// 1 - mouse button was pressed.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of the mouse buttons and some keyboard keys at the moment
    /// the event is generated.
    /// The following macros must be used for verification: iup_isshift(status)
    /// iup_iscontrol(status) iup_isbutton1(status) iup_isbutton2(status)
    /// iup_isbutton3(status) iup_isbutton4(status) iup_isbutton5(status)
    /// iup_isdouble(status) iup_isalt(status) iup_issys(status) They return 1 if
    /// the respective key or button is pressed, and 0 otherwise.
    /// These macros are also available in Lua, returning a boolean.
    /// Returns: IUP_CLOSE will be processed.
    /// On some controls if IUP_IGNORE is returned the action is ignored (this is
    /// system dependent).
    /// Notes This callback can be used to customize a button behavior.
    /// For a standard button behavior use the ACTION callback of the IupButton.
    /// For a single click the callback is called twice, one for pressed=1 and one
    /// for pressed=0.
    /// Only after both calls the ACTION callback is called.
    /// In Windows, if a dialog is shown or popup in any situation there could be
    /// unpredictable results because the native system still has processing to be
    /// done even after the callback is called.
    /// A double click is preceded by two single clicks, one for pressed=1 and one
    /// for pressed=0, and followed by a press=0, all three without the double
    /// click flag set.
    /// In GTK, it is preceded by an additional two single clicks sequence.
    /// For example, for one double click all the following calls are made:
    /// BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) BUTTON_CB(but=1 (0), x=154, y=83 [
    /// 1 ]) BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1
    /// (0), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1 (1), x=154, y=83 [ 1
    /// D ]) BUTTON_CB(but=1 (0), x=154, y=83 [ 1 ]) Between press and release all
    /// mouse events are redirected only to this control, even if the cursor moves
    /// outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupButton, IupText, IupList, IupGLCanvas
    pub const OnButtonFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: [:0]const u8) anyerror!void;

    pub const OnFlatMotionFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: [:0]const u8) anyerror!void;

    ///
    /// VALUECHANGED_CB: Called after the selection was interactively changed.
    /// int function(Ihandle *ih); [in C]ih:valuechanged_cb() -> (ret: number) [in
    /// Lua]
    pub const OnValueChangedFn = fn (self: *Self) anyerror!void;

    ///
    /// MULTISELECT_CB: Action generated when the state of an item in the multiple
    /// selection list is interactively changed.
    /// But it is called only when the interaction is over.
    /// int function (Ihandle *ih, char *value); [in C]ih:multiselect_cb(value:
    /// string) -> (ret: number) [in Lua]
    pub const OnMultiSelectFn = fn (self: *Self, arg0: [:0]const u8) anyerror!void;

    pub const OnLDestroyFn = fn (self: *Self) anyerror!void;

    ///
    /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also ENTERWINDOW_CB
    pub const OnLeaveWindowFn = fn (self: *Self) anyerror!void;

    pub const OnPostMessageFn = fn (self: *Self, arg0: [:0]const u8, arg1: i32, arg2: f64, arg3: ?*anyopaque) anyerror!void;

    pub const DrawTextAlignment = enum {
        ACenter,
        ARight,
        ALeft,
    };

    pub const ZOrder = enum {
        Top,
        Bottom,
    };

    pub const Expand = enum {
        Yes,
        Horizontal,
        Vertical,
        HorizontalFree,
        VerticalFree,
        No,
    };

    pub const Floating = enum {
        Yes,
        Ignore,
        No,
    };

    pub const DrawStyle = enum {
        Fill,
        StrokeDash,
        StrokeDot,
        StrokeDashDot,
        StrokeDashDotdot,
        DrawStroke,
    };
    ///
    /// IMAGEPOSITION (non inheritable): Position of the image relative to the text
    /// when both are displayed.
    /// Can be: LEFT, RIGHT, TOP, BOTTOM.
    /// Default: LEFT.
    pub const ImagePosition = enum {
        Left,
        Right,
        Bottom,
        Top,
    };
    ///
    /// TEXTALIGNMENT (non inheritable): Horizontal text alignment for multiple lines.
    /// Can be: ALEFT, ARIGHT or ACENTER.
    /// Default: ALEFT.
    pub const TextAlignment = enum {
        ARight,
        ALeft,
        ACenter,
    };

    pub const Initializer = struct {
        last_error: ?anyerror = null,
        ref: *Self,

        ///
        /// Returns a pointer to IUP element or an error.
        /// Only top-level or detached elements needs to be unwraped,
        pub fn unwrap(self: Initializer) !*Self {
            if (self.last_error) |e| {
                return e;
            } else {
                return self.ref;
            }
        }

        ///
        /// Captures a reference into a external variable
        /// Allows to capture some references even using full declarative API
        pub fn capture(self: Initializer, ref: **Self) Initializer {
            ref.* = self.ref;
            return self;
        }

        pub fn setStrAttribute(self: Initializer, attributeName: [:0]const u8, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            Self.setStrAttribute(self.ref, attributeName, arg);
            return self;
        }

        pub fn setIntAttribute(self: Initializer, attributeName: [:0]const u8, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            Self.setIntAttribute(self.ref, attributeName, arg);
            return self;
        }

        pub fn setBoolAttribute(self: Initializer, attributeName: [:0]const u8, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            Self.setBoolAttribute(self.ref, attributeName, arg);
            return self;
        }

        pub fn setPtrAttribute(self: Initializer, comptime T: type, attributeName: [:0]const u8, value: ?*T) Initializer {
            if (self.last_error) |_| return self;
            Self.setPtrAttribute(self.ref, T, attributeName, value);
            return self;
        }

        pub fn setHandle(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setHandle(self.ref, arg);
            return self;
        }

        ///
        /// FGCOLOR: Text color.
        /// Default: the global attribute TXTFGCOLOR.
        pub fn setFgColor(self: Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self;
            interop.setRgb(self.ref, "FGCOLOR", .{}, rgb);
            return self;
        }

        pub fn setHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "HANDLENAME", .{}, arg);
            return self;
        }

        pub fn setTipBgColor(self: Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self;
            interop.setRgb(self.ref, "TIPBGCOLOR", .{}, rgb);
            return self;
        }

        pub fn setXMin(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "XMIN", .{}, arg);
            return self;
        }

        pub fn setTipIcon(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "TIPICON", .{}, arg);
            return self;
        }

        pub fn setSbImageBottomPress(self: Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "SB_IMAGEBOTTOMPRESS", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setSbImageBottomPressHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "SB_IMAGEBOTTOMPRESS", .{}, arg);
            return self;
        }

        ///
        /// ITEMTIPid: tip of the item at the given id.
        /// If defined will be shown instead of the TIP attribute.
        /// (since 3.29)
        pub fn setItemTip(self: Initializer, index: i32, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "ITEMTIP", .{index}, arg);
            return self;
        }

        pub fn setMaxSize(self: Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "MAXSIZE", .{}, value);
            return self;
        }

        pub fn setDrawTextWrap(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DRAWTEXTWRAP", .{}, arg);
            return self;
        }

        ///
        /// FOCUSFEEDBACK (non inheritable): draw the focus feedback.
        /// Can be Yes or No.
        /// Default: Yes.
        pub fn setFocusFeedback(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "FOCUSFEEDBACK", .{}, arg);
            return self;
        }

        pub fn setPosition(self: Initializer, x: i32, y: i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
            interop.setStrAttribute(self.ref, "POSITION", .{}, value);
            return self;
        }

        ///
        /// DROPFILESTARGET (non inheritable): Enable or disable the drop of files.
        /// Default: NO, but if DROPFILES_CB is defined when the element is mapped then
        /// it will be automatically enabled.
        pub fn setDropFilesTarget(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DROPFILESTARGET", .{}, arg);
            return self;
        }

        pub fn setDrawTextAlignment(self: Initializer, arg: ?DrawTextAlignment) Initializer {
            if (self.last_error) |_| return self;
            if (arg) |value| switch (value) {
                .ACenter => interop.setStrAttribute(self.ref, "DRAWTEXTALIGNMENT", .{}, "ACENTER"),
                .ARight => interop.setStrAttribute(self.ref, "DRAWTEXTALIGNMENT", .{}, "ARIGHT"),
                .ALeft => interop.setStrAttribute(self.ref, "DRAWTEXTALIGNMENT", .{}, "ALEFT"),
            } else {
                interop.clearAttribute(self.ref, "DRAWTEXTALIGNMENT", .{});
            }
            return self;
        }

        pub fn setTip(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "TIP", .{}, arg);
            return self;
        }

        pub fn setDrawTextLayoutCenter(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DRAWTEXTLAYOUTCENTER", .{}, arg);
            return self;
        }

        pub fn setCanFocus(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "CANFOCUS", .{}, arg);
            return self;
        }

        pub fn setSbImageBottomHighlight(self: Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "SB_IMAGEBOTTOMHIGHLIGHT", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setSbImageBottomHighlightHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "SB_IMAGEBOTTOMHIGHLIGHT", .{}, arg);
            return self;
        }

        pub fn setDragSourceMove(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DRAGSOURCEMOVE", .{}, arg);
            return self;
        }

        ///
        /// PSCOLOR: background color of a selected item.
        /// If not defined BACKCOLORid will be used.
        /// (since 3.30)
        pub fn setPsColor(self: Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self;
            interop.setRgb(self.ref, "PSCOLOR", .{}, rgb);
            return self;
        }

        pub fn setVisible(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "VISIBLE", .{}, arg);
            return self;
        }

        pub fn setImage(self: Initializer, index: i32, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "IMAGE", .{index}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setImageHandleName(self: Initializer, index: i32, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "IMAGE", .{index}, arg);
            return self;
        }

        pub fn setLineX(self: Initializer, arg: f64) Initializer {
            if (self.last_error) |_| return self;
            interop.setDoubleAttribute(self.ref, "LINEX", .{}, arg);
            return self;
        }

        pub fn setCursor(self: Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "CURSOR", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setCursorHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "CURSOR", .{}, arg);
            return self;
        }

        pub fn setLineY(self: Initializer, arg: f64) Initializer {
            if (self.last_error) |_| return self;
            interop.setDoubleAttribute(self.ref, "LINEY", .{}, arg);
            return self;
        }

        pub fn zOrder(self: Initializer, arg: ?ZOrder) Initializer {
            if (self.last_error) |_| return self;
            if (arg) |value| switch (value) {
                .Top => interop.setStrAttribute(self.ref, "ZORDER", .{}, "TOP"),
                .Bottom => interop.setStrAttribute(self.ref, "ZORDER", .{}, "BOTTOM"),
            } else {
                interop.clearAttribute(self.ref, "ZORDER", .{});
            }
            return self;
        }

        pub fn setDrawLineWidth(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "DRAWLINEWIDTH", .{}, arg);
            return self;
        }

        pub fn setDragDrop(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DRAGDROP", .{}, arg);
            return self;
        }

        pub fn setTheme(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "THEME", .{}, arg);
            return self;
        }

        pub fn setSbImageLeftPress(self: Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "SB_IMAGELEFTPRESS", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setSbImageLeftPressHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "SB_IMAGELEFTPRESS", .{}, arg);
            return self;
        }

        pub fn setSbImageRightHighlight(self: Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "SB_IMAGERIGHTHIGHLIGHT", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setSbImageRightHighlightHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "SB_IMAGERIGHTHIGHLIGHT", .{}, arg);
            return self;
        }

        pub fn setExpand(self: Initializer, arg: ?Expand) Initializer {
            if (self.last_error) |_| return self;
            if (arg) |value| switch (value) {
                .Yes => interop.setStrAttribute(self.ref, "EXPAND", .{}, "YES"),
                .Horizontal => interop.setStrAttribute(self.ref, "EXPAND", .{}, "HORIZONTAL"),
                .Vertical => interop.setStrAttribute(self.ref, "EXPAND", .{}, "VERTICAL"),
                .HorizontalFree => interop.setStrAttribute(self.ref, "EXPAND", .{}, "HORIZONTALFREE"),
                .VerticalFree => interop.setStrAttribute(self.ref, "EXPAND", .{}, "VERTICALFREE"),
                .No => interop.setStrAttribute(self.ref, "EXPAND", .{}, "NO"),
            } else {
                interop.clearAttribute(self.ref, "EXPAND", .{});
            }
            return self;
        }

        ///
        /// VISIBLELINES: Defines the number of visible lines for the Natural Size,
        /// this means that will act also as minimum number of visible lines.
        pub fn setVisibleLines(self: Initializer, arg: ?i32) Initializer {
            if (self.last_error) |_| return self;
            if (arg == null) {
                interop.setStrAttribute(self.ref, "VISIBLELINES", .{}, null);
            } else {
                interop.setIntAttribute(self.ref, "VISIBLELINES", .{}, arg.?);
            }
            return self;
        }

        pub fn setDrawFont(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "DRAWFONT", .{}, arg);
            return self;
        }

        pub fn setSbImageTop(self: Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "SB_IMAGETOP", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setSbImageTopHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "SB_IMAGETOP", .{}, arg);
            return self;
        }

        ///
        /// SIZE: Size of the list.
        /// The Natural Size is defined by the number of elements in the list and the
        /// with of the largest item, the default has room for 5 characters in 1 item.
        /// The Natural Size ignores the list contents if VISIBLECOLUMNS or
        /// VISIBLELINES attributes are defined.
        pub fn setSize(self: Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "SIZE", .{}, value);
            return self;
        }

        ///
        /// PADDING: internal margin of each item.
        /// Works just like the MARGIN attribute of the IupHbox and IupVbox containers,
        /// but uses a different name to avoid inheritance problems.
        /// Alignment does not includes the padding area.
        /// Default value: "2x2".
        pub fn setPadding(self: Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "PADDING", .{}, value);
            return self;
        }

        ///
        /// VALUESTRING (non inheritable): changes or retrieves the value attribute
        /// using a string of an item.
        /// Works only when MULTIPLE=NO.
        /// When set it will search for the first item with the same string.
        pub fn setValueString(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "VALUESTRING", .{}, arg);
            return self;
        }

        pub fn setPosX(self: Initializer, arg: f64) Initializer {
            if (self.last_error) |_| return self;
            interop.setDoubleAttribute(self.ref, "POSX", .{}, arg);
            return self;
        }

        pub fn setPosY(self: Initializer, arg: f64) Initializer {
            if (self.last_error) |_| return self;
            interop.setDoubleAttribute(self.ref, "POSY", .{}, arg);
            return self;
        }

        ///
        /// HLCOLORALPHA: the transparency used to draw the selection.
        /// Default: 128.
        /// If set to 0 the selection box is not drawn.
        pub fn setHlColorAlpha(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "HLCOLORALPHA", .{}, arg);
            return self;
        }

        pub fn setTipMarkup(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "TIPMARKUP", .{}, arg);
            return self;
        }

        pub fn setYMin(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "YMIN", .{}, arg);
            return self;
        }

        ///
        /// TEXTELLIPSIS (non inheritable): If the text is larger that its box, an
        /// ellipsis ("...") will be placed near the last visible part of the text and
        /// replace the invisible part.
        /// It will be ignored when TEXTWRAP=Yes.
        pub fn setTextEllipsis(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "TEXTELLIPSIS", .{}, arg);
            return self;
        }

        ///
        /// DRAGDROPLIST (non inheritable): prepare the Drag & Drop callbacks to
        /// support drag and drop of items between lists (IupList or IupFlatList), in
        /// the same IUP application.
        /// Drag & Drop attributes still need to be set in order to activate the drag &
        /// drop support, so the application can control if this list will be source
        /// and/or target.
        /// Default: NO.
        pub fn setDragDropList(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DRAGDROPLIST", .{}, arg);
            return self;
        }

        ///
        /// REMOVEITEM (write-only): removes the given value.
        /// value starts at 1.
        /// If value is NULL or "ALL" removes all the items.
        /// Different from IupList, can be set before map.
        pub fn removeItem(self: Initializer, arg: ?i32) Initializer {
            if (self.last_error) |_| return self;
            if (arg == null) {
                interop.setStrAttribute(self.ref, "REMOVEITEM", .{}, null);
            } else {
                interop.setIntAttribute(self.ref, "REMOVEITEM", .{}, arg.?);
            }
            return self;
        }

        pub fn setDrawMakeInactive(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DRAWMAKEINACTIVE", .{}, arg);
            return self;
        }

        ///
        /// TOPITEM (write-only): position the given item at the top of the list or
        /// near to make it visible.
        pub fn topItem(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "TOPITEM", .{}, arg);
            return self;
        }

        pub fn setFontSize(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "FONTSIZE", .{}, arg);
            return self;
        }

        pub fn setDropTypes(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "DROPTYPES", .{}, arg);
            return self;
        }

        pub fn setUserSize(self: Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "USERSIZE", .{}, value);
            return self;
        }

        pub fn setTipDelay(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "TIPDELAY", .{}, arg);
            return self;
        }

        pub fn setSbImageLeftInactive(self: Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "SB_IMAGELEFTINACTIVE", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setSbImageLeftInactiveHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "SB_IMAGELEFTINACTIVE", .{}, arg);
            return self;
        }

        ///
        /// SCROLLBAR (read-only): is always "NO".
        /// So the IupCanvas native scrollbars are hidden.
        /// See the FLATSCROLLBAR attribute bellow.
        /// YAUTOHIDE and XAUTOHIDE will be always Yes.
        pub fn setScrollBar(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "SCROLLBAR", .{}, arg);
            return self;
        }

        pub fn setSbImageRightInactive(self: Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "SB_IMAGERIGHTINACTIVE", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setSbImageRightInactiveHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "SB_IMAGERIGHTINACTIVE", .{}, arg);
            return self;
        }

        ///
        /// SHOWDRAGDROP (creation only) (non inheritable): enables the internal drag
        /// and drop of items in the same list, and enables the DRAGDROP_CB callback.
        /// Default: "NO".
        /// Works only if MULTIPLE=NO.
        /// Drag & Drop attributes are NOT used.
        pub fn setShowDragDrop(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "SHOWDRAGDROP", .{}, arg);
            return self;
        }

        ///
        /// PROPAGATEFOCUS (non inheritable): enables the focus callback forwarding to
        /// the next native parent with FOCUS_CB defined.
        /// Default: NO.
        pub fn setPropagateFocus(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "PROPAGATEFOCUS", .{}, arg);
            return self;
        }

        pub fn setXMax(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "XMAX", .{}, arg);
            return self;
        }

        ///
        /// BGCOLOR: Background color of the text.
        /// Default: the global attribute TXTBGCOLOR.
        pub fn setBgColor(self: Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self;
            interop.setRgb(self.ref, "BGCOLOR", .{}, rgb);
            return self;
        }

        ///
        /// ITEMFONTSIZEid: text font size.
        /// When changed will actually set ITEMFONTid.
        pub fn setItemFontSize(self: Initializer, index: i32, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "ITEMFONTSIZE", .{index}, arg);
            return self;
        }

        pub fn setDropTarget(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DROPTARGET", .{}, arg);
            return self;
        }

        pub fn setDX(self: Initializer, arg: f64) Initializer {
            if (self.last_error) |_| return self;
            interop.setDoubleAttribute(self.ref, "DX", .{}, arg);
            return self;
        }

        pub fn setDY(self: Initializer, arg: f64) Initializer {
            if (self.last_error) |_| return self;
            interop.setDoubleAttribute(self.ref, "DY", .{}, arg);
            return self;
        }

        pub fn setDrawTextEllipsis(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DRAWTEXTELLIPSIS", .{}, arg);
            return self;
        }

        pub fn setDragSource(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DRAGSOURCE", .{}, arg);
            return self;
        }

        pub fn setDrawTextClip(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DRAWTEXTCLIP", .{}, arg);
            return self;
        }

        pub fn setFloating(self: Initializer, arg: ?Floating) Initializer {
            if (self.last_error) |_| return self;
            if (arg) |value| switch (value) {
                .Yes => interop.setStrAttribute(self.ref, "FLOATING", .{}, "YES"),
                .Ignore => interop.setStrAttribute(self.ref, "FLOATING", .{}, "IGNORE"),
                .No => interop.setStrAttribute(self.ref, "FLOATING", .{}, "NO"),
            } else {
                interop.clearAttribute(self.ref, "FLOATING", .{});
            }
            return self;
        }

        pub fn setNormalizerGroup(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "NORMALIZERGROUP", .{}, arg);
            return self;
        }

        ///
        /// SPACING: internal space between each item.
        /// Different from IupList, it does not affects the internal margin.
        /// Not drawn with any item background color.
        /// Default: 0
        pub fn setSpacing(self: Initializer, arg: ?i32) Initializer {
            if (self.last_error) |_| return self;
            if (arg == null) {
                interop.setStrAttribute(self.ref, "SPACING", .{}, null);
            } else {
                interop.setIntAttribute(self.ref, "SPACING", .{}, arg.?);
            }
            return self;
        }

        pub fn setSbImageRightPress(self: Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "SB_IMAGERIGHTPRESS", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setSbImageRightPressHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "SB_IMAGERIGHTPRESS", .{}, arg);
            return self;
        }

        pub fn insertItem(self: Initializer, index: i32, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "INSERTITEM", .{index}, arg);
            return self;
        }

        pub fn setRasterSize(self: Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "RASTERSIZE", .{}, value);
            return self;
        }

        ///
        /// TEXTPSCOLOR: foreground color of a selected item.
        /// If not defined FORECOLORid will be used.
        /// (since 3.30)
        pub fn setTextPsColor(self: Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self;
            interop.setRgb(self.ref, "TEXTPSCOLOR", .{}, rgb);
            return self;
        }

        ///
        /// BORDERCOLOR: color used for the internal border.
        /// Default: "50 150 255".
        /// This is for the internal border.
        pub fn setBorderColor(self: Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self;
            interop.setRgb(self.ref, "BORDERCOLOR", .{}, rgb);
            return self;
        }

        pub fn setTipFgColor(self: Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self;
            interop.setRgb(self.ref, "TIPFGCOLOR", .{}, rgb);
            return self;
        }

        pub fn setSbImageLeft(self: Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "SB_IMAGELEFT", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setSbImageLeftHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "SB_IMAGELEFT", .{}, arg);
            return self;
        }

        ///
        /// CSPACING: same as SPACING but using the units of the vertical part of the
        /// SIZE attribute.
        /// It will actually set the SPACING attribute.
        /// (since 3.29)
        pub fn setCSpacing(self: Initializer, arg: ?i32) Initializer {
            if (self.last_error) |_| return self;
            if (arg == null) {
                interop.setStrAttribute(self.ref, "CSPACING", .{}, null);
            } else {
                interop.setIntAttribute(self.ref, "CSPACING", .{}, arg.?);
            }
            return self;
        }

        ///
        /// HLCOLOR: color of a filled box drawn over the selected item.
        /// Default: "TXTHLCOLOR".
        pub fn setHlColor(self: Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self;
            interop.setRgb(self.ref, "HLCOLOR", .{}, rgb);
            return self;
        }

        pub fn setFontFace(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "FONTFACE", .{}, arg);
            return self;
        }

        pub fn setDrawColor(self: Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self;
            interop.setRgb(self.ref, "DRAWCOLOR", .{}, rgb);
            return self;
        }

        pub fn setDrawTextOrientation(self: Initializer, arg: f64) Initializer {
            if (self.last_error) |_| return self;
            interop.setDoubleAttribute(self.ref, "DRAWTEXTORIENTATION", .{}, arg);
            return self;
        }

        pub fn setDrawBgColor(self: Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self;
            interop.setRgb(self.ref, "DRAWBGCOLOR", .{}, rgb);
            return self;
        }

        ///
        /// VISIBLECOLUMNS: Defines the number of visible columns for the Natural Size,
        /// this means that will act also as minimum number of visible columns.
        /// It uses a wider character size then the one used for the SIZE attribute so
        /// strings will fit better without the need of extra columns.
        /// Set this attribute to speed Natural Size computation for very large lists.
        pub fn setVisibleColumns(self: Initializer, arg: ?i32) Initializer {
            if (self.last_error) |_| return self;
            if (arg == null) {
                interop.setStrAttribute(self.ref, "VISIBLECOLUMNS", .{}, null);
            } else {
                interop.setIntAttribute(self.ref, "VISIBLECOLUMNS", .{}, arg.?);
            }
            return self;
        }

        pub fn setSbImageTopHighlight(self: Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "SB_IMAGETOPHIGHLIGHT", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setSbImageTopHighlightHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "SB_IMAGETOPHIGHLIGHT", .{}, arg);
            return self;
        }

        ///
        /// APPENDITEM (write-only): inserts an item after the last item.
        /// Ignored if set before map.
        pub fn appendItem(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "APPENDITEM", .{}, arg);
            return self;
        }

        pub fn setName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "NAME", .{}, arg);
            return self;
        }

        pub fn setBackingStore(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "BACKINGSTORE", .{}, arg);
            return self;
        }

        pub fn setDrawStyle(self: Initializer, arg: ?DrawStyle) Initializer {
            if (self.last_error) |_| return self;
            if (arg) |value| switch (value) {
                .Fill => interop.setStrAttribute(self.ref, "DRAWSTYLE", .{}, "FILL"),
                .StrokeDash => interop.setStrAttribute(self.ref, "DRAWSTYLE", .{}, "STROKE_DASH"),
                .StrokeDot => interop.setStrAttribute(self.ref, "DRAWSTYLE", .{}, "STROKE_DOT"),
                .StrokeDashDot => interop.setStrAttribute(self.ref, "DRAWSTYLE", .{}, "STROKE_DASH_DOT"),
                .StrokeDashDotdot => interop.setStrAttribute(self.ref, "DRAWSTYLE", .{}, "STROKE_DASH_DOT_DOT"),
                .DrawStroke => interop.setStrAttribute(self.ref, "DRAWSTYLE", .{}, "DRAW_STROKE"),
            } else {
                interop.clearAttribute(self.ref, "DRAWSTYLE", .{});
            }
            return self;
        }

        ///
        /// MULTIPLE (creation only): Allows selecting several items simultaneously
        /// (multiple list).
        /// Default: "NO".
        pub fn setMultiple(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "MULTIPLE", .{}, arg);
            return self;
        }

        ///
        /// VALUE (non inheritable): Depends on the selection mode: MULTIPLE=YES:
        /// Sequence of '+' and '-' symbols indicating the state of each item.
        /// When setting this value, the user must provide the same amount of '+' and
        /// '-' symbols as the amount of items in the list.
        /// It can use ' ' (space) or another character so the current selection on
        /// that item will remain the same (since 3.28).
        /// MULTIPLE=NO: Integer number representing the selected item in the list
        /// (begins at 1).
        /// It returns NULL if there is no selected item.
        /// For both cases, when setting NULL all items are deselected.
        /// The non changed items marked with 'x' are simulated internally by IUP in
        /// all systems.
        /// If you add or remove items to/from the list and you count on the 'x'
        /// values, then after adding/removing items set the VALUE attribute to ensure
        /// proper 'x' values.
        pub fn setValue(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "VALUE", .{}, arg);
            return self;
        }

        ///
        /// BACKIMAGEZOOM (non inheritable): if set the back image will be zoomed to
        /// occupy the full background.
        /// Aspect ratio is NOT preserved.
        /// Can be Yes or No.
        /// Default: No.
        pub fn setBackImageZoom(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "BACKIMAGEZOOM", .{}, arg);
            return self;
        }

        pub fn setSbImageLeftHighlight(self: Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "SB_IMAGELEFTHIGHLIGHT", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setSbImageLeftHighlightHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "SB_IMAGELEFTHIGHLIGHT", .{}, arg);
            return self;
        }

        ///
        /// CPADDING: same as PADDING but using the units of the SIZE attribute.
        /// It will actually set the PADDING attribute.
        /// (since 3.29)
        pub fn setCPadding(self: Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "CPADDING", .{}, value);
            return self;
        }

        ///
        /// FITTOBACKIMAGE (non inheritable): enable the natural size to be computed
        /// from the BACKIMAGE.
        /// If BACKIMAGE is not defined will be ignored.
        /// Can be Yes or No.
        /// Default: No.
        pub fn setFitToBackImage(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "FITTOBACKIMAGE", .{}, arg);
            return self;
        }

        pub fn setActive(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "ACTIVE", .{}, arg);
            return self;
        }

        pub fn setTipVisible(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "TIPVISIBLE", .{}, arg);
            return self;
        }

        ///
        /// ICONSPACING (non inheritable): spacing between the image and the text.
        /// Default: "2".
        pub fn setIconSpacing(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "ICONSPACING", .{}, arg);
            return self;
        }

        pub fn setYMax(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "YMAX", .{}, arg);
            return self;
        }

        ///
        /// BACKIMAGE (non inheritable): image name to be used as background.
        /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
        /// See also IupImage.
        pub fn setBackImage(self: Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "BACKIMAGE", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setBackImageHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "BACKIMAGE", .{}, arg);
            return self;
        }

        pub fn setSbImageBottom(self: Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "SB_IMAGEBOTTOM", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setSbImageBottomHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "SB_IMAGEBOTTOM", .{}, arg);
            return self;
        }

        pub fn setSbImageBottomInactive(self: Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "SB_IMAGEBOTTOMINACTIVE", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setSbImageBottomInactiveHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "SB_IMAGEBOTTOMINACTIVE", .{}, arg);
            return self;
        }

        pub fn setExpandWeight(self: Initializer, arg: f64) Initializer {
            if (self.last_error) |_| return self;
            interop.setDoubleAttribute(self.ref, "EXPANDWEIGHT", .{}, arg);
            return self;
        }

        pub fn setMinSize(self: Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "MINSIZE", .{}, value);
            return self;
        }

        pub fn setArrowImages(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "ARROWIMAGES", .{}, arg);
            return self;
        }

        pub fn setNTheme(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "NTHEME", .{}, arg);
            return self;
        }

        pub fn setItems(self: Initializer, index: i32, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "IDVALUE", .{index}, arg);
            return self;
        }

        ///
        /// BORDER (creation only): the default value is "NO".
        /// This is the IupCanvas border.
        /// It is displayed around the scrollbars.
        pub fn setBorder(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "BORDER", .{}, arg);
            return self;
        }

        ///
        /// IMAGEPOSITION (non inheritable): Position of the image relative to the text
        /// when both are displayed.
        /// Can be: LEFT, RIGHT, TOP, BOTTOM.
        /// Default: LEFT.
        pub fn setImagePosition(self: Initializer, arg: ?ImagePosition) Initializer {
            if (self.last_error) |_| return self;
            if (arg) |value| switch (value) {
                .Left => interop.setStrAttribute(self.ref, "IMAGEPOSITION", .{}, "LEFT"),
                .Right => interop.setStrAttribute(self.ref, "IMAGEPOSITION", .{}, "RIGHT"),
                .Bottom => interop.setStrAttribute(self.ref, "IMAGEPOSITION", .{}, "BOTTOM"),
                .Top => interop.setStrAttribute(self.ref, "IMAGEPOSITION", .{}, "TOP"),
            } else {
                interop.clearAttribute(self.ref, "IMAGEPOSITION", .{});
            }
            return self;
        }

        pub fn setDragTypes(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "DRAGTYPES", .{}, arg);
            return self;
        }

        pub fn setWheelDropFocus(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "WHEELDROPFOCUS", .{}, arg);
            return self;
        }

        ///
        /// BORDERWIDTH: line width used for the internal border.
        /// Default: "0".
        /// The internal borders are hidden by simply setting this value to 0.
        /// It is drawn inside the canvas, so inside the scrollbars.
        pub fn setBorderWidth(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "BORDERWIDTH", .{}, arg);
            return self;
        }

        pub fn setFontStyle(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "FONTSTYLE", .{}, arg);
            return self;
        }

        ///
        /// TEXTALIGNMENT (non inheritable): Horizontal text alignment for multiple lines.
        /// Can be: ALEFT, ARIGHT or ACENTER.
        /// Default: ALEFT.
        pub fn setTextAlignment(self: Initializer, arg: ?TextAlignment) Initializer {
            if (self.last_error) |_| return self;
            if (arg) |value| switch (value) {
                .ARight => interop.setStrAttribute(self.ref, "TEXTALIGNMENT", .{}, "ARIGHT"),
                .ALeft => interop.setStrAttribute(self.ref, "TEXTALIGNMENT", .{}, "ALEFT"),
                .ACenter => interop.setStrAttribute(self.ref, "TEXTALIGNMENT", .{}, "ACENTER"),
            } else {
                interop.clearAttribute(self.ref, "TEXTALIGNMENT", .{});
            }
            return self;
        }

        pub fn setTouch(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "TOUCH", .{}, arg);
            return self;
        }

        pub fn setSbImageTopInactive(self: Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "SB_IMAGETOPINACTIVE", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setSbImageTopInactiveHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "SB_IMAGETOPINACTIVE", .{}, arg);
            return self;
        }

        pub fn setSbImageRight(self: Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "SB_IMAGERIGHT", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setSbImageRightHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "SB_IMAGERIGHT", .{}, arg);
            return self;
        }

        ///
        /// TEXTWRAP (non inheritable): For single line texts if the text is larger
        /// than its box the line will be automatically broken in multiple lines.
        /// Notice that this is done internally by the system, the element natural size
        /// will still use only a single line.
        /// For the remaining lines to be visible the element should use
        /// EXPAND=VERTICAL or set a SIZE/RASTERSIZE with enough height for the wrapped lines.
        pub fn setTextWrap(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "TEXTWRAP", .{}, arg);
            return self;
        }

        pub fn setSbImageTopPress(self: Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "SB_IMAGETOPPRESS", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setSbImageTopPressHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "SB_IMAGETOPPRESS", .{}, arg);
            return self;
        }

        pub fn setFont(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "FONT", .{}, arg);
            return self;
        }

        pub fn setMdiClient(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "MDICLIENT", .{}, arg);
            return self;
        }

        pub fn setMdiMenu(self: Initializer, arg: *iup.Menu) Initializer {
            if (self.last_error) |_| return self;
            interop.setHandleAttribute(self.ref, "MDIMENU", .{}, arg);
            return self;
        }

        pub fn setMdiMenuHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "MDIMENU", .{}, arg);
            return self;
        }

        ///
        /// TABIMAGEn (non inheritable): image name to be used in the respective tab.
        /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
        /// n starts at 0.
        /// See also IupImage.
        /// In Motif, the image is shown only if TABTITLEn is NULL.
        /// In Windows and Motif set the BGCOLOR attribute before setting the image.
        /// When set after map will update the TABIMAGE attribute on the respective
        /// child (since 3.10).
        /// (since 3.0).
        /// TABIMAGE (non inheritable) (at children only): Same as TABIMAGEn but set in
        /// each child.
        /// Works only if set before the child is added to the tabs.
        pub fn setTabImage(self: Initializer, index: i32, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "TABIMAGE", .{index}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setTabImageHandleName(self: Initializer, index: i32, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "TABIMAGE", .{index}, arg);
            return self;
        }

        ///
        /// TABTITLEn (non inheritable): Contains the text to be shown in the
        /// respective tab title.
        /// n starts at 0.
        /// If this value is NULL, it will remain empty.
        /// The "&" character can be used to define a mnemonic, the next character will
        /// be used as key.
        /// Use "&&" to show the "&" character instead on defining a mnemonic.
        /// The button can be activated from any control in the dialog using the
        /// "Alt+key" combination.
        /// (mnemonic support since 3.3).
        /// When set after map will update the TABTITLE attribute on the respective
        /// child (since 3.10).
        /// (since 3.0).
        /// TABTITLE (non inheritable) (at children only): Same as TABTITLEn but set in
        /// each child.
        /// Works only if set before the child is added to the tabs.
        pub fn setTabTitle(self: Initializer, index: i32, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "TABTITLE", .{index}, arg);
            return self;
        }

        ///
        /// SCROLL_CB SCROLL_CB Called when some manipulation is made to the scrollbar.
        /// The canvas is automatically redrawn only if this callback is NOT defined.
        /// (GTK 2.8) Also the POSX and POSY values will not be correctly updated for
        /// older GTK versions.
        /// In Ubuntu, when liboverlay-scrollbar is enabled (the new tiny auto-hide
        /// scrollbar) only the IUP_SBPOSV and IUP_SBPOSH codes are used.
        /// Callback int function(Ihandle *ih, int op, float posx, float posy); [in C]
        /// ih:scroll_cb(op, posx, posy: number) -> (ret: number) [in Lua] ih:
        /// identifier of the element that activated the event.
        /// op: indicates the operation performed on the scrollbar.
        /// If the manipulation was made on the vertical scrollbar, it can have the
        /// following values: IUP_SBUP - line up IUP_SBDN - line down IUP_SBPGUP - page
        /// up IUP_SBPGDN - page down IUP_SBPOSV - vertical positioning IUP_SBDRAGV -
        /// vertical drag If it was on the horizontal scrollbar, the following values
        /// are valid: IUP_SBLEFT - column left IUP_SBRIGHT - column right IUP_SBPGLEFT
        /// - page left IUP_SBPGRIGHT - page right IUP_SBPOSH - horizontal positioning
        /// IUP_SBDRAGH - horizontal drag posx, posy: the same as the ACTION canvas
        /// callback (corresponding to the values of attributes POSX and POSY).
        /// Notes IUP_SBDRAGH and IUP_SBDRAGV are not supported in GTK.
        /// During drag IUP_SBPOSH and IUP_SBPOSV are used.
        /// In Windows, after a drag when mouse is released IUP_SBPOSH or IUP_SBPOSV
        /// are called.
        /// Affects IupCanvas, IupGLCanvas, SCROLLBAR
        pub fn setScrollCallback(self: Initializer, callback: ?*const OnScrollFn) Initializer {
            const Handler = CallbackHandler(Self, OnScrollFn, "SCROLL_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setFocusCallback(self: Initializer, callback: ?*const OnFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnFocusFn, "FOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// WOM_CB WOM_CB Action generated when an audio device receives an event.
        /// [Windows Only] Callback int function(Ihandle *ih, int state); [in C]
        /// ih:wom_cb(state: number) -> (ret: number) [in Lua] ih: identifies the
        /// element that activated the event.
        /// state: can be opening=1, done=0, or closing=-1.
        /// Notes This callback is used to syncronize video playback with audio.
        /// It is sent when the audio device: Message Description opening is opened by
        /// using the waveOutOpen function.
        /// done is finished with a data block sent by using the waveOutWrite function.
        /// closing is closed by using the waveOutClose function.
        /// You must use the HWND attribute when calling waveOutOpen in the dwCallback
        /// parameter and set fdwOpen to CALLBACK_WINDOW.
        /// Affects IupDialog, IupCanvas, IupGLCanvas
        pub fn setWomCallback(self: Initializer, callback: ?*const OnWomFn) Initializer {
            const Handler = CallbackHandler(Self, OnWomFn, "WOM_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// K_ANY K_ANY Action generated when a keyboard event occurs.
        /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
        /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
        /// c: identifier of typed key.
        /// Please refer to the Keyboard Codes table for a list of possible values.
        /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
        /// the control and not propagated.
        /// If returns IUP_CONTINUE, the key will be processed and the event will be
        /// propagated to the parent of the element receiving it, this is the default behavior.
        /// If returns IUP_DEFAULT the key is processed but it is not propagated.
        /// IUP_CLOSE will be processed.
        /// Notes Keyboard callbacks depend on the keyboard usage of the control with
        /// the focus.
        /// So if you return IUP_IGNORE the control will usually not process the key.
        /// But be aware that sometimes the control process the key in another event so
        /// even returning IUP_IGNORE the key can get processed.
        /// Although it will not be propagated.
        /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
        /// the IUP_CONTINUE return value to work while the control is in focus.
        /// If the callback does not exists it is automatically propagated to the
        /// parent of the element.
        /// K_* callbacks All defined keys are also callbacks of any element, called
        /// when the respective key is activated.
        /// For example: "K_cC" is also a callback activated when the user press
        /// Ctrl+C, when the focus is at the element or at a children with focus.
        /// This is the way an application can create shortcut keys, also called hot keys.
        /// These callbacks are not available in IupLua.
        /// Affects All elements with keyboard interaction.
        pub fn setKAnyCallback(self: Initializer, callback: ?*const OnKAnyFn) Initializer {
            const Handler = CallbackHandler(Self, OnKAnyFn, "K_ANY");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setFlatFocusCallback(self: Initializer, callback: ?*const OnFlatFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnFlatFocusFn, "FLAT_FOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
        /// In Motif is also activated by the Help button in some workstations keyboard.
        /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Returns: IUP_CLOSE will be processed.
        /// Affects All elements with user interaction.
        pub fn setHelpCallback(self: Initializer, callback: ?*const OnHelpFn) Initializer {
            const Handler = CallbackHandler(Self, OnHelpFn, "HELP_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setDropMotionCallback(self: Initializer, callback: ?*const OnDropMotionFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropMotionFn, "DROPMOTION_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setFlatLeaveWindowCallback(self: Initializer, callback: ?*const OnFlatLeaveWindowFn) Initializer {
            const Handler = CallbackHandler(Self, OnFlatLeaveWindowFn, "FLAT_LEAVEWINDOW_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// KEYPRESS_CB KEYPRESS_CB Action generated when a key is pressed or released.
        /// If the key is pressed and held several calls will occur.
        /// It is called after the callback K_ANY is processed.
        /// Callback int function(Ihandle *ih, int c, int press); [in C]
        /// ih:keypress_cb(c, press: number) -> (ret: number) [in Lua] ih: identifier
        /// of the element that activated the event.
        /// c: identifier of typed key.
        /// Please refer to the Keyboard Codes table for a list of possible values.
        /// press: 1 is the user pressed the key or 0 otherwise.
        /// Returns: If IUP_IGNORE is returned the key is ignored by the system.
        /// IUP_CLOSE will be processed.
        /// Affects IupCanvas
        pub fn setKeyPressCallback(self: Initializer, callback: ?*const OnKeyPressFn) Initializer {
            const Handler = CallbackHandler(Self, OnKeyPressFn, "KEYPRESS_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setDragEndCallback(self: Initializer, callback: ?*const OnDragEndFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragEndFn, "DRAGEND_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setDragBeginCallback(self: Initializer, callback: ?*const OnDragBeginFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragBeginFn, "DRAGBEGIN_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// ACTION ACTION Action generated when the element is activated.
        /// Affects each element differently.
        /// Callback int function(Ihandle *ih); [in C] ih:action() -> (ret: number) [in
        /// Lua] ih: identifier of the element that activated the event.
        /// In some elements, this callback may receive more parameters, apart from ih.
        /// Please refer to each element's documentation.
        /// Affects IupButton, IupItem, IupList, IupText, IupCanvas, IupMultiline,
        /// IupToggle
        pub fn setActionCallback(self: Initializer, callback: ?*const OnActionFn) Initializer {
            const Handler = CallbackHandler(Self, OnActionFn, "ACTION");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// MOTION_CB MOTION_CB Action generated when the mouse moves.
        /// Callback int function(Ihandle *ih, int x, int y, char *status); [in C]
        /// ih:motion_cb(x, y: number, status: string) -> (ret: number) [in Lua] ih:
        /// identifier of the element that activated the event.
        /// x, y: position in the canvas where the event has occurred, in pixels.
        /// status: status of mouse buttons and certain keyboard keys at the moment the
        /// event was generated.
        /// The same macros used for BUTTON_CB can be used for this status.
        /// Notes Between press and release all mouse events are redirected only to
        /// this control, even if the cursor moves outside the element.
        /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
        /// called with coordinates outside the element rectangle.
        /// Affects IupCanvas, IupGLCanvas
        pub fn setMotionCallback(self: Initializer, callback: ?*const OnMotionFn) Initializer {
            const Handler = CallbackHandler(Self, OnMotionFn, "MOTION_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// WHEEL_CB WHEEL_CB Action generated when the mouse wheel is rotated.
        /// If this callback is not defined the wheel will automatically scroll the
        /// canvas in the vertical direction by some lines, the SCROLL_CB callback if
        /// defined will be called with the IUP_SBDRAGV operation.
        /// Callback int function(Ihandle *ih, float delta, int x, int y, char
        /// *status); [in C] ih:wheel_cb(delta, x, y: number, status: string) -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// delta: the amount the wheel was rotated in notches.
        /// x, y: position in the canvas where the event has occurred, in pixels.
        /// status: status of mouse buttons and certain keyboard keys at the moment the
        /// event was generated.
        /// The same macros used for BUTTON_CB can be used for this status.
        /// Notes In Motif and GTK delta is always 1 or -1.
        /// In Windows is some situations delta can reach the value of two.
        /// In the future with more precise wheels this increment can be changed.
        /// Affects IupCanvas, IupGLCanvas
        pub fn setWheelCallback(self: Initializer, callback: ?*const OnWheelFn) Initializer {
            const Handler = CallbackHandler(Self, OnWheelFn, "WHEEL_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
        /// updated in IupMap.
        /// When the element is a dialog, it is called after the layout is updated.
        /// For all other elements is called before the layout is updated, so the
        /// element current size will still be 0x0 during MAP_CB (since 3.14).
        /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
        /// Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setMapCallback(self: Initializer, callback: ?*const OnMapFn) Initializer {
            const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// DRAGDROP_CB: Action generated when an internal drag and drop is executed.
        /// Only active if SHOWDRAGDROP=YES.
        /// int function(Ihandle *ih, int drag_id, int drop_id, int isshift, int
        /// iscontrol); [in C] ih:dragdrop_cb(drag_id, drop_id, isshift, iscontrol:
        /// number) -> (ret: number) [in Lua]
        pub fn setDragDropCallback(self: Initializer, callback: ?*const OnDragDropFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragDropFn, "DRAGDROP_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setFlatButtonCallback(self: Initializer, callback: ?*const OnFlatButtonFn) Initializer {
            const Handler = CallbackHandler(Self, OnFlatButtonFn, "FLAT_BUTTON_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
        /// native element.
        /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Notes When the cursor is moved from one element to another, the call order
        /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
        /// control followed by the ENTERWINDOW_CB callback of the new control.
        /// (since 3.14) If the mouse button is hold pressed and the cursor moves
        /// outside the element the behavior is system dependent.
        /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
        /// GTK the callbacks are called.
        /// Affects All controls with user interaction.
        /// See Also LEAVEWINDOW_CB
        pub fn setEnterWindowCallback(self: Initializer, callback: ?*const OnEnterWindowFn) Initializer {
            const Handler = CallbackHandler(Self, OnEnterWindowFn, "ENTERWINDOW_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
        /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Notes If the dialog is visible then it is hidden before it is destroyed.
        /// The callback will be called right after it is hidden.
        /// The callback will be called before all other destroy procedures.
        /// For instance, if the element has children then it is called before the
        /// children are destroyed.
        /// For language binding implementations use the callback name "LDESTROY_CB" to
        /// release memory allocated by the binding for the element.
        /// Also the callback will be called before the language callback.
        /// Affects All.
        pub fn setDestroyCallback(self: Initializer, callback: ?*const OnDestroyFn) Initializer {
            const Handler = CallbackHandler(Self, OnDestroyFn, "DESTROY_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setDropDataCallback(self: Initializer, callback: ?*const OnDropDataFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropDataFn, "DROPDATA_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
        /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
        /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Affects All elements with user interaction, except menus.
        /// In Windows, there are restrictions when using this callback.
        /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
        /// function calls that display or activate a window.
        /// This causes the thread to yield control and can cause the application to
        /// stop responding to messages.
        /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
        pub fn setKillFocusCallback(self: Initializer, callback: ?*const OnKillFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnKillFocusFn, "KILLFOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// DBLCLICK_CB: Action generated when the user double click an item.
        /// int function (Ihandle *ih, int item, char *text); [in
        /// C]ih:dblclick_cb(item: number, text: string) -> (ret: number) [in Lua]
        pub fn setDblClickCallback(self: Initializer, callback: ?*const OnDblClickFn) Initializer {
            const Handler = CallbackHandler(Self, OnDblClickFn, "DBLCLICK_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setDragDataCallback(self: Initializer, callback: ?*const OnDragDataFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragDataFn, "DRAGDATA_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setDragDataSizeCallback(self: Initializer, callback: ?*const OnDragDataSizeFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragDataSizeFn, "DRAGDATASIZE_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// DROPFILES_CB DROPFILES_CB Action called when a file is "dropped" into the control.
        /// When several files are dropped at once, the callback is called several
        /// times, once for each file.
        /// If defined after the element is mapped then the attribute DROPFILESTARGET
        /// must be set to YES.
        /// [Windows and GTK Only] (GTK 2.6) Callback int function(Ihandle *ih, const
        /// char* filename, int num, int x, int y); [in C] ih:dropfiles_cb(filename:
        /// string; num, x, y: number) -> (ret: number) [in Lua] ih: identifier of the
        /// element that activated the event.
        /// filename: Name of the dropped file.
        /// num: Number index of the dropped file.
        /// If several files are dropped, num is the index of the dropped file starting
        /// from "total-1" to "0".
        /// x: X coordinate of the point where the user released the mouse button.
        /// y: Y coordinate of the point where the user released the mouse button.
        /// Returns: If IUP_IGNORE is returned the callback will NOT be called for the
        /// next dropped files, and the processing of dropped files will be interrupted.
        /// Affects IupDialog, IupCanvas, IupGLCanvas, IupText, IupList
        pub fn setDropFilesCallback(self: Initializer, callback: ?*const OnDropFilesFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropFilesFn, "DROPFILES_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// RESIZE_CB RESIZE_CB Action generated when the canvas or dialog size is changed.
        /// Callback int function(Ihandle *ih, int width, int height); [in C]
        /// ih:resize_cb(width, height: number) -> (ret: number) [in Lua] ih:
        /// identifier of the element that activated the event.
        /// width: the width of the internal element size in pixels not considering the
        /// decorations (client size) height: the height of the internal element size
        /// in pixels not considering the decorations (client size) Notes For the
        /// dialog, this action is also generated when the dialog is mapped, after the
        /// map and before the show.
        /// When XAUTOHIDE=Yes or YAUTOHIDE=Yes, if the canvas scrollbar is
        /// hidden/shown after changing the DX or DY attributes from inside the
        /// callback, the size of the drawing area will immediately change, so the
        /// parameters with and height will be invalid.
        /// To update the parameters consult the DRAWSIZE attribute.
        /// Also activate the drawing toolkit only after updating the DX or DY attributes.
        /// Affects IupCanvas, IupGLCanvas, IupDialog
        pub fn setResizeCallback(self: Initializer, callback: ?*const OnResizeFn) Initializer {
            const Handler = CallbackHandler(Self, OnResizeFn, "RESIZE_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
        /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setUnmapCallback(self: Initializer, callback: ?*const OnUnmapFn) Initializer {
            const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// FLAT_ACTION: Action generated when the state of an item in the list is
        /// interactively changed.
        /// int function (Ihandle *ih, char *text, int item, int state); [in
        /// C]ih:action(text: string, item, state: number) -> (ret: number) [in Lua]
        pub fn setFlatActionCallback(self: Initializer, callback: ?*const OnFlatActionFn) Initializer {
            const Handler = CallbackHandler(Self, OnFlatActionFn, "FLAT_ACTION");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
        /// This callback is called after the KILLFOCUS_CB of the element that loosed
        /// the focus.
        /// The IupGetFocus function during the callback returns the element that
        /// loosed the focus.
        /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that received keyboard focus.
        /// Affects All elements with user interaction, except menus.
        /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
        pub fn setGetFocusCallback(self: Initializer, callback: ?*const OnGetFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnGetFocusFn, "GETFOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// BUTTON_CB BUTTON_CB Action generated when a mouse button is pressed or released.
        /// Callback int function(Ihandle* ih, int button, int pressed, int x, int y,
        /// char* status); [in C] ih:button_cb(button, pressed, x, y: number, status:
        /// string) -> (ret: number) [in Lua] ih: identifies the element that activated
        /// the event.
        /// button: identifies the activated mouse button: IUP_BUTTON1 - left mouse
        /// button (button 1); IUP_BUTTON2 - middle mouse button (button 2);
        /// IUP_BUTTON3 - right mouse button (button 3).
        /// pressed: indicates the state of the button: 0 - mouse button was released;
        /// 1 - mouse button was pressed.
        /// x, y: position in the canvas where the event has occurred, in pixels.
        /// status: status of the mouse buttons and some keyboard keys at the moment
        /// the event is generated.
        /// The following macros must be used for verification: iup_isshift(status)
        /// iup_iscontrol(status) iup_isbutton1(status) iup_isbutton2(status)
        /// iup_isbutton3(status) iup_isbutton4(status) iup_isbutton5(status)
        /// iup_isdouble(status) iup_isalt(status) iup_issys(status) They return 1 if
        /// the respective key or button is pressed, and 0 otherwise.
        /// These macros are also available in Lua, returning a boolean.
        /// Returns: IUP_CLOSE will be processed.
        /// On some controls if IUP_IGNORE is returned the action is ignored (this is
        /// system dependent).
        /// Notes This callback can be used to customize a button behavior.
        /// For a standard button behavior use the ACTION callback of the IupButton.
        /// For a single click the callback is called twice, one for pressed=1 and one
        /// for pressed=0.
        /// Only after both calls the ACTION callback is called.
        /// In Windows, if a dialog is shown or popup in any situation there could be
        /// unpredictable results because the native system still has processing to be
        /// done even after the callback is called.
        /// A double click is preceded by two single clicks, one for pressed=1 and one
        /// for pressed=0, and followed by a press=0, all three without the double
        /// click flag set.
        /// In GTK, it is preceded by an additional two single clicks sequence.
        /// For example, for one double click all the following calls are made:
        /// BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) BUTTON_CB(but=1 (0), x=154, y=83 [
        /// 1 ]) BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1
        /// (0), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1 (1), x=154, y=83 [ 1
        /// D ]) BUTTON_CB(but=1 (0), x=154, y=83 [ 1 ]) Between press and release all
        /// mouse events are redirected only to this control, even if the cursor moves
        /// outside the element.
        /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
        /// called with coordinates outside the element rectangle.
        /// Affects IupCanvas, IupButton, IupText, IupList, IupGLCanvas
        pub fn setButtonCallback(self: Initializer, callback: ?*const OnButtonFn) Initializer {
            const Handler = CallbackHandler(Self, OnButtonFn, "BUTTON_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setFlatMotionCallback(self: Initializer, callback: ?*const OnFlatMotionFn) Initializer {
            const Handler = CallbackHandler(Self, OnFlatMotionFn, "FLAT_MOTION_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// VALUECHANGED_CB: Called after the selection was interactively changed.
        /// int function(Ihandle *ih); [in C]ih:valuechanged_cb() -> (ret: number) [in
        /// Lua]
        pub fn setValueChangedCallback(self: Initializer, callback: ?*const OnValueChangedFn) Initializer {
            const Handler = CallbackHandler(Self, OnValueChangedFn, "VALUECHANGED_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// MULTISELECT_CB: Action generated when the state of an item in the multiple
        /// selection list is interactively changed.
        /// But it is called only when the interaction is over.
        /// int function (Ihandle *ih, char *value); [in C]ih:multiselect_cb(value:
        /// string) -> (ret: number) [in Lua]
        pub fn setMultiSelectCallback(self: Initializer, callback: ?*const OnMultiSelectFn) Initializer {
            const Handler = CallbackHandler(Self, OnMultiSelectFn, "MULTISELECT_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setLDestroyCallback(self: Initializer, callback: ?*const OnLDestroyFn) Initializer {
            const Handler = CallbackHandler(Self, OnLDestroyFn, "LDESTROY_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
        /// native element.
        /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Notes When the cursor is moved from one element to another, the call order
        /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
        /// control followed by the ENTERWINDOW_CB callback of the new control.
        /// (since 3.14) If the mouse button is hold pressed and the cursor moves
        /// outside the element the behavior is system dependent.
        /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
        /// GTK the callbacks are called.
        /// Affects All controls with user interaction.
        /// See Also ENTERWINDOW_CB
        pub fn setLeaveWindowCallback(self: Initializer, callback: ?*const OnLeaveWindowFn) Initializer {
            const Handler = CallbackHandler(Self, OnLeaveWindowFn, "LEAVEWINDOW_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setPostMessageCallback(self: Initializer, callback: ?*const OnPostMessageFn) Initializer {
            const Handler = CallbackHandler(Self, OnPostMessageFn, "POSTMESSAGE_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }
    };

    pub fn setStrAttribute(self: *Self, attribute: [:0]const u8, arg: [:0]const u8) void {
        interop.setStrAttribute(self, attribute, .{}, arg);
    }

    pub fn getStrAttribute(self: *Self, attribute: [:0]const u8) [:0]const u8 {
        return interop.getStrAttribute(self, attribute, .{});
    }

    pub fn setIntAttribute(self: *Self, attribute: [:0]const u8, arg: i32) void {
        interop.setIntAttribute(self, attribute, .{}, arg);
    }

    pub fn getIntAttribute(self: *Self, attribute: [:0]const u8) i32 {
        return interop.getIntAttribute(self, attribute, .{});
    }

    pub fn setBoolAttribute(self: *Self, attribute: [:0]const u8, arg: bool) void {
        interop.setBoolAttribute(self, attribute, .{}, arg);
    }

    pub fn getBoolAttribute(self: *Self, attribute: [:0]const u8) bool {
        return interop.getBoolAttribute(self, attribute, .{});
    }

    pub fn getPtrAttribute(self: *Self, comptime T: type, attribute: [:0]const u8) ?*T {
        return interop.getPtrAttribute(T, self, attribute, .{});
    }

    pub fn setPtrAttribute(self: *Self, comptime T: type, attribute: [:0]const u8, value: ?*T) void {
        interop.setPtrAttribute(T, self, attribute, .{}, value);
    }

    pub fn setHandle(self: *Self, arg: [:0]const u8) void {
        interop.setHandle(self, arg);
    }

    pub fn fromHandleName(handle_name: [:0]const u8) ?*Self {
        return interop.fromHandleName(Self, handle_name);
    }

    pub fn postMessage(self: *Self, s: [:0]const u8, i: i32, f: f64, p: ?*anyopaque) void {
        return interop.postMessage(self, s, i, f, p);
    }

    ///
    /// Creates an interface element given its class name and parameters.
    /// After creation the element still needs to be attached to a container and mapped to the native system so it can be visible.
    pub fn init() Initializer {
        var handle = interop.create(Self);

        if (handle) |valid| {
            return .{
                .ref = @ptrCast(*Self, valid),
            };
        } else {
            return .{ .ref = undefined, .last_error = Error.NotInitialized };
        }
    }

    ///
    /// Destroys an interface element and all its children.
    /// Only dialogs, timers, popup menus and images should be normally destroyed, but detached elements can also be destroyed.
    pub fn deinit(self: *Self) void {
        interop.destroy(self);
    }

    ///
    /// Creates (maps) the native interface objects corresponding to the given IUP interface elements.
    /// It will also called recursively to create the native element of all the children in the element's tree.
    /// The element must be already attached to a mapped container, except the dialog. A child can only be mapped if its parent is already mapped.
    /// This function is automatically called before the dialog is shown in IupShow, IupShowXY or IupPopup.
    /// If the element is a dialog then the abstract layout will be updated even if the dialog is already mapped. If the dialog is visible the elements will be immediately repositioned. Calling IupMap for an already mapped dialog is the same as only calling IupRefresh for the dialog.
    /// Calling IupMap for an already mapped element that is not a dialog does nothing.
    /// If you add new elements to an already mapped dialog you must call IupMap for that elements. And then call IupRefresh to update the dialog layout.
    /// If the WID attribute of an element is NULL, it means the element was not already mapped. Some containers do not have a native element associated, like VBOX and HBOX. In this case their WID is a fake value (void*)(-1).
    /// It is useful for the application to call IupMap when the value of the WID attribute must be known, i.e. the native element must exist, before a dialog is made visible.
    /// The MAP_CB callback is called at the end of the IupMap function, after all processing, so it can also be used to create other things that depend on the WID attribute. But notice that for non dialog elements it will be called before the dialog layout has been updated, so the element current size will still be 0x0 (since 3.14).
    pub fn map(self: *Self) !void {
        try interop.map(self);
    }

    ///
    ///
    pub fn getDialog(self: *Self) ?*iup.Dialog {
        return interop.getDialog(self);
    }

    ///
    /// Returns the the child element that has the NAME attribute equals to the given value on the same dialog hierarchy.
    /// Works also for children of a menu that is associated with a dialog.
    pub fn getDialogChild(self: *Self, byName: [:0]const u8) ?Element {
        return interop.getDialogChild(self, byName);
    }

    ///
    /// Updates the size and layout of all controls in the same dialog.
    /// To be used after changing size attributes, or attributes that affect the size of the control. Can be used for any element inside a dialog, but the layout of the dialog and all controls will be updated. It can change the layout of all the controls inside the dialog because of the dynamic layout positioning.
    pub fn refresh(self: *Self) void {
        Impl(Self).refresh(self);
    }

    ///
    /// Updates the size and layout of all controls in the same dialog.
    pub fn update(self: *Self) void {
        Impl(Self).update(self);
    }

    ///
    /// Updates the size and layout of all controls in the same dialog.
    pub fn updateChildren(self: *Self) void {
        Impl(Self).updateChildren(self);
    }

    ///
    /// Force the element and its children to be redrawn immediately.
    pub fn redraw(self: *Self, redraw_children: bool) void {
        Impl(Self).redraw(self, redraw_children);
    }

    pub fn getIntId(self: *Self, attribute: [:0]const u8, index: i32) i32 {
        return interop.getIntAttribute(self, attribute, .{index});
    }

    pub fn setIntId(self: *Self, attribute: [:0]const u8, index: i32, value: i32) void {
        interop.setIntAttribute(self, attribute, .{index}, value);
    }

    pub fn getFloatId(self: *Self, attribute: [:0]const u8, index: i32) f32 {
        return interop.getFloatAttribute(self, attribute, .{index});
    }

    pub fn setFloatId(self: *Self, attribute: [:0]const u8, index: i32, value: f32) void {
        interop.setFloatAttribute(self, attribute, .{index}, value);
    }

    pub fn getDoubleId(self: *Self, attribute: [:0]const u8, index: i32) f64 {
        return interop.getDoubleAttribute(self, attribute, .{index});
    }

    pub fn setDoubleId(self: *Self, attribute: [:0]const u8, index: i32, value: f64) void {
        interop.setFloatAttribute(self, attribute, .{index}, value);
    }

    pub fn getStrId(self: *Self, attribute: [:0]const u8, index: i32) [:0]const u8 {
        return interop.getStrAttribute(self, attribute, .{index});
    }

    pub fn setStrId(self: *Self, attribute: [:0]const u8, index: i32, value: [:0]const u8) void {
        interop.setStrAttribute(self, attribute, .{index}, value);
    }

    pub fn getPtrId(self: *Self, comptime T: type, attribute: [:0]const u8, index: i32) ?*T {
        return interop.getPtrAttribute(type, self, attribute, .{index});
    }

    pub fn setPtrId(self: *Self, comptime T: type, attribute: [:0]const u8, index: i32, value: ?*T) void {
        interop.setPtrAttribute(type, self, attribute, .{index}, value);
    }

    ///
    /// COUNT (read-only) (non inheritable): returns the number of items.
    pub fn getCount(self: *Self) i32 {
        return interop.getIntAttribute(self, "COUNT", .{});
    }

    ///
    /// FGCOLOR: Text color.
    /// Default: the global attribute TXTFGCOLOR.
    pub fn getFgColor(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "FGCOLOR", .{});
    }

    ///
    /// FGCOLOR: Text color.
    /// Default: the global attribute TXTFGCOLOR.
    pub fn setFgColor(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "FGCOLOR", .{}, rgb);
    }

    pub fn getHandleName(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "HANDLENAME", .{});
    }

    pub fn setHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "HANDLENAME", .{}, arg);
    }

    pub fn getTipBgColor(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "TIPBGCOLOR", .{});
    }

    pub fn setTipBgColor(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "TIPBGCOLOR", .{}, rgb);
    }

    ///
    /// HASFOCUS (read-only): returns the button state if has focus.
    /// Can be Yes or No.
    pub fn getHasFocus(self: *Self) bool {
        return interop.getBoolAttribute(self, "HASFOCUS", .{});
    }

    pub fn getXMin(self: *Self) i32 {
        return interop.getIntAttribute(self, "XMIN", .{});
    }

    pub fn setXMin(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "XMIN", .{}, arg);
    }

    pub fn getTipIcon(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "TIPICON", .{});
    }

    pub fn setTipIcon(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TIPICON", .{}, arg);
    }

    pub fn getSbImageBottomPress(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "SB_IMAGEBOTTOMPRESS", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn setSbImageBottomPress(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "SB_IMAGEBOTTOMPRESS", .{}, arg);
    }

    pub fn setSbImageBottomPressHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "SB_IMAGEBOTTOMPRESS", .{}, arg);
    }

    ///
    /// ITEMTIPid: tip of the item at the given id.
    /// If defined will be shown instead of the TIP attribute.
    /// (since 3.29)
    pub fn getItemTip(self: *Self, index: i32) [:0]const u8 {
        return interop.getStrAttribute(self, "ITEMTIP", .{index});
    }

    ///
    /// ITEMTIPid: tip of the item at the given id.
    /// If defined will be shown instead of the TIP attribute.
    /// (since 3.29)
    pub fn setItemTip(self: *Self, index: i32, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "ITEMTIP", .{index}, arg);
    }

    pub fn getMaxSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "MAXSIZE", .{});
        return Size.parse(str);
    }

    pub fn setMaxSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "MAXSIZE", .{}, value);
    }

    pub fn getDrawTextWrap(self: *Self) bool {
        return interop.getBoolAttribute(self, "DRAWTEXTWRAP", .{});
    }

    pub fn setDrawTextWrap(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DRAWTEXTWRAP", .{}, arg);
    }

    pub fn getScreenPosition(self: *Self) iup.XYPos {
        var str = interop.getStrAttribute(self, "SCREENPOSITION", .{});
        return iup.XYPos.parse(str, ',');
    }

    ///
    /// FOCUSFEEDBACK (non inheritable): draw the focus feedback.
    /// Can be Yes or No.
    /// Default: Yes.
    pub fn getFocusFeedback(self: *Self) bool {
        return interop.getBoolAttribute(self, "FOCUSFEEDBACK", .{});
    }

    ///
    /// FOCUSFEEDBACK (non inheritable): draw the focus feedback.
    /// Can be Yes or No.
    /// Default: Yes.
    pub fn setFocusFeedback(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "FOCUSFEEDBACK", .{}, arg);
    }

    pub fn getPosition(self: *Self) iup.XYPos {
        var str = interop.getStrAttribute(self, "POSITION", .{});
        return iup.XYPos.parse(str, ',');
    }

    pub fn setPosition(self: *Self, x: i32, y: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
        interop.setStrAttribute(self, "POSITION", .{}, value);
    }

    ///
    /// DROPFILESTARGET (non inheritable): Enable or disable the drop of files.
    /// Default: NO, but if DROPFILES_CB is defined when the element is mapped then
    /// it will be automatically enabled.
    pub fn getDropFilesTarget(self: *Self) bool {
        return interop.getBoolAttribute(self, "DROPFILESTARGET", .{});
    }

    ///
    /// DROPFILESTARGET (non inheritable): Enable or disable the drop of files.
    /// Default: NO, but if DROPFILES_CB is defined when the element is mapped then
    /// it will be automatically enabled.
    pub fn setDropFilesTarget(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DROPFILESTARGET", .{}, arg);
    }

    pub fn getDrawTextAlignment(self: *Self) ?DrawTextAlignment {
        var ret = interop.getStrAttribute(self, "DRAWTEXTALIGNMENT", .{});

        if (std.ascii.eqlIgnoreCase("ACENTER", ret)) return .ACenter;
        if (std.ascii.eqlIgnoreCase("ARIGHT", ret)) return .ARight;
        if (std.ascii.eqlIgnoreCase("ALEFT", ret)) return .ALeft;
        return null;
    }

    pub fn setDrawTextAlignment(self: *Self, arg: ?DrawTextAlignment) void {
        if (arg) |value| switch (value) {
            .ACenter => interop.setStrAttribute(self, "DRAWTEXTALIGNMENT", .{}, "ACENTER"),
            .ARight => interop.setStrAttribute(self, "DRAWTEXTALIGNMENT", .{}, "ARIGHT"),
            .ALeft => interop.setStrAttribute(self, "DRAWTEXTALIGNMENT", .{}, "ALEFT"),
        } else {
            interop.clearAttribute(self, "DRAWTEXTALIGNMENT", .{});
        }
    }

    pub fn getTip(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "TIP", .{});
    }

    pub fn setTip(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TIP", .{}, arg);
    }

    pub fn getDrawTextLayoutCenter(self: *Self) bool {
        return interop.getBoolAttribute(self, "DRAWTEXTLAYOUTCENTER", .{});
    }

    pub fn setDrawTextLayoutCenter(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DRAWTEXTLAYOUTCENTER", .{}, arg);
    }

    pub fn getCanFocus(self: *Self) bool {
        return interop.getBoolAttribute(self, "CANFOCUS", .{});
    }

    pub fn setCanFocus(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "CANFOCUS", .{}, arg);
    }

    pub fn getSbImageBottomHighlight(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "SB_IMAGEBOTTOMHIGHLIGHT", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn setSbImageBottomHighlight(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "SB_IMAGEBOTTOMHIGHLIGHT", .{}, arg);
    }

    pub fn setSbImageBottomHighlightHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "SB_IMAGEBOTTOMHIGHLIGHT", .{}, arg);
    }

    pub fn getDragSourceMove(self: *Self) bool {
        return interop.getBoolAttribute(self, "DRAGSOURCEMOVE", .{});
    }

    pub fn setDragSourceMove(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DRAGSOURCEMOVE", .{}, arg);
    }

    ///
    /// PSCOLOR: background color of a selected item.
    /// If not defined BACKCOLORid will be used.
    /// (since 3.30)
    pub fn getPsColor(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "PSCOLOR", .{});
    }

    ///
    /// PSCOLOR: background color of a selected item.
    /// If not defined BACKCOLORid will be used.
    /// (since 3.30)
    pub fn setPsColor(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "PSCOLOR", .{}, rgb);
    }

    pub fn getVisible(self: *Self) bool {
        return interop.getBoolAttribute(self, "VISIBLE", .{});
    }

    pub fn setVisible(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "VISIBLE", .{}, arg);
    }

    pub fn getImage(self: *Self, index: i32) ?iup.Element {
        if (interop.getHandleAttribute(self, "IMAGE", .{index})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn setImage(self: *Self, index: i32, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "IMAGE", .{index}, arg);
    }

    pub fn setImageHandleName(self: *Self, index: i32, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "IMAGE", .{index}, arg);
    }

    pub fn getLineX(self: *Self) f64 {
        return interop.getDoubleAttribute(self, "LINEX", .{});
    }

    pub fn setLineX(self: *Self, arg: f64) void {
        interop.setDoubleAttribute(self, "LINEX", .{}, arg);
    }

    pub fn getCursor(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "CURSOR", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn setCursor(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "CURSOR", .{}, arg);
    }

    pub fn setCursorHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "CURSOR", .{}, arg);
    }

    pub fn getLineY(self: *Self) f64 {
        return interop.getDoubleAttribute(self, "LINEY", .{});
    }

    pub fn setLineY(self: *Self, arg: f64) void {
        interop.setDoubleAttribute(self, "LINEY", .{}, arg);
    }

    pub fn zOrder(self: *Self, arg: ?ZOrder) void {
        if (arg) |value| switch (value) {
            .Top => interop.setStrAttribute(self, "ZORDER", .{}, "TOP"),
            .Bottom => interop.setStrAttribute(self, "ZORDER", .{}, "BOTTOM"),
        } else {
            interop.clearAttribute(self, "ZORDER", .{});
        }
    }

    pub fn getDrawLineWidth(self: *Self) i32 {
        return interop.getIntAttribute(self, "DRAWLINEWIDTH", .{});
    }

    pub fn setDrawLineWidth(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "DRAWLINEWIDTH", .{}, arg);
    }

    pub fn getX(self: *Self) i32 {
        return interop.getIntAttribute(self, "X", .{});
    }

    pub fn getY(self: *Self) i32 {
        return interop.getIntAttribute(self, "Y", .{});
    }

    pub fn getDragDrop(self: *Self) bool {
        return interop.getBoolAttribute(self, "DRAGDROP", .{});
    }

    pub fn setDragDrop(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DRAGDROP", .{}, arg);
    }

    pub fn getTheme(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "THEME", .{});
    }

    pub fn setTheme(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "THEME", .{}, arg);
    }

    pub fn getSbImageLeftPress(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "SB_IMAGELEFTPRESS", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn setSbImageLeftPress(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "SB_IMAGELEFTPRESS", .{}, arg);
    }

    pub fn setSbImageLeftPressHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "SB_IMAGELEFTPRESS", .{}, arg);
    }

    pub fn getSbImageRightHighlight(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "SB_IMAGERIGHTHIGHLIGHT", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn setSbImageRightHighlight(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "SB_IMAGERIGHTHIGHLIGHT", .{}, arg);
    }

    pub fn setSbImageRightHighlightHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "SB_IMAGERIGHTHIGHLIGHT", .{}, arg);
    }

    pub fn getExpand(self: *Self) ?Expand {
        var ret = interop.getStrAttribute(self, "EXPAND", .{});

        if (std.ascii.eqlIgnoreCase("YES", ret)) return .Yes;
        if (std.ascii.eqlIgnoreCase("HORIZONTAL", ret)) return .Horizontal;
        if (std.ascii.eqlIgnoreCase("VERTICAL", ret)) return .Vertical;
        if (std.ascii.eqlIgnoreCase("HORIZONTALFREE", ret)) return .HorizontalFree;
        if (std.ascii.eqlIgnoreCase("VERTICALFREE", ret)) return .VerticalFree;
        if (std.ascii.eqlIgnoreCase("NO", ret)) return .No;
        return null;
    }

    pub fn setExpand(self: *Self, arg: ?Expand) void {
        if (arg) |value| switch (value) {
            .Yes => interop.setStrAttribute(self, "EXPAND", .{}, "YES"),
            .Horizontal => interop.setStrAttribute(self, "EXPAND", .{}, "HORIZONTAL"),
            .Vertical => interop.setStrAttribute(self, "EXPAND", .{}, "VERTICAL"),
            .HorizontalFree => interop.setStrAttribute(self, "EXPAND", .{}, "HORIZONTALFREE"),
            .VerticalFree => interop.setStrAttribute(self, "EXPAND", .{}, "VERTICALFREE"),
            .No => interop.setStrAttribute(self, "EXPAND", .{}, "NO"),
        } else {
            interop.clearAttribute(self, "EXPAND", .{});
        }
    }

    ///
    /// VISIBLELINES: Defines the number of visible lines for the Natural Size,
    /// this means that will act also as minimum number of visible lines.
    pub fn getVisibleLines(self: *Self) i32 {
        return interop.getIntAttribute(self, "VISIBLELINES", .{});
    }

    ///
    /// VISIBLELINES: Defines the number of visible lines for the Natural Size,
    /// this means that will act also as minimum number of visible lines.
    pub fn setVisibleLines(self: *Self, arg: ?i32) void {
        if (arg == null) {
            interop.setStrAttribute(self, "VISIBLELINES", .{}, null);
        } else {
            interop.setIntAttribute(self, "VISIBLELINES", .{}, arg.?);
        }
    }

    pub fn getDrawFont(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "DRAWFONT", .{});
    }

    pub fn setDrawFont(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "DRAWFONT", .{}, arg);
    }

    pub fn getSbImageTop(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "SB_IMAGETOP", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn setSbImageTop(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "SB_IMAGETOP", .{}, arg);
    }

    pub fn setSbImageTopHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "SB_IMAGETOP", .{}, arg);
    }

    ///
    /// SIZE: Size of the list.
    /// The Natural Size is defined by the number of elements in the list and the
    /// with of the largest item, the default has room for 5 characters in 1 item.
    /// The Natural Size ignores the list contents if VISIBLECOLUMNS or
    /// VISIBLELINES attributes are defined.
    pub fn getSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "SIZE", .{});
        return Size.parse(str);
    }

    ///
    /// SIZE: Size of the list.
    /// The Natural Size is defined by the number of elements in the list and the
    /// with of the largest item, the default has room for 5 characters in 1 item.
    /// The Natural Size ignores the list contents if VISIBLECOLUMNS or
    /// VISIBLELINES attributes are defined.
    pub fn setSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "SIZE", .{}, value);
    }

    ///
    /// PADDING: internal margin of each item.
    /// Works just like the MARGIN attribute of the IupHbox and IupVbox containers,
    /// but uses a different name to avoid inheritance problems.
    /// Alignment does not includes the padding area.
    /// Default value: "2x2".
    pub fn getPadding(self: *Self) Size {
        var str = interop.getStrAttribute(self, "PADDING", .{});
        return Size.parse(str);
    }

    ///
    /// PADDING: internal margin of each item.
    /// Works just like the MARGIN attribute of the IupHbox and IupVbox containers,
    /// but uses a different name to avoid inheritance problems.
    /// Alignment does not includes the padding area.
    /// Default value: "2x2".
    pub fn setPadding(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "PADDING", .{}, value);
    }

    ///
    /// VALUESTRING (non inheritable): changes or retrieves the value attribute
    /// using a string of an item.
    /// Works only when MULTIPLE=NO.
    /// When set it will search for the first item with the same string.
    pub fn getValueString(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "VALUESTRING", .{});
    }

    ///
    /// VALUESTRING (non inheritable): changes or retrieves the value attribute
    /// using a string of an item.
    /// Works only when MULTIPLE=NO.
    /// When set it will search for the first item with the same string.
    pub fn setValueString(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "VALUESTRING", .{}, arg);
    }

    pub fn getPosX(self: *Self) f64 {
        return interop.getDoubleAttribute(self, "POSX", .{});
    }

    pub fn setPosX(self: *Self, arg: f64) void {
        interop.setDoubleAttribute(self, "POSX", .{}, arg);
    }

    pub fn getPosY(self: *Self) f64 {
        return interop.getDoubleAttribute(self, "POSY", .{});
    }

    pub fn setPosY(self: *Self, arg: f64) void {
        interop.setDoubleAttribute(self, "POSY", .{}, arg);
    }

    pub fn getWId(self: *Self) i32 {
        return interop.getIntAttribute(self, "WID", .{});
    }

    ///
    /// HLCOLORALPHA: the transparency used to draw the selection.
    /// Default: 128.
    /// If set to 0 the selection box is not drawn.
    pub fn getHlColorAlpha(self: *Self) i32 {
        return interop.getIntAttribute(self, "HLCOLORALPHA", .{});
    }

    ///
    /// HLCOLORALPHA: the transparency used to draw the selection.
    /// Default: 128.
    /// If set to 0 the selection box is not drawn.
    pub fn setHlColorAlpha(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "HLCOLORALPHA", .{}, arg);
    }

    pub fn getTipMarkup(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "TIPMARKUP", .{});
    }

    pub fn setTipMarkup(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TIPMARKUP", .{}, arg);
    }

    pub fn getYMin(self: *Self) i32 {
        return interop.getIntAttribute(self, "YMIN", .{});
    }

    pub fn setYMin(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "YMIN", .{}, arg);
    }

    ///
    /// TEXTELLIPSIS (non inheritable): If the text is larger that its box, an
    /// ellipsis ("...") will be placed near the last visible part of the text and
    /// replace the invisible part.
    /// It will be ignored when TEXTWRAP=Yes.
    pub fn getTextEllipsis(self: *Self) bool {
        return interop.getBoolAttribute(self, "TEXTELLIPSIS", .{});
    }

    ///
    /// TEXTELLIPSIS (non inheritable): If the text is larger that its box, an
    /// ellipsis ("...") will be placed near the last visible part of the text and
    /// replace the invisible part.
    /// It will be ignored when TEXTWRAP=Yes.
    pub fn setTextEllipsis(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "TEXTELLIPSIS", .{}, arg);
    }

    ///
    /// DRAGDROPLIST (non inheritable): prepare the Drag & Drop callbacks to
    /// support drag and drop of items between lists (IupList or IupFlatList), in
    /// the same IUP application.
    /// Drag & Drop attributes still need to be set in order to activate the drag &
    /// drop support, so the application can control if this list will be source
    /// and/or target.
    /// Default: NO.
    pub fn getDragDropList(self: *Self) bool {
        return interop.getBoolAttribute(self, "DRAGDROPLIST", .{});
    }

    ///
    /// DRAGDROPLIST (non inheritable): prepare the Drag & Drop callbacks to
    /// support drag and drop of items between lists (IupList or IupFlatList), in
    /// the same IUP application.
    /// Drag & Drop attributes still need to be set in order to activate the drag &
    /// drop support, so the application can control if this list will be source
    /// and/or target.
    /// Default: NO.
    pub fn setDragDropList(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DRAGDROPLIST", .{}, arg);
    }

    ///
    /// REMOVEITEM (write-only): removes the given value.
    /// value starts at 1.
    /// If value is NULL or "ALL" removes all the items.
    /// Different from IupList, can be set before map.
    pub fn removeItem(self: *Self, arg: ?i32) void {
        if (arg == null) {
            interop.setStrAttribute(self, "REMOVEITEM", .{}, null);
        } else {
            interop.setIntAttribute(self, "REMOVEITEM", .{}, arg.?);
        }
    }

    pub fn getDrawMakeInactive(self: *Self) bool {
        return interop.getBoolAttribute(self, "DRAWMAKEINACTIVE", .{});
    }

    pub fn setDrawMakeInactive(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DRAWMAKEINACTIVE", .{}, arg);
    }

    ///
    /// TOPITEM (write-only): position the given item at the top of the list or
    /// near to make it visible.
    pub fn topItem(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "TOPITEM", .{}, arg);
    }

    pub fn getFontSize(self: *Self) i32 {
        return interop.getIntAttribute(self, "FONTSIZE", .{});
    }

    pub fn setFontSize(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "FONTSIZE", .{}, arg);
    }

    pub fn getNaturalSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "NATURALSIZE", .{});
        return Size.parse(str);
    }

    pub fn getDropTypes(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "DROPTYPES", .{});
    }

    pub fn setDropTypes(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "DROPTYPES", .{}, arg);
    }

    pub fn getUserSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "USERSIZE", .{});
        return Size.parse(str);
    }

    pub fn setUserSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "USERSIZE", .{}, value);
    }

    pub fn getTipDelay(self: *Self) i32 {
        return interop.getIntAttribute(self, "TIPDELAY", .{});
    }

    pub fn setTipDelay(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "TIPDELAY", .{}, arg);
    }

    pub fn getSbImageLeftInactive(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "SB_IMAGELEFTINACTIVE", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn setSbImageLeftInactive(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "SB_IMAGELEFTINACTIVE", .{}, arg);
    }

    pub fn setSbImageLeftInactiveHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "SB_IMAGELEFTINACTIVE", .{}, arg);
    }

    ///
    /// SCROLLBAR (read-only): is always "NO".
    /// So the IupCanvas native scrollbars are hidden.
    /// See the FLATSCROLLBAR attribute bellow.
    /// YAUTOHIDE and XAUTOHIDE will be always Yes.
    pub fn getScrollBar(self: *Self) bool {
        return interop.getBoolAttribute(self, "SCROLLBAR", .{});
    }

    ///
    /// SCROLLBAR (read-only): is always "NO".
    /// So the IupCanvas native scrollbars are hidden.
    /// See the FLATSCROLLBAR attribute bellow.
    /// YAUTOHIDE and XAUTOHIDE will be always Yes.
    pub fn setScrollBar(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "SCROLLBAR", .{}, arg);
    }

    pub fn getXHidden(self: *Self) bool {
        return interop.getBoolAttribute(self, "XHIDDEN", .{});
    }

    pub fn getXAutoHide(self: *Self) bool {
        return interop.getBoolAttribute(self, "XAUTOHIDE", .{});
    }

    pub fn getSbImageRightInactive(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "SB_IMAGERIGHTINACTIVE", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn setSbImageRightInactive(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "SB_IMAGERIGHTINACTIVE", .{}, arg);
    }

    pub fn setSbImageRightInactiveHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "SB_IMAGERIGHTINACTIVE", .{}, arg);
    }

    ///
    /// PROPAGATEFOCUS (non inheritable): enables the focus callback forwarding to
    /// the next native parent with FOCUS_CB defined.
    /// Default: NO.
    pub fn getPropagateFocus(self: *Self) bool {
        return interop.getBoolAttribute(self, "PROPAGATEFOCUS", .{});
    }

    ///
    /// PROPAGATEFOCUS (non inheritable): enables the focus callback forwarding to
    /// the next native parent with FOCUS_CB defined.
    /// Default: NO.
    pub fn setPropagateFocus(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "PROPAGATEFOCUS", .{}, arg);
    }

    pub fn getXMax(self: *Self) i32 {
        return interop.getIntAttribute(self, "XMAX", .{});
    }

    pub fn setXMax(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "XMAX", .{}, arg);
    }

    ///
    /// BGCOLOR: Background color of the text.
    /// Default: the global attribute TXTBGCOLOR.
    pub fn getBgColor(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "BGCOLOR", .{});
    }

    ///
    /// BGCOLOR: Background color of the text.
    /// Default: the global attribute TXTBGCOLOR.
    pub fn setBgColor(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "BGCOLOR", .{}, rgb);
    }

    ///
    /// ITEMFONTSIZEid: text font size.
    /// When changed will actually set ITEMFONTid.
    pub fn getItemFontSize(self: *Self, index: i32) i32 {
        return interop.getIntAttribute(self, "ITEMFONTSIZE", .{index});
    }

    ///
    /// ITEMFONTSIZEid: text font size.
    /// When changed will actually set ITEMFONTid.
    pub fn setItemFontSize(self: *Self, index: i32, arg: i32) void {
        interop.setIntAttribute(self, "ITEMFONTSIZE", .{index}, arg);
    }

    pub fn getDropTarget(self: *Self) bool {
        return interop.getBoolAttribute(self, "DROPTARGET", .{});
    }

    pub fn setDropTarget(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DROPTARGET", .{}, arg);
    }

    pub fn getDX(self: *Self) f64 {
        return interop.getDoubleAttribute(self, "DX", .{});
    }

    pub fn setDX(self: *Self, arg: f64) void {
        interop.setDoubleAttribute(self, "DX", .{}, arg);
    }

    pub fn getDY(self: *Self) f64 {
        return interop.getDoubleAttribute(self, "DY", .{});
    }

    pub fn setDY(self: *Self, arg: f64) void {
        interop.setDoubleAttribute(self, "DY", .{}, arg);
    }

    pub fn getDrawTextEllipsis(self: *Self) bool {
        return interop.getBoolAttribute(self, "DRAWTEXTELLIPSIS", .{});
    }

    pub fn setDrawTextEllipsis(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DRAWTEXTELLIPSIS", .{}, arg);
    }

    pub fn getDragSource(self: *Self) bool {
        return interop.getBoolAttribute(self, "DRAGSOURCE", .{});
    }

    pub fn setDragSource(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DRAGSOURCE", .{}, arg);
    }

    pub fn getDrawTextClip(self: *Self) bool {
        return interop.getBoolAttribute(self, "DRAWTEXTCLIP", .{});
    }

    pub fn setDrawTextClip(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DRAWTEXTCLIP", .{}, arg);
    }

    pub fn getFloating(self: *Self) ?Floating {
        var ret = interop.getStrAttribute(self, "FLOATING", .{});

        if (std.ascii.eqlIgnoreCase("YES", ret)) return .Yes;
        if (std.ascii.eqlIgnoreCase("IGNORE", ret)) return .Ignore;
        if (std.ascii.eqlIgnoreCase("NO", ret)) return .No;
        return null;
    }

    pub fn setFloating(self: *Self, arg: ?Floating) void {
        if (arg) |value| switch (value) {
            .Yes => interop.setStrAttribute(self, "FLOATING", .{}, "YES"),
            .Ignore => interop.setStrAttribute(self, "FLOATING", .{}, "IGNORE"),
            .No => interop.setStrAttribute(self, "FLOATING", .{}, "NO"),
        } else {
            interop.clearAttribute(self, "FLOATING", .{});
        }
    }

    pub fn getNormalizerGroup(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "NORMALIZERGROUP", .{});
    }

    pub fn setNormalizerGroup(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "NORMALIZERGROUP", .{}, arg);
    }

    ///
    /// SPACING: internal space between each item.
    /// Different from IupList, it does not affects the internal margin.
    /// Not drawn with any item background color.
    /// Default: 0
    pub fn getSpacing(self: *Self) i32 {
        return interop.getIntAttribute(self, "SPACING", .{});
    }

    ///
    /// SPACING: internal space between each item.
    /// Different from IupList, it does not affects the internal margin.
    /// Not drawn with any item background color.
    /// Default: 0
    pub fn setSpacing(self: *Self, arg: ?i32) void {
        if (arg == null) {
            interop.setStrAttribute(self, "SPACING", .{}, null);
        } else {
            interop.setIntAttribute(self, "SPACING", .{}, arg.?);
        }
    }

    pub fn getSbImageRightPress(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "SB_IMAGERIGHTPRESS", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn setSbImageRightPress(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "SB_IMAGERIGHTPRESS", .{}, arg);
    }

    pub fn setSbImageRightPressHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "SB_IMAGERIGHTPRESS", .{}, arg);
    }

    pub fn insertItem(self: *Self, index: i32, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "INSERTITEM", .{index}, arg);
    }

    pub fn getRasterSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "RASTERSIZE", .{});
        return Size.parse(str);
    }

    pub fn setRasterSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "RASTERSIZE", .{}, value);
    }

    ///
    /// TEXTPSCOLOR: foreground color of a selected item.
    /// If not defined FORECOLORid will be used.
    /// (since 3.30)
    pub fn getTextPsColor(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "TEXTPSCOLOR", .{});
    }

    ///
    /// TEXTPSCOLOR: foreground color of a selected item.
    /// If not defined FORECOLORid will be used.
    /// (since 3.30)
    pub fn setTextPsColor(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "TEXTPSCOLOR", .{}, rgb);
    }

    ///
    /// BORDERCOLOR: color used for the internal border.
    /// Default: "50 150 255".
    /// This is for the internal border.
    pub fn getBorderColor(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "BORDERCOLOR", .{});
    }

    ///
    /// BORDERCOLOR: color used for the internal border.
    /// Default: "50 150 255".
    /// This is for the internal border.
    pub fn setBorderColor(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "BORDERCOLOR", .{}, rgb);
    }

    pub fn getImageNativeHandle(self: *Self, index: i32) ?iup.Element {
        if (interop.getHandleAttribute(self, "IMAGENATIVEHANDLE", .{index})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn getTipFgColor(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "TIPFGCOLOR", .{});
    }

    pub fn setTipFgColor(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "TIPFGCOLOR", .{}, rgb);
    }

    pub fn getYHidden(self: *Self) bool {
        return interop.getBoolAttribute(self, "YHIDDEN", .{});
    }

    pub fn getSbImageLeft(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "SB_IMAGELEFT", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn setSbImageLeft(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "SB_IMAGELEFT", .{}, arg);
    }

    pub fn setSbImageLeftHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "SB_IMAGELEFT", .{}, arg);
    }

    ///
    /// CSPACING: same as SPACING but using the units of the vertical part of the
    /// SIZE attribute.
    /// It will actually set the SPACING attribute.
    /// (since 3.29)
    pub fn getCSpacing(self: *Self) i32 {
        return interop.getIntAttribute(self, "CSPACING", .{});
    }

    ///
    /// CSPACING: same as SPACING but using the units of the vertical part of the
    /// SIZE attribute.
    /// It will actually set the SPACING attribute.
    /// (since 3.29)
    pub fn setCSpacing(self: *Self, arg: ?i32) void {
        if (arg == null) {
            interop.setStrAttribute(self, "CSPACING", .{}, null);
        } else {
            interop.setIntAttribute(self, "CSPACING", .{}, arg.?);
        }
    }

    pub fn getDrawSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "DRAWSIZE", .{});
        return Size.parse(str);
    }

    ///
    /// HLCOLOR: color of a filled box drawn over the selected item.
    /// Default: "TXTHLCOLOR".
    pub fn getHlColor(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "HLCOLOR", .{});
    }

    ///
    /// HLCOLOR: color of a filled box drawn over the selected item.
    /// Default: "TXTHLCOLOR".
    pub fn setHlColor(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "HLCOLOR", .{}, rgb);
    }

    pub fn getFontFace(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "FONTFACE", .{});
    }

    pub fn setFontFace(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "FONTFACE", .{}, arg);
    }

    pub fn getDrawColor(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "DRAWCOLOR", .{});
    }

    pub fn setDrawColor(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "DRAWCOLOR", .{}, rgb);
    }

    pub fn getDrawTextOrientation(self: *Self) f64 {
        return interop.getDoubleAttribute(self, "DRAWTEXTORIENTATION", .{});
    }

    pub fn setDrawTextOrientation(self: *Self, arg: f64) void {
        interop.setDoubleAttribute(self, "DRAWTEXTORIENTATION", .{}, arg);
    }

    pub fn getDrawBgColor(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "DRAWBGCOLOR", .{});
    }

    pub fn setDrawBgColor(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "DRAWBGCOLOR", .{}, rgb);
    }

    ///
    /// VISIBLECOLUMNS: Defines the number of visible columns for the Natural Size,
    /// this means that will act also as minimum number of visible columns.
    /// It uses a wider character size then the one used for the SIZE attribute so
    /// strings will fit better without the need of extra columns.
    /// Set this attribute to speed Natural Size computation for very large lists.
    pub fn getVisibleColumns(self: *Self) i32 {
        return interop.getIntAttribute(self, "VISIBLECOLUMNS", .{});
    }

    ///
    /// VISIBLECOLUMNS: Defines the number of visible columns for the Natural Size,
    /// this means that will act also as minimum number of visible columns.
    /// It uses a wider character size then the one used for the SIZE attribute so
    /// strings will fit better without the need of extra columns.
    /// Set this attribute to speed Natural Size computation for very large lists.
    pub fn setVisibleColumns(self: *Self, arg: ?i32) void {
        if (arg == null) {
            interop.setStrAttribute(self, "VISIBLECOLUMNS", .{}, null);
        } else {
            interop.setIntAttribute(self, "VISIBLECOLUMNS", .{}, arg.?);
        }
    }

    pub fn getSbImageTopHighlight(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "SB_IMAGETOPHIGHLIGHT", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn setSbImageTopHighlight(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "SB_IMAGETOPHIGHLIGHT", .{}, arg);
    }

    pub fn setSbImageTopHighlightHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "SB_IMAGETOPHIGHLIGHT", .{}, arg);
    }

    ///
    /// APPENDITEM (write-only): inserts an item after the last item.
    /// Ignored if set before map.
    pub fn appendItem(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "APPENDITEM", .{}, arg);
    }

    pub fn getName(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "NAME", .{});
    }

    pub fn setName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "NAME", .{}, arg);
    }

    pub fn getBackingStore(self: *Self) bool {
        return interop.getBoolAttribute(self, "BACKINGSTORE", .{});
    }

    pub fn setBackingStore(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "BACKINGSTORE", .{}, arg);
    }

    pub fn getDrawDriver(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "DRAWDRIVER", .{});
    }

    pub fn getYAutoHide(self: *Self) bool {
        return interop.getBoolAttribute(self, "YAUTOHIDE", .{});
    }

    pub fn getDrawStyle(self: *Self) ?DrawStyle {
        var ret = interop.getStrAttribute(self, "DRAWSTYLE", .{});

        if (std.ascii.eqlIgnoreCase("FILL", ret)) return .Fill;
        if (std.ascii.eqlIgnoreCase("STROKE_DASH", ret)) return .StrokeDash;
        if (std.ascii.eqlIgnoreCase("STROKE_DOT", ret)) return .StrokeDot;
        if (std.ascii.eqlIgnoreCase("STROKE_DASH_DOT", ret)) return .StrokeDashDot;
        if (std.ascii.eqlIgnoreCase("STROKE_DASH_DOT_DOT", ret)) return .StrokeDashDotdot;
        if (std.ascii.eqlIgnoreCase("DRAW_STROKE", ret)) return .DrawStroke;
        return null;
    }

    pub fn setDrawStyle(self: *Self, arg: ?DrawStyle) void {
        if (arg) |value| switch (value) {
            .Fill => interop.setStrAttribute(self, "DRAWSTYLE", .{}, "FILL"),
            .StrokeDash => interop.setStrAttribute(self, "DRAWSTYLE", .{}, "STROKE_DASH"),
            .StrokeDot => interop.setStrAttribute(self, "DRAWSTYLE", .{}, "STROKE_DOT"),
            .StrokeDashDot => interop.setStrAttribute(self, "DRAWSTYLE", .{}, "STROKE_DASH_DOT"),
            .StrokeDashDotdot => interop.setStrAttribute(self, "DRAWSTYLE", .{}, "STROKE_DASH_DOT_DOT"),
            .DrawStroke => interop.setStrAttribute(self, "DRAWSTYLE", .{}, "DRAW_STROKE"),
        } else {
            interop.clearAttribute(self, "DRAWSTYLE", .{});
        }
    }

    ///
    /// VALUE (non inheritable): Depends on the selection mode: MULTIPLE=YES:
    /// Sequence of '+' and '-' symbols indicating the state of each item.
    /// When setting this value, the user must provide the same amount of '+' and
    /// '-' symbols as the amount of items in the list.
    /// It can use ' ' (space) or another character so the current selection on
    /// that item will remain the same (since 3.28).
    /// MULTIPLE=NO: Integer number representing the selected item in the list
    /// (begins at 1).
    /// It returns NULL if there is no selected item.
    /// For both cases, when setting NULL all items are deselected.
    /// The non changed items marked with 'x' are simulated internally by IUP in
    /// all systems.
    /// If you add or remove items to/from the list and you count on the 'x'
    /// values, then after adding/removing items set the VALUE attribute to ensure
    /// proper 'x' values.
    pub fn getValue(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "VALUE", .{});
    }

    ///
    /// VALUE (non inheritable): Depends on the selection mode: MULTIPLE=YES:
    /// Sequence of '+' and '-' symbols indicating the state of each item.
    /// When setting this value, the user must provide the same amount of '+' and
    /// '-' symbols as the amount of items in the list.
    /// It can use ' ' (space) or another character so the current selection on
    /// that item will remain the same (since 3.28).
    /// MULTIPLE=NO: Integer number representing the selected item in the list
    /// (begins at 1).
    /// It returns NULL if there is no selected item.
    /// For both cases, when setting NULL all items are deselected.
    /// The non changed items marked with 'x' are simulated internally by IUP in
    /// all systems.
    /// If you add or remove items to/from the list and you count on the 'x'
    /// values, then after adding/removing items set the VALUE attribute to ensure
    /// proper 'x' values.
    pub fn setValue(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "VALUE", .{}, arg);
    }

    ///
    /// BACKIMAGEZOOM (non inheritable): if set the back image will be zoomed to
    /// occupy the full background.
    /// Aspect ratio is NOT preserved.
    /// Can be Yes or No.
    /// Default: No.
    pub fn getBackImageZoom(self: *Self) bool {
        return interop.getBoolAttribute(self, "BACKIMAGEZOOM", .{});
    }

    ///
    /// BACKIMAGEZOOM (non inheritable): if set the back image will be zoomed to
    /// occupy the full background.
    /// Aspect ratio is NOT preserved.
    /// Can be Yes or No.
    /// Default: No.
    pub fn setBackImageZoom(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "BACKIMAGEZOOM", .{}, arg);
    }

    pub fn getSbImageLeftHighlight(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "SB_IMAGELEFTHIGHLIGHT", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn setSbImageLeftHighlight(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "SB_IMAGELEFTHIGHLIGHT", .{}, arg);
    }

    pub fn setSbImageLeftHighlightHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "SB_IMAGELEFTHIGHLIGHT", .{}, arg);
    }

    ///
    /// CPADDING: same as PADDING but using the units of the SIZE attribute.
    /// It will actually set the PADDING attribute.
    /// (since 3.29)
    pub fn getCPadding(self: *Self) Size {
        var str = interop.getStrAttribute(self, "CPADDING", .{});
        return Size.parse(str);
    }

    ///
    /// CPADDING: same as PADDING but using the units of the SIZE attribute.
    /// It will actually set the PADDING attribute.
    /// (since 3.29)
    pub fn setCPadding(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "CPADDING", .{}, value);
    }

    ///
    /// FITTOBACKIMAGE (non inheritable): enable the natural size to be computed
    /// from the BACKIMAGE.
    /// If BACKIMAGE is not defined will be ignored.
    /// Can be Yes or No.
    /// Default: No.
    pub fn getFitToBackImage(self: *Self) bool {
        return interop.getBoolAttribute(self, "FITTOBACKIMAGE", .{});
    }

    ///
    /// FITTOBACKIMAGE (non inheritable): enable the natural size to be computed
    /// from the BACKIMAGE.
    /// If BACKIMAGE is not defined will be ignored.
    /// Can be Yes or No.
    /// Default: No.
    pub fn setFitToBackImage(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "FITTOBACKIMAGE", .{}, arg);
    }

    pub fn getActive(self: *Self) bool {
        return interop.getBoolAttribute(self, "ACTIVE", .{});
    }

    pub fn setActive(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "ACTIVE", .{}, arg);
    }

    pub fn getTipVisible(self: *Self) bool {
        return interop.getBoolAttribute(self, "TIPVISIBLE", .{});
    }

    pub fn setTipVisible(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "TIPVISIBLE", .{}, arg);
    }

    ///
    /// ICONSPACING (non inheritable): spacing between the image and the text.
    /// Default: "2".
    pub fn getIconSpacing(self: *Self) i32 {
        return interop.getIntAttribute(self, "ICONSPACING", .{});
    }

    ///
    /// ICONSPACING (non inheritable): spacing between the image and the text.
    /// Default: "2".
    pub fn setIconSpacing(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "ICONSPACING", .{}, arg);
    }

    pub fn getYMax(self: *Self) i32 {
        return interop.getIntAttribute(self, "YMAX", .{});
    }

    pub fn setYMax(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "YMAX", .{}, arg);
    }

    ///
    /// BACKIMAGE (non inheritable): image name to be used as background.
    /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
    /// See also IupImage.
    pub fn getBackImage(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "BACKIMAGE", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    ///
    /// BACKIMAGE (non inheritable): image name to be used as background.
    /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
    /// See also IupImage.
    pub fn setBackImage(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "BACKIMAGE", .{}, arg);
    }

    pub fn setBackImageHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "BACKIMAGE", .{}, arg);
    }

    pub fn getSbImageBottom(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "SB_IMAGEBOTTOM", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn setSbImageBottom(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "SB_IMAGEBOTTOM", .{}, arg);
    }

    pub fn setSbImageBottomHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "SB_IMAGEBOTTOM", .{}, arg);
    }

    pub fn getSbImageBottomInactive(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "SB_IMAGEBOTTOMINACTIVE", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn setSbImageBottomInactive(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "SB_IMAGEBOTTOMINACTIVE", .{}, arg);
    }

    pub fn setSbImageBottomInactiveHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "SB_IMAGEBOTTOMINACTIVE", .{}, arg);
    }

    pub fn getExpandWeight(self: *Self) f64 {
        return interop.getDoubleAttribute(self, "EXPANDWEIGHT", .{});
    }

    pub fn setExpandWeight(self: *Self, arg: f64) void {
        interop.setDoubleAttribute(self, "EXPANDWEIGHT", .{}, arg);
    }

    pub fn getMinSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "MINSIZE", .{});
        return Size.parse(str);
    }

    pub fn setMinSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "MINSIZE", .{}, value);
    }

    pub fn getArrowImages(self: *Self) i32 {
        return interop.getIntAttribute(self, "ARROWIMAGES", .{});
    }

    pub fn setArrowImages(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "ARROWIMAGES", .{}, arg);
    }

    pub fn getNTheme(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "NTHEME", .{});
    }

    pub fn setNTheme(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "NTHEME", .{}, arg);
    }

    pub fn getItems(self: *Self, index: i32) [:0]const u8 {
        return interop.getStrAttribute(self, "IDVALUE", .{index});
    }

    pub fn setItems(self: *Self, index: i32, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "IDVALUE", .{index}, arg);
    }

    pub fn getCharSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "CHARSIZE", .{});
        return Size.parse(str);
    }

    ///
    /// IMAGEPOSITION (non inheritable): Position of the image relative to the text
    /// when both are displayed.
    /// Can be: LEFT, RIGHT, TOP, BOTTOM.
    /// Default: LEFT.
    pub fn getImagePosition(self: *Self) ?ImagePosition {
        var ret = interop.getStrAttribute(self, "IMAGEPOSITION", .{});

        if (std.ascii.eqlIgnoreCase("LEFT", ret)) return .Left;
        if (std.ascii.eqlIgnoreCase("RIGHT", ret)) return .Right;
        if (std.ascii.eqlIgnoreCase("BOTTOM", ret)) return .Bottom;
        if (std.ascii.eqlIgnoreCase("TOP", ret)) return .Top;
        return null;
    }

    ///
    /// IMAGEPOSITION (non inheritable): Position of the image relative to the text
    /// when both are displayed.
    /// Can be: LEFT, RIGHT, TOP, BOTTOM.
    /// Default: LEFT.
    pub fn setImagePosition(self: *Self, arg: ?ImagePosition) void {
        if (arg) |value| switch (value) {
            .Left => interop.setStrAttribute(self, "IMAGEPOSITION", .{}, "LEFT"),
            .Right => interop.setStrAttribute(self, "IMAGEPOSITION", .{}, "RIGHT"),
            .Bottom => interop.setStrAttribute(self, "IMAGEPOSITION", .{}, "BOTTOM"),
            .Top => interop.setStrAttribute(self, "IMAGEPOSITION", .{}, "TOP"),
        } else {
            interop.clearAttribute(self, "IMAGEPOSITION", .{});
        }
    }

    pub fn getDragTypes(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "DRAGTYPES", .{});
    }

    pub fn setDragTypes(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "DRAGTYPES", .{}, arg);
    }

    pub fn getWheelDropFocus(self: *Self) bool {
        return interop.getBoolAttribute(self, "WHEELDROPFOCUS", .{});
    }

    pub fn setWheelDropFocus(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "WHEELDROPFOCUS", .{}, arg);
    }

    ///
    /// BORDERWIDTH: line width used for the internal border.
    /// Default: "0".
    /// The internal borders are hidden by simply setting this value to 0.
    /// It is drawn inside the canvas, so inside the scrollbars.
    pub fn getBorderWidth(self: *Self) i32 {
        return interop.getIntAttribute(self, "BORDERWIDTH", .{});
    }

    ///
    /// BORDERWIDTH: line width used for the internal border.
    /// Default: "0".
    /// The internal borders are hidden by simply setting this value to 0.
    /// It is drawn inside the canvas, so inside the scrollbars.
    pub fn setBorderWidth(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "BORDERWIDTH", .{}, arg);
    }

    pub fn getFontStyle(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "FONTSTYLE", .{});
    }

    pub fn setFontStyle(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "FONTSTYLE", .{}, arg);
    }

    ///
    /// TEXTALIGNMENT (non inheritable): Horizontal text alignment for multiple lines.
    /// Can be: ALEFT, ARIGHT or ACENTER.
    /// Default: ALEFT.
    pub fn getTextAlignment(self: *Self) ?TextAlignment {
        var ret = interop.getStrAttribute(self, "TEXTALIGNMENT", .{});

        if (std.ascii.eqlIgnoreCase("ARIGHT", ret)) return .ARight;
        if (std.ascii.eqlIgnoreCase("ALEFT", ret)) return .ALeft;
        if (std.ascii.eqlIgnoreCase("ACENTER", ret)) return .ACenter;
        return null;
    }

    ///
    /// TEXTALIGNMENT (non inheritable): Horizontal text alignment for multiple lines.
    /// Can be: ALEFT, ARIGHT or ACENTER.
    /// Default: ALEFT.
    pub fn setTextAlignment(self: *Self, arg: ?TextAlignment) void {
        if (arg) |value| switch (value) {
            .ARight => interop.setStrAttribute(self, "TEXTALIGNMENT", .{}, "ARIGHT"),
            .ALeft => interop.setStrAttribute(self, "TEXTALIGNMENT", .{}, "ALEFT"),
            .ACenter => interop.setStrAttribute(self, "TEXTALIGNMENT", .{}, "ACENTER"),
        } else {
            interop.clearAttribute(self, "TEXTALIGNMENT", .{});
        }
    }

    pub fn getTouch(self: *Self) bool {
        return interop.getBoolAttribute(self, "TOUCH", .{});
    }

    pub fn setTouch(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "TOUCH", .{}, arg);
    }

    pub fn getSbImageTopInactive(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "SB_IMAGETOPINACTIVE", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn setSbImageTopInactive(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "SB_IMAGETOPINACTIVE", .{}, arg);
    }

    pub fn setSbImageTopInactiveHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "SB_IMAGETOPINACTIVE", .{}, arg);
    }

    pub fn getSbImageRight(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "SB_IMAGERIGHT", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn setSbImageRight(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "SB_IMAGERIGHT", .{}, arg);
    }

    pub fn setSbImageRightHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "SB_IMAGERIGHT", .{}, arg);
    }

    ///
    /// TEXTWRAP (non inheritable): For single line texts if the text is larger
    /// than its box the line will be automatically broken in multiple lines.
    /// Notice that this is done internally by the system, the element natural size
    /// will still use only a single line.
    /// For the remaining lines to be visible the element should use
    /// EXPAND=VERTICAL or set a SIZE/RASTERSIZE with enough height for the wrapped lines.
    pub fn getTextWrap(self: *Self) bool {
        return interop.getBoolAttribute(self, "TEXTWRAP", .{});
    }

    ///
    /// TEXTWRAP (non inheritable): For single line texts if the text is larger
    /// than its box the line will be automatically broken in multiple lines.
    /// Notice that this is done internally by the system, the element natural size
    /// will still use only a single line.
    /// For the remaining lines to be visible the element should use
    /// EXPAND=VERTICAL or set a SIZE/RASTERSIZE with enough height for the wrapped lines.
    pub fn setTextWrap(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "TEXTWRAP", .{}, arg);
    }

    pub fn getSbImageTopPress(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "SB_IMAGETOPPRESS", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn setSbImageTopPress(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "SB_IMAGETOPPRESS", .{}, arg);
    }

    pub fn setSbImageTopPressHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "SB_IMAGETOPPRESS", .{}, arg);
    }

    pub fn getFont(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "FONT", .{});
    }

    pub fn setFont(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "FONT", .{}, arg);
    }

    pub fn getMdiClient(self: *Self) bool {
        return interop.getBoolAttribute(self, "MDICLIENT", .{});
    }

    pub fn setMdiClient(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "MDICLIENT", .{}, arg);
    }

    pub fn getMdiMenu(self: *Self) ?*iup.Menu {
        if (interop.getHandleAttribute(self, "MDIMENU", .{})) |handle| {
            return @ptrCast(*iup.Menu, handle);
        } else {
            return null;
        }
    }

    pub fn setMdiMenu(self: *Self, arg: *iup.Menu) void {
        interop.setHandleAttribute(self, "MDIMENU", .{}, arg);
    }

    pub fn setMdiMenuHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "MDIMENU", .{}, arg);
    }

    ///
    /// TABIMAGEn (non inheritable): image name to be used in the respective tab.
    /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
    /// n starts at 0.
    /// See also IupImage.
    /// In Motif, the image is shown only if TABTITLEn is NULL.
    /// In Windows and Motif set the BGCOLOR attribute before setting the image.
    /// When set after map will update the TABIMAGE attribute on the respective
    /// child (since 3.10).
    /// (since 3.0).
    /// TABIMAGE (non inheritable) (at children only): Same as TABIMAGEn but set in
    /// each child.
    /// Works only if set before the child is added to the tabs.
    pub fn getTabImage(self: *Self, index: i32) ?iup.Element {
        if (interop.getHandleAttribute(self, "TABIMAGE", .{index})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    ///
    /// TABIMAGEn (non inheritable): image name to be used in the respective tab.
    /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
    /// n starts at 0.
    /// See also IupImage.
    /// In Motif, the image is shown only if TABTITLEn is NULL.
    /// In Windows and Motif set the BGCOLOR attribute before setting the image.
    /// When set after map will update the TABIMAGE attribute on the respective
    /// child (since 3.10).
    /// (since 3.0).
    /// TABIMAGE (non inheritable) (at children only): Same as TABIMAGEn but set in
    /// each child.
    /// Works only if set before the child is added to the tabs.
    pub fn setTabImage(self: *Self, index: i32, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "TABIMAGE", .{index}, arg);
    }

    pub fn setTabImageHandleName(self: *Self, index: i32, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TABIMAGE", .{index}, arg);
    }

    ///
    /// TABTITLEn (non inheritable): Contains the text to be shown in the
    /// respective tab title.
    /// n starts at 0.
    /// If this value is NULL, it will remain empty.
    /// The "&" character can be used to define a mnemonic, the next character will
    /// be used as key.
    /// Use "&&" to show the "&" character instead on defining a mnemonic.
    /// The button can be activated from any control in the dialog using the
    /// "Alt+key" combination.
    /// (mnemonic support since 3.3).
    /// When set after map will update the TABTITLE attribute on the respective
    /// child (since 3.10).
    /// (since 3.0).
    /// TABTITLE (non inheritable) (at children only): Same as TABTITLEn but set in
    /// each child.
    /// Works only if set before the child is added to the tabs.
    pub fn getTabTitle(self: *Self, index: i32) [:0]const u8 {
        return interop.getStrAttribute(self, "TABTITLE", .{index});
    }

    ///
    /// TABTITLEn (non inheritable): Contains the text to be shown in the
    /// respective tab title.
    /// n starts at 0.
    /// If this value is NULL, it will remain empty.
    /// The "&" character can be used to define a mnemonic, the next character will
    /// be used as key.
    /// Use "&&" to show the "&" character instead on defining a mnemonic.
    /// The button can be activated from any control in the dialog using the
    /// "Alt+key" combination.
    /// (mnemonic support since 3.3).
    /// When set after map will update the TABTITLE attribute on the respective
    /// child (since 3.10).
    /// (since 3.0).
    /// TABTITLE (non inheritable) (at children only): Same as TABTITLEn but set in
    /// each child.
    /// Works only if set before the child is added to the tabs.
    pub fn setTabTitle(self: *Self, index: i32, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TABTITLE", .{index}, arg);
    }

    ///
    /// SCROLL_CB SCROLL_CB Called when some manipulation is made to the scrollbar.
    /// The canvas is automatically redrawn only if this callback is NOT defined.
    /// (GTK 2.8) Also the POSX and POSY values will not be correctly updated for
    /// older GTK versions.
    /// In Ubuntu, when liboverlay-scrollbar is enabled (the new tiny auto-hide
    /// scrollbar) only the IUP_SBPOSV and IUP_SBPOSH codes are used.
    /// Callback int function(Ihandle *ih, int op, float posx, float posy); [in C]
    /// ih:scroll_cb(op, posx, posy: number) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// op: indicates the operation performed on the scrollbar.
    /// If the manipulation was made on the vertical scrollbar, it can have the
    /// following values: IUP_SBUP - line up IUP_SBDN - line down IUP_SBPGUP - page
    /// up IUP_SBPGDN - page down IUP_SBPOSV - vertical positioning IUP_SBDRAGV -
    /// vertical drag If it was on the horizontal scrollbar, the following values
    /// are valid: IUP_SBLEFT - column left IUP_SBRIGHT - column right IUP_SBPGLEFT
    /// - page left IUP_SBPGRIGHT - page right IUP_SBPOSH - horizontal positioning
    /// IUP_SBDRAGH - horizontal drag posx, posy: the same as the ACTION canvas
    /// callback (corresponding to the values of attributes POSX and POSY).
    /// Notes IUP_SBDRAGH and IUP_SBDRAGV are not supported in GTK.
    /// During drag IUP_SBPOSH and IUP_SBPOSV are used.
    /// In Windows, after a drag when mouse is released IUP_SBPOSH or IUP_SBPOSV
    /// are called.
    /// Affects IupCanvas, IupGLCanvas, SCROLLBAR
    pub fn setScrollCallback(self: *Self, callback: ?*const OnScrollFn) void {
        const Handler = CallbackHandler(Self, OnScrollFn, "SCROLL_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setFocusCallback(self: *Self, callback: ?*const OnFocusFn) void {
        const Handler = CallbackHandler(Self, OnFocusFn, "FOCUS_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// WOM_CB WOM_CB Action generated when an audio device receives an event.
    /// [Windows Only] Callback int function(Ihandle *ih, int state); [in C]
    /// ih:wom_cb(state: number) -> (ret: number) [in Lua] ih: identifies the
    /// element that activated the event.
    /// state: can be opening=1, done=0, or closing=-1.
    /// Notes This callback is used to syncronize video playback with audio.
    /// It is sent when the audio device: Message Description opening is opened by
    /// using the waveOutOpen function.
    /// done is finished with a data block sent by using the waveOutWrite function.
    /// closing is closed by using the waveOutClose function.
    /// You must use the HWND attribute when calling waveOutOpen in the dwCallback
    /// parameter and set fdwOpen to CALLBACK_WINDOW.
    /// Affects IupDialog, IupCanvas, IupGLCanvas
    pub fn setWomCallback(self: *Self, callback: ?*const OnWomFn) void {
        const Handler = CallbackHandler(Self, OnWomFn, "WOM_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// K_ANY K_ANY Action generated when a keyboard event occurs.
    /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
    /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
    /// c: identifier of typed key.
    /// Please refer to the Keyboard Codes table for a list of possible values.
    /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
    /// the control and not propagated.
    /// If returns IUP_CONTINUE, the key will be processed and the event will be
    /// propagated to the parent of the element receiving it, this is the default behavior.
    /// If returns IUP_DEFAULT the key is processed but it is not propagated.
    /// IUP_CLOSE will be processed.
    /// Notes Keyboard callbacks depend on the keyboard usage of the control with
    /// the focus.
    /// So if you return IUP_IGNORE the control will usually not process the key.
    /// But be aware that sometimes the control process the key in another event so
    /// even returning IUP_IGNORE the key can get processed.
    /// Although it will not be propagated.
    /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
    /// the IUP_CONTINUE return value to work while the control is in focus.
    /// If the callback does not exists it is automatically propagated to the
    /// parent of the element.
    /// K_* callbacks All defined keys are also callbacks of any element, called
    /// when the respective key is activated.
    /// For example: "K_cC" is also a callback activated when the user press
    /// Ctrl+C, when the focus is at the element or at a children with focus.
    /// This is the way an application can create shortcut keys, also called hot keys.
    /// These callbacks are not available in IupLua.
    /// Affects All elements with keyboard interaction.
    pub fn setKAnyCallback(self: *Self, callback: ?*const OnKAnyFn) void {
        const Handler = CallbackHandler(Self, OnKAnyFn, "K_ANY");
        Handler.setCallback(self, callback);
    }

    pub fn setFlatFocusCallback(self: *Self, callback: ?*const OnFlatFocusFn) void {
        const Handler = CallbackHandler(Self, OnFlatFocusFn, "FLAT_FOCUS_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
    /// In Motif is also activated by the Help button in some workstations keyboard.
    /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Returns: IUP_CLOSE will be processed.
    /// Affects All elements with user interaction.
    pub fn setHelpCallback(self: *Self, callback: ?*const OnHelpFn) void {
        const Handler = CallbackHandler(Self, OnHelpFn, "HELP_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDropMotionCallback(self: *Self, callback: ?*const OnDropMotionFn) void {
        const Handler = CallbackHandler(Self, OnDropMotionFn, "DROPMOTION_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setFlatLeaveWindowCallback(self: *Self, callback: ?*const OnFlatLeaveWindowFn) void {
        const Handler = CallbackHandler(Self, OnFlatLeaveWindowFn, "FLAT_LEAVEWINDOW_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// KEYPRESS_CB KEYPRESS_CB Action generated when a key is pressed or released.
    /// If the key is pressed and held several calls will occur.
    /// It is called after the callback K_ANY is processed.
    /// Callback int function(Ihandle *ih, int c, int press); [in C]
    /// ih:keypress_cb(c, press: number) -> (ret: number) [in Lua] ih: identifier
    /// of the element that activated the event.
    /// c: identifier of typed key.
    /// Please refer to the Keyboard Codes table for a list of possible values.
    /// press: 1 is the user pressed the key or 0 otherwise.
    /// Returns: If IUP_IGNORE is returned the key is ignored by the system.
    /// IUP_CLOSE will be processed.
    /// Affects IupCanvas
    pub fn setKeyPressCallback(self: *Self, callback: ?*const OnKeyPressFn) void {
        const Handler = CallbackHandler(Self, OnKeyPressFn, "KEYPRESS_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragEndCallback(self: *Self, callback: ?*const OnDragEndFn) void {
        const Handler = CallbackHandler(Self, OnDragEndFn, "DRAGEND_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragBeginCallback(self: *Self, callback: ?*const OnDragBeginFn) void {
        const Handler = CallbackHandler(Self, OnDragBeginFn, "DRAGBEGIN_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// ACTION ACTION Action generated when the element is activated.
    /// Affects each element differently.
    /// Callback int function(Ihandle *ih); [in C] ih:action() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// In some elements, this callback may receive more parameters, apart from ih.
    /// Please refer to each element's documentation.
    /// Affects IupButton, IupItem, IupList, IupText, IupCanvas, IupMultiline,
    /// IupToggle
    pub fn setActionCallback(self: *Self, callback: ?*const OnActionFn) void {
        const Handler = CallbackHandler(Self, OnActionFn, "ACTION");
        Handler.setCallback(self, callback);
    }

    ///
    /// MOTION_CB MOTION_CB Action generated when the mouse moves.
    /// Callback int function(Ihandle *ih, int x, int y, char *status); [in C]
    /// ih:motion_cb(x, y: number, status: string) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of mouse buttons and certain keyboard keys at the moment the
    /// event was generated.
    /// The same macros used for BUTTON_CB can be used for this status.
    /// Notes Between press and release all mouse events are redirected only to
    /// this control, even if the cursor moves outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupGLCanvas
    pub fn setMotionCallback(self: *Self, callback: ?*const OnMotionFn) void {
        const Handler = CallbackHandler(Self, OnMotionFn, "MOTION_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// WHEEL_CB WHEEL_CB Action generated when the mouse wheel is rotated.
    /// If this callback is not defined the wheel will automatically scroll the
    /// canvas in the vertical direction by some lines, the SCROLL_CB callback if
    /// defined will be called with the IUP_SBDRAGV operation.
    /// Callback int function(Ihandle *ih, float delta, int x, int y, char
    /// *status); [in C] ih:wheel_cb(delta, x, y: number, status: string) -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// delta: the amount the wheel was rotated in notches.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of mouse buttons and certain keyboard keys at the moment the
    /// event was generated.
    /// The same macros used for BUTTON_CB can be used for this status.
    /// Notes In Motif and GTK delta is always 1 or -1.
    /// In Windows is some situations delta can reach the value of two.
    /// In the future with more precise wheels this increment can be changed.
    /// Affects IupCanvas, IupGLCanvas
    pub fn setWheelCallback(self: *Self, callback: ?*const OnWheelFn) void {
        const Handler = CallbackHandler(Self, OnWheelFn, "WHEEL_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setMapCallback(self: *Self, callback: ?*const OnMapFn) void {
        const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// DRAGDROP_CB: Action generated when an internal drag and drop is executed.
    /// Only active if SHOWDRAGDROP=YES.
    /// int function(Ihandle *ih, int drag_id, int drop_id, int isshift, int
    /// iscontrol); [in C] ih:dragdrop_cb(drag_id, drop_id, isshift, iscontrol:
    /// number) -> (ret: number) [in Lua]
    pub fn setDragDropCallback(self: *Self, callback: ?*const OnDragDropFn) void {
        const Handler = CallbackHandler(Self, OnDragDropFn, "DRAGDROP_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setFlatButtonCallback(self: *Self, callback: ?*const OnFlatButtonFn) void {
        const Handler = CallbackHandler(Self, OnFlatButtonFn, "FLAT_BUTTON_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also LEAVEWINDOW_CB
    pub fn setEnterWindowCallback(self: *Self, callback: ?*const OnEnterWindowFn) void {
        const Handler = CallbackHandler(Self, OnEnterWindowFn, "ENTERWINDOW_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
    /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Notes If the dialog is visible then it is hidden before it is destroyed.
    /// The callback will be called right after it is hidden.
    /// The callback will be called before all other destroy procedures.
    /// For instance, if the element has children then it is called before the
    /// children are destroyed.
    /// For language binding implementations use the callback name "LDESTROY_CB" to
    /// release memory allocated by the binding for the element.
    /// Also the callback will be called before the language callback.
    /// Affects All.
    pub fn setDestroyCallback(self: *Self, callback: ?*const OnDestroyFn) void {
        const Handler = CallbackHandler(Self, OnDestroyFn, "DESTROY_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDropDataCallback(self: *Self, callback: ?*const OnDropDataFn) void {
        const Handler = CallbackHandler(Self, OnDropDataFn, "DROPDATA_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
    /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Affects All elements with user interaction, except menus.
    /// In Windows, there are restrictions when using this callback.
    /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
    /// function calls that display or activate a window.
    /// This causes the thread to yield control and can cause the application to
    /// stop responding to messages.
    /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
    pub fn setKillFocusCallback(self: *Self, callback: ?*const OnKillFocusFn) void {
        const Handler = CallbackHandler(Self, OnKillFocusFn, "KILLFOCUS_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// DBLCLICK_CB: Action generated when the user double click an item.
    /// int function (Ihandle *ih, int item, char *text); [in
    /// C]ih:dblclick_cb(item: number, text: string) -> (ret: number) [in Lua]
    pub fn setDblClickCallback(self: *Self, callback: ?*const OnDblClickFn) void {
        const Handler = CallbackHandler(Self, OnDblClickFn, "DBLCLICK_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragDataCallback(self: *Self, callback: ?*const OnDragDataFn) void {
        const Handler = CallbackHandler(Self, OnDragDataFn, "DRAGDATA_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragDataSizeCallback(self: *Self, callback: ?*const OnDragDataSizeFn) void {
        const Handler = CallbackHandler(Self, OnDragDataSizeFn, "DRAGDATASIZE_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// DROPFILES_CB DROPFILES_CB Action called when a file is "dropped" into the control.
    /// When several files are dropped at once, the callback is called several
    /// times, once for each file.
    /// If defined after the element is mapped then the attribute DROPFILESTARGET
    /// must be set to YES.
    /// [Windows and GTK Only] (GTK 2.6) Callback int function(Ihandle *ih, const
    /// char* filename, int num, int x, int y); [in C] ih:dropfiles_cb(filename:
    /// string; num, x, y: number) -> (ret: number) [in Lua] ih: identifier of the
    /// element that activated the event.
    /// filename: Name of the dropped file.
    /// num: Number index of the dropped file.
    /// If several files are dropped, num is the index of the dropped file starting
    /// from "total-1" to "0".
    /// x: X coordinate of the point where the user released the mouse button.
    /// y: Y coordinate of the point where the user released the mouse button.
    /// Returns: If IUP_IGNORE is returned the callback will NOT be called for the
    /// next dropped files, and the processing of dropped files will be interrupted.
    /// Affects IupDialog, IupCanvas, IupGLCanvas, IupText, IupList
    pub fn setDropFilesCallback(self: *Self, callback: ?*const OnDropFilesFn) void {
        const Handler = CallbackHandler(Self, OnDropFilesFn, "DROPFILES_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// RESIZE_CB RESIZE_CB Action generated when the canvas or dialog size is changed.
    /// Callback int function(Ihandle *ih, int width, int height); [in C]
    /// ih:resize_cb(width, height: number) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// width: the width of the internal element size in pixels not considering the
    /// decorations (client size) height: the height of the internal element size
    /// in pixels not considering the decorations (client size) Notes For the
    /// dialog, this action is also generated when the dialog is mapped, after the
    /// map and before the show.
    /// When XAUTOHIDE=Yes or YAUTOHIDE=Yes, if the canvas scrollbar is
    /// hidden/shown after changing the DX or DY attributes from inside the
    /// callback, the size of the drawing area will immediately change, so the
    /// parameters with and height will be invalid.
    /// To update the parameters consult the DRAWSIZE attribute.
    /// Also activate the drawing toolkit only after updating the DX or DY attributes.
    /// Affects IupCanvas, IupGLCanvas, IupDialog
    pub fn setResizeCallback(self: *Self, callback: ?*const OnResizeFn) void {
        const Handler = CallbackHandler(Self, OnResizeFn, "RESIZE_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setUnmapCallback(self: *Self, callback: ?*const OnUnmapFn) void {
        const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// FLAT_ACTION: Action generated when the state of an item in the list is
    /// interactively changed.
    /// int function (Ihandle *ih, char *text, int item, int state); [in
    /// C]ih:action(text: string, item, state: number) -> (ret: number) [in Lua]
    pub fn setFlatActionCallback(self: *Self, callback: ?*const OnFlatActionFn) void {
        const Handler = CallbackHandler(Self, OnFlatActionFn, "FLAT_ACTION");
        Handler.setCallback(self, callback);
    }

    ///
    /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
    /// This callback is called after the KILLFOCUS_CB of the element that loosed
    /// the focus.
    /// The IupGetFocus function during the callback returns the element that
    /// loosed the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that received keyboard focus.
    /// Affects All elements with user interaction, except menus.
    /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
    pub fn setGetFocusCallback(self: *Self, callback: ?*const OnGetFocusFn) void {
        const Handler = CallbackHandler(Self, OnGetFocusFn, "GETFOCUS_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// BUTTON_CB BUTTON_CB Action generated when a mouse button is pressed or released.
    /// Callback int function(Ihandle* ih, int button, int pressed, int x, int y,
    /// char* status); [in C] ih:button_cb(button, pressed, x, y: number, status:
    /// string) -> (ret: number) [in Lua] ih: identifies the element that activated
    /// the event.
    /// button: identifies the activated mouse button: IUP_BUTTON1 - left mouse
    /// button (button 1); IUP_BUTTON2 - middle mouse button (button 2);
    /// IUP_BUTTON3 - right mouse button (button 3).
    /// pressed: indicates the state of the button: 0 - mouse button was released;
    /// 1 - mouse button was pressed.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of the mouse buttons and some keyboard keys at the moment
    /// the event is generated.
    /// The following macros must be used for verification: iup_isshift(status)
    /// iup_iscontrol(status) iup_isbutton1(status) iup_isbutton2(status)
    /// iup_isbutton3(status) iup_isbutton4(status) iup_isbutton5(status)
    /// iup_isdouble(status) iup_isalt(status) iup_issys(status) They return 1 if
    /// the respective key or button is pressed, and 0 otherwise.
    /// These macros are also available in Lua, returning a boolean.
    /// Returns: IUP_CLOSE will be processed.
    /// On some controls if IUP_IGNORE is returned the action is ignored (this is
    /// system dependent).
    /// Notes This callback can be used to customize a button behavior.
    /// For a standard button behavior use the ACTION callback of the IupButton.
    /// For a single click the callback is called twice, one for pressed=1 and one
    /// for pressed=0.
    /// Only after both calls the ACTION callback is called.
    /// In Windows, if a dialog is shown or popup in any situation there could be
    /// unpredictable results because the native system still has processing to be
    /// done even after the callback is called.
    /// A double click is preceded by two single clicks, one for pressed=1 and one
    /// for pressed=0, and followed by a press=0, all three without the double
    /// click flag set.
    /// In GTK, it is preceded by an additional two single clicks sequence.
    /// For example, for one double click all the following calls are made:
    /// BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) BUTTON_CB(but=1 (0), x=154, y=83 [
    /// 1 ]) BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1
    /// (0), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1 (1), x=154, y=83 [ 1
    /// D ]) BUTTON_CB(but=1 (0), x=154, y=83 [ 1 ]) Between press and release all
    /// mouse events are redirected only to this control, even if the cursor moves
    /// outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupButton, IupText, IupList, IupGLCanvas
    pub fn setButtonCallback(self: *Self, callback: ?*const OnButtonFn) void {
        const Handler = CallbackHandler(Self, OnButtonFn, "BUTTON_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setFlatMotionCallback(self: *Self, callback: ?*const OnFlatMotionFn) void {
        const Handler = CallbackHandler(Self, OnFlatMotionFn, "FLAT_MOTION_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// VALUECHANGED_CB: Called after the selection was interactively changed.
    /// int function(Ihandle *ih); [in C]ih:valuechanged_cb() -> (ret: number) [in
    /// Lua]
    pub fn setValueChangedCallback(self: *Self, callback: ?*const OnValueChangedFn) void {
        const Handler = CallbackHandler(Self, OnValueChangedFn, "VALUECHANGED_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// MULTISELECT_CB: Action generated when the state of an item in the multiple
    /// selection list is interactively changed.
    /// But it is called only when the interaction is over.
    /// int function (Ihandle *ih, char *value); [in C]ih:multiselect_cb(value:
    /// string) -> (ret: number) [in Lua]
    pub fn setMultiSelectCallback(self: *Self, callback: ?*const OnMultiSelectFn) void {
        const Handler = CallbackHandler(Self, OnMultiSelectFn, "MULTISELECT_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setLDestroyCallback(self: *Self, callback: ?*const OnLDestroyFn) void {
        const Handler = CallbackHandler(Self, OnLDestroyFn, "LDESTROY_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also ENTERWINDOW_CB
    pub fn setLeaveWindowCallback(self: *Self, callback: ?*const OnLeaveWindowFn) void {
        const Handler = CallbackHandler(Self, OnLeaveWindowFn, "LEAVEWINDOW_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setPostMessageCallback(self: *Self, callback: ?*const OnPostMessageFn) void {
        const Handler = CallbackHandler(Self, OnPostMessageFn, "POSTMESSAGE_CB");
        Handler.setCallback(self, callback);
    }
};

test "FlatList FgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setFgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getFgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatList HandleName" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setHandleName("Hello").unwrap());
    defer item.deinit();

    var ret = item.getHandleName();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatList TipBgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setTipBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTipBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatList XMin" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setXMin(42).unwrap());
    defer item.deinit();

    var ret = item.getXMin();

    try std.testing.expect(ret == 42);
}

test "FlatList TipIcon" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setTipIcon("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTipIcon();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatList ItemTip" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setItemTip(0, "Hello").unwrap());
    defer item.deinit();

    var ret = item.getItemTip(0);

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatList MaxSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setMaxSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMaxSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "FlatList DrawTextWrap" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDrawTextWrap(true).unwrap());
    defer item.deinit();

    var ret = item.getDrawTextWrap();

    try std.testing.expect(ret == true);
}

test "FlatList FocusFeedback" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setFocusFeedback(true).unwrap());
    defer item.deinit();

    var ret = item.getFocusFeedback();

    try std.testing.expect(ret == true);
}

test "FlatList Position" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setPosition(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getPosition();

    try std.testing.expect(ret.x == 9 and ret.y == 10);
}

test "FlatList DropFilesTarget" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDropFilesTarget(true).unwrap());
    defer item.deinit();

    var ret = item.getDropFilesTarget();

    try std.testing.expect(ret == true);
}

test "FlatList DrawTextAlignment" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDrawTextAlignment(.ACenter).unwrap());
    defer item.deinit();

    var ret = item.getDrawTextAlignment();

    try std.testing.expect(ret != null and ret.? == .ACenter);
}

test "FlatList Tip" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setTip("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTip();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatList DrawTextLayoutCenter" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDrawTextLayoutCenter(true).unwrap());
    defer item.deinit();

    var ret = item.getDrawTextLayoutCenter();

    try std.testing.expect(ret == true);
}

test "FlatList CanFocus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setCanFocus(true).unwrap());
    defer item.deinit();

    var ret = item.getCanFocus();

    try std.testing.expect(ret == true);
}

test "FlatList DragSourceMove" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDragSourceMove(true).unwrap());
    defer item.deinit();

    var ret = item.getDragSourceMove();

    try std.testing.expect(ret == true);
}

test "FlatList PsColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setPsColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getPsColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatList Visible" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setVisible(true).unwrap());
    defer item.deinit();

    var ret = item.getVisible();

    try std.testing.expect(ret == true);
}

test "FlatList LineX" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setLineX(3.14).unwrap());
    defer item.deinit();

    var ret = item.getLineX();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "FlatList LineY" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setLineY(3.14).unwrap());
    defer item.deinit();

    var ret = item.getLineY();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "FlatList DrawLineWidth" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDrawLineWidth(42).unwrap());
    defer item.deinit();

    var ret = item.getDrawLineWidth();

    try std.testing.expect(ret == 42);
}

test "FlatList DragDrop" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDragDrop(true).unwrap());
    defer item.deinit();

    var ret = item.getDragDrop();

    try std.testing.expect(ret == true);
}

test "FlatList Theme" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setTheme("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTheme();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatList Expand" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setExpand(.Yes).unwrap());
    defer item.deinit();

    var ret = item.getExpand();

    try std.testing.expect(ret != null and ret.? == .Yes);
}

test "FlatList VisibleLines" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setVisibleLines(42).unwrap());
    defer item.deinit();

    var ret = item.getVisibleLines();

    try std.testing.expect(ret == 42);
}

test "FlatList DrawFont" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDrawFont("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDrawFont();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatList Size" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "FlatList Padding" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setPadding(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getPadding();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "FlatList ValueString" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setValueString("Hello").unwrap());
    defer item.deinit();

    var ret = item.getValueString();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatList PosX" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setPosX(3.14).unwrap());
    defer item.deinit();

    var ret = item.getPosX();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "FlatList PosY" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setPosY(3.14).unwrap());
    defer item.deinit();

    var ret = item.getPosY();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "FlatList HlColorAlpha" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setHlColorAlpha(42).unwrap());
    defer item.deinit();

    var ret = item.getHlColorAlpha();

    try std.testing.expect(ret == 42);
}

test "FlatList TipMarkup" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setTipMarkup("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTipMarkup();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatList YMin" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setYMin(42).unwrap());
    defer item.deinit();

    var ret = item.getYMin();

    try std.testing.expect(ret == 42);
}

test "FlatList TextEllipsis" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setTextEllipsis(true).unwrap());
    defer item.deinit();

    var ret = item.getTextEllipsis();

    try std.testing.expect(ret == true);
}

test "FlatList DragDropList" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDragDropList(true).unwrap());
    defer item.deinit();

    var ret = item.getDragDropList();

    try std.testing.expect(ret == true);
}

test "FlatList DrawMakeInactive" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDrawMakeInactive(true).unwrap());
    defer item.deinit();

    var ret = item.getDrawMakeInactive();

    try std.testing.expect(ret == true);
}

test "FlatList FontSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setFontSize(42).unwrap());
    defer item.deinit();

    var ret = item.getFontSize();

    try std.testing.expect(ret == 42);
}

test "FlatList DropTypes" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDropTypes("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDropTypes();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatList UserSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setUserSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getUserSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "FlatList TipDelay" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setTipDelay(42).unwrap());
    defer item.deinit();

    var ret = item.getTipDelay();

    try std.testing.expect(ret == 42);
}

test "FlatList ScrollBar" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setScrollBar(true).unwrap());
    defer item.deinit();

    var ret = item.getScrollBar();

    try std.testing.expect(ret == true);
}

test "FlatList PropagateFocus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setPropagateFocus(true).unwrap());
    defer item.deinit();

    var ret = item.getPropagateFocus();

    try std.testing.expect(ret == true);
}

test "FlatList XMax" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setXMax(42).unwrap());
    defer item.deinit();

    var ret = item.getXMax();

    try std.testing.expect(ret == 42);
}

test "FlatList BgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatList ItemFontSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setItemFontSize(0, 42).unwrap());
    defer item.deinit();

    var ret = item.getItemFontSize(0);

    try std.testing.expect(ret == 42);
}

test "FlatList DropTarget" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDropTarget(true).unwrap());
    defer item.deinit();

    var ret = item.getDropTarget();

    try std.testing.expect(ret == true);
}

test "FlatList DX" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDX(3.14).unwrap());
    defer item.deinit();

    var ret = item.getDX();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "FlatList DY" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDY(3.14).unwrap());
    defer item.deinit();

    var ret = item.getDY();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "FlatList DrawTextEllipsis" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDrawTextEllipsis(true).unwrap());
    defer item.deinit();

    var ret = item.getDrawTextEllipsis();

    try std.testing.expect(ret == true);
}

test "FlatList DragSource" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDragSource(true).unwrap());
    defer item.deinit();

    var ret = item.getDragSource();

    try std.testing.expect(ret == true);
}

test "FlatList DrawTextClip" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDrawTextClip(true).unwrap());
    defer item.deinit();

    var ret = item.getDrawTextClip();

    try std.testing.expect(ret == true);
}

test "FlatList Floating" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setFloating(.Yes).unwrap());
    defer item.deinit();

    var ret = item.getFloating();

    try std.testing.expect(ret != null and ret.? == .Yes);
}

test "FlatList NormalizerGroup" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setNormalizerGroup("Hello").unwrap());
    defer item.deinit();

    var ret = item.getNormalizerGroup();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatList Spacing" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setSpacing(42).unwrap());
    defer item.deinit();

    var ret = item.getSpacing();

    try std.testing.expect(ret == 42);
}

test "FlatList RasterSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setRasterSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getRasterSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "FlatList TextPsColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setTextPsColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTextPsColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatList BorderColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setBorderColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getBorderColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatList TipFgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setTipFgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTipFgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatList CSpacing" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setCSpacing(42).unwrap());
    defer item.deinit();

    var ret = item.getCSpacing();

    try std.testing.expect(ret == 42);
}

test "FlatList HlColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setHlColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getHlColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatList FontFace" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setFontFace("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFontFace();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatList DrawColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDrawColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getDrawColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatList DrawTextOrientation" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDrawTextOrientation(3.14).unwrap());
    defer item.deinit();

    var ret = item.getDrawTextOrientation();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "FlatList DrawBgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDrawBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getDrawBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatList VisibleColumns" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setVisibleColumns(42).unwrap());
    defer item.deinit();

    var ret = item.getVisibleColumns();

    try std.testing.expect(ret == 42);
}

test "FlatList Name" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setName("Hello").unwrap());
    defer item.deinit();

    var ret = item.getName();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatList BackingStore" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setBackingStore(true).unwrap());
    defer item.deinit();

    var ret = item.getBackingStore();

    try std.testing.expect(ret == true);
}

test "FlatList DrawStyle" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDrawStyle(.Fill).unwrap());
    defer item.deinit();

    var ret = item.getDrawStyle();

    try std.testing.expect(ret != null and ret.? == .Fill);
}

test "FlatList Value" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setValue("Hello").unwrap());
    defer item.deinit();

    var ret = item.getValue();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatList BackImageZoom" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setBackImageZoom(true).unwrap());
    defer item.deinit();

    var ret = item.getBackImageZoom();

    try std.testing.expect(ret == true);
}

test "FlatList CPadding" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setCPadding(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getCPadding();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "FlatList FitToBackImage" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setFitToBackImage(true).unwrap());
    defer item.deinit();

    var ret = item.getFitToBackImage();

    try std.testing.expect(ret == true);
}

test "FlatList Active" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setActive(true).unwrap());
    defer item.deinit();

    var ret = item.getActive();

    try std.testing.expect(ret == true);
}

test "FlatList TipVisible" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setTipVisible(true).unwrap());
    defer item.deinit();

    var ret = item.getTipVisible();

    try std.testing.expect(ret == true);
}

test "FlatList IconSpacing" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setIconSpacing(42).unwrap());
    defer item.deinit();

    var ret = item.getIconSpacing();

    try std.testing.expect(ret == 42);
}

test "FlatList YMax" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setYMax(42).unwrap());
    defer item.deinit();

    var ret = item.getYMax();

    try std.testing.expect(ret == 42);
}

test "FlatList ExpandWeight" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setExpandWeight(3.14).unwrap());
    defer item.deinit();

    var ret = item.getExpandWeight();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "FlatList MinSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setMinSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMinSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "FlatList ArrowImages" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setArrowImages(42).unwrap());
    defer item.deinit();

    var ret = item.getArrowImages();

    try std.testing.expect(ret == 42);
}

test "FlatList NTheme" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setNTheme("Hello").unwrap());
    defer item.deinit();

    var ret = item.getNTheme();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatList Items" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setItems(0, "Hello").unwrap());
    defer item.deinit();

    var ret = item.getItems(0);

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatList ImagePosition" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setImagePosition(.Left).unwrap());
    defer item.deinit();

    var ret = item.getImagePosition();

    try std.testing.expect(ret != null and ret.? == .Left);
}

test "FlatList DragTypes" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setDragTypes("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDragTypes();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatList WheelDropFocus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setWheelDropFocus(true).unwrap());
    defer item.deinit();

    var ret = item.getWheelDropFocus();

    try std.testing.expect(ret == true);
}

test "FlatList BorderWidth" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setBorderWidth(42).unwrap());
    defer item.deinit();

    var ret = item.getBorderWidth();

    try std.testing.expect(ret == 42);
}

test "FlatList FontStyle" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setFontStyle("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFontStyle();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatList TextAlignment" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setTextAlignment(.ARight).unwrap());
    defer item.deinit();

    var ret = item.getTextAlignment();

    try std.testing.expect(ret != null and ret.? == .ARight);
}

test "FlatList Touch" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setTouch(true).unwrap());
    defer item.deinit();

    var ret = item.getTouch();

    try std.testing.expect(ret == true);
}

test "FlatList TextWrap" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setTextWrap(true).unwrap());
    defer item.deinit();

    var ret = item.getTextWrap();

    try std.testing.expect(ret == true);
}

test "FlatList Font" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatList.init().setFont("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFont();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}
