// This code was generated by a tool.
// IUP Metadata Code Generator
// https://github.com/batiati/IUPMetadata
//
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.

const std = @import("std");

const c = @import("../c.zig");
const iup = @import("../iup.zig");

const Impl = @import("../impl.zig").Impl;
const CallbackHandler = @import("../callback_handler.zig").CallbackHandler;

const debug = std.debug;
const trait = std.meta.trait;

const Element = iup.Element;
const Handle = iup.Handle;
const Error = iup.Error;
const ChildrenIterator = iup.ChildrenIterator;
const Size = iup.Size;
const Margin = iup.Margin;

/// 
/// Creates a native container for composing elements in hidden layers with
/// only one layer visible (just like IupZbox), but its visibility can be
/// interactively controlled.
/// The interaction is done in a line of tabs with titles and arranged
/// according to the tab type.
/// Also known as Notebook in native systems.
pub const Tabs = opaque {
    pub const CLASS_NAME = "tabs";
    const Self = @This();

    pub const OnTouchFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: i32, arg3: [:0]const u8) anyerror!void;

    /// 
    /// FOCUS_CB: Called when a child of the container gets or looses the focus.
    /// It is called only if PROPAGATEFOCUS is defined in the child.
    /// (since 3.23) int function(Ihandle *ih, int focus); [in C]ih:focus_cb(focus:
    /// number) -> (ret: number) [in Lua]
    pub const OnFocusFn = fn (self: *Self, arg0: i32) anyerror!void;

    /// 
    /// TABCHANGE_CB: Callback called when the user changes the current tab.
    /// It is not called when the current tab is programmatically changed or removed.
    /// int function(Ihandle* ih, Ihandle* new_tab, Ihandle* old_tab); [in C]
    /// ih:tabchange_cb(new_tab, old_tab: ihandle) -> (ret: number) [in Lua]
    pub const OnTabChangeFn = fn (self: *Self, arg0: iup.Element, arg1: iup.Element) anyerror!void;

    /// 
    /// K_ANY K_ANY Action generated when a keyboard event occurs.
    /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
    /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
    /// c: identifier of typed key.
    /// Please refer to the Keyboard Codes table for a list of possible values.
    /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
    /// the control and not propagated.
    /// If returns IUP_CONTINUE, the key will be processed and the event will be
    /// propagated to the parent of the element receiving it, this is the default behavior.
    /// If returns IUP_DEFAULT the key is processed but it is not propagated.
    /// IUP_CLOSE will be processed.
    /// Notes Keyboard callbacks depend on the keyboard usage of the control with
    /// the focus.
    /// So if you return IUP_IGNORE the control will usually not process the key.
    /// But be aware that sometimes the control process the key in another event so
    /// even returning IUP_IGNORE the key can get processed.
    /// Although it will not be propagated.
    /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
    /// the IUP_CONTINUE return value to work while the control is in focus.
    /// If the callback does not exists it is automatically propagated to the
    /// parent of the element.
    /// K_* callbacks All defined keys are also callbacks of any element, called
    /// when the respective key is activated.
    /// For example: "K_cC" is also a callback activated when the user press
    /// Ctrl+C, when the focus is at the element or at a children with focus.
    /// This is the way an application can create shortcut keys, also called hot keys.
    /// These callbacks are not available in IupLua.
    /// Affects All elements with keyboard interaction.
    pub const OnKAnyFn = fn (self: *Self, arg0: i32) anyerror!void;

    /// 
    /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
    /// In Motif is also activated by the Help button in some workstations keyboard.
    /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Returns: IUP_CLOSE will be processed.
    /// Affects All elements with user interaction.
    pub const OnHelpFn = fn (self: *Self) anyerror!void;

    pub const OnMultiTouchFn = fn (self: *Self, arg0: i32, arg1: *i32, arg2: *i32, arg3: *i32) anyerror!void;

    /// 
    /// RIGHTCLICK_CB: Callback called when the user clicks on some tab using the
    /// right mouse button (since 3.10).
    /// int function(Ihandle* ih, int pos); [in C] ih:rightclick_cb(pos: number) ->
    /// (ret: number) [in Lua]
    pub const OnRightClickFn = fn (self: *Self, arg0: i32) anyerror!void;

    /// 
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnMapFn = fn (self: *Self) anyerror!void;

    /// 
    /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also LEAVEWINDOW_CB
    pub const OnEnterWindowFn = fn (self: *Self) anyerror!void;

    /// 
    /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
    /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Notes If the dialog is visible then it is hidden before it is destroyed.
    /// The callback will be called right after it is hidden.
    /// The callback will be called before all other destroy procedures.
    /// For instance, if the element has children then it is called before the
    /// children are destroyed.
    /// For language binding implementations use the callback name "LDESTROY_CB" to
    /// release memory allocated by the binding for the element.
    /// Also the callback will be called before the language callback.
    /// Affects All.
    pub const OnDestroyFn = fn (self: *Self) anyerror!void;

    /// 
    /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
    /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Affects All elements with user interaction, except menus.
    /// In Windows, there are restrictions when using this callback.
    /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
    /// function calls that display or activate a window.
    /// This causes the thread to yield control and can cause the application to
    /// stop responding to messages.
    /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
    pub const OnKillFocusFn = fn (self: *Self) anyerror!void;

    /// 
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnUnmapFn = fn (self: *Self) anyerror!void;

    /// 
    /// TABCHANGEPOS_CB: Callback called when the user changes the current tab.
    /// Called only when TABCHANGE_CB is not defined.
    /// (since 3.3) int function(Ihandle* ih, int new_pos, int old_pos); [in C]
    /// ih:tabchange_cb(new_pos, old_pos: number) -> (ret: number) [in Lua]
    pub const OnTabChangePosFn = fn (self: *Self, arg0: i32, arg1: i32) anyerror!void;

    /// 
    /// TABCLOSE_CB [Windows and GTK Only]: Callback called when the user clicks on
    /// the close button (since 3.10).
    /// Called only when SHOWCLOSE=Yes.
    /// int function(Ihandle* ih, int pos); [in C] ih:tabclose_cb(pos: number) ->
    /// (ret: number) [in Lua]
    pub const OnTabCloseFn = fn (self: *Self, arg0: i32) anyerror!void;

    /// 
    /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
    /// This callback is called after the KILLFOCUS_CB of the element that loosed
    /// the focus.
    /// The IupGetFocus function during the callback returns the element that
    /// loosed the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that received keyboard focus.
    /// Affects All elements with user interaction, except menus.
    /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
    pub const OnGetFocusFn = fn (self: *Self) anyerror!void;

    pub const OnLDestroyFn = fn (self: *Self) anyerror!void;

    /// 
    /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also ENTERWINDOW_CB
    pub const OnLeaveWindowFn = fn (self: *Self) anyerror!void;

    pub const OnPostMessageFn = fn (self: *Self, arg0: [:0]const u8, arg1: i32, arg2: f64, arg3: *iup.Unknow) anyerror!void;

    pub const ZOrder = enum {
        Top,
        Bottom,
    };
    /// 
    /// TABTYPE (non inheritable) (creation only in Windows): Indicates the type of
    /// tab, which can be "TOP", "BOTTOM", "LEFT" or "RIGHT".
    /// Default is "TOP".
    /// In Windows, if LEFT or RIGHT then MULTILINE=YES and TABORIENTATION=VERTICAL
    /// are set, if TOP or BOTTOM then TABORIENTATION=HORIZONTAL is set.
    /// In Windows, when not TOP, then visual style is removed from tabs.
    /// In Windows, the Visual Styles work only when TABTYPE is TOP.
    /// Windows Classic Windows w/ Styles
    pub const TabType = enum {
        Bottom,
        Left,
        Right,
        Top,
    };
    /// 
    /// EXPAND (non inheritable): The default value is "YES".
    pub const Expand = enum {
        Yes,
        Horizontal,
        Vertical,
        HorizontalFree,
        VerticalFree,
        No,
    };
    /// 
    /// FLOATING (non inheritable) (at children only): If a child has FLOATING=YES
    /// then its size and position will be ignored by the layout processing.
    /// Default: "NO".
    /// (since 3.27)
    pub const Floating = enum {
        Yes,
        Ignore,
        No,
    };
    /// 
    /// TABORIENTATION (non inheritable): Indicates the orientation of tab text,
    /// which can be "HORIZONTAL" or "VERTICAL".
    /// Default is "HORIZONTAL".
    /// VERTICAL is supported only in GTK and in Windows.
    /// In Windows, it can NOT be set, it is dependent on the TABTYPE attribute, if
    /// TABTYPE=LEFT or TABTYPE=RIGHT then TABORIENTATION=VERTICAL, if TABTYPE=TOP
    /// or TABTYPE=BOTTOM then TABORIENTATION=HORIZONTAL.
    /// (GTK 2.6)
    pub const TabOrientation = enum {
        Horizontal,
        Vertical,
    };

    pub const Initializer = struct {
        last_error: ?anyerror = null,
        ref: *Self,

        ///
        /// Returns a pointer to IUP element or an error.
        /// Only top-level or detached elements needs to be unwraped,
        pub fn unwrap(self: Initializer) !*Self {
            if (self.last_error) |e| {
                return e;
            } else {
                return self.ref;
            }
        }

        ///
        /// Captures a reference into a external variable
        /// Allows to capture some references even using full declarative API
        pub fn capture(self: *Initializer, ref: **Self) Initializer {
            ref.* = self.ref;
            return self.*;
        }

        pub fn setStrAttribute(self: *Initializer, attributeName: [:0]const u8, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setStrAttribute(self.ref, attributeName, arg);
            return self.*;
        }

        pub fn setIntAttribute(self: *Initializer, attributeName: [:0]const u8, arg: i32) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setIntAttribute(self.ref, attributeName, arg);
            return self.*;
        }

        pub fn setBoolAttribute(self: *Initializer, attributeName: [:0]const u8, arg: bool) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setBoolAttribute(self.ref, attributeName, bool);
            return self.*;
        }

        pub fn setPtrAttribute(self: *Initializer, comptime T: type, attributeName: [:0]const u8, value: ?*T) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setPtrAttribute(self.ref, T, attributeName, value);
            return self.*;
        }

        pub fn setChildren(self: *Initializer, tuple: anytype) Initializer {
            if (self.last_error) |_| return self.*;

            Self.appendChildren(self.ref, tuple) catch |err| {
                self.last_error = err;
            };

            return self.*;
        }


        /// 
        /// FGCOLOR: Tabs title color.
        /// Default: the global attribute DLGFGCOLOR.
        pub fn setFgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "FGCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setTipBalloon(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TIPBALLOON", void, void, arg);
            return self.*;
        }

        pub fn setHandleName(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "HANDLENAME", void, void, arg);
            return self.*;
        }

        pub fn setTipBgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "TIPBGCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setMaxSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "MAXSIZE", void, void, value);
            return self.*;
        }

        pub fn setPosition(self: *Initializer, x: i32, y: i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
            c.setStrAttribute(self.ref, "POSITION", void, void, value);
            return self.*;
        }

        pub fn setTip(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "TIP", void, void, arg);
            return self.*;
        }


        /// 
        /// SHOWCLOSE [Windows and GTK Only] (non inheritable): enables the close
        /// button on each tab.
        /// Default value: "NO".
        /// In Windows the close button imply the classic visual for the control.
        /// By default when closed the tab is hidden.
        /// To change that behavior use the TABCLOSE_CB callback.
        /// (since 3.10)
        pub fn setShowClose(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "SHOWCLOSE", void, void, arg);
            return self.*;
        }

        pub fn setCanFocus(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "CANFOCUS", void, void, arg);
            return self.*;
        }

        pub fn setVisible(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "VISIBLE", void, void, arg);
            return self.*;
        }

        pub fn zOrder(self: *Initializer, arg: ?ZOrder) Initializer {
            if (arg) |value| switch (value) {
                .Top => c.setStrAttribute(self.ref, "ZORDER", void, void, "TOP"),
                .Bottom => c.setStrAttribute(self.ref, "ZORDER", void, void, "BOTTOM"),
            } else {
                c.clearAttribute(self.ref, "ZORDER", void, void);
            }
            return self.*;
        }

        pub fn setTheme(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "THEME", void, void, arg);
            return self.*;
        }


        /// 
        /// CHILDOFFSET: Allow to specify a position offset for the child.
        /// Available for native containers only.
        /// It will not affect the natural size, and allows to position controls
        /// outside the client area.
        /// Format "dxxdy", where dx and dy are integer values corresponding to the
        /// horizontal and vertical offsets, respectively, in pixels.
        /// Default: 0x0.
        /// (since 3.14)
        pub fn setChildOffset(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "CHILDOFFSET", void, void, value);
            return self.*;
        }


        /// 
        /// TABTYPE (non inheritable) (creation only in Windows): Indicates the type of
        /// tab, which can be "TOP", "BOTTOM", "LEFT" or "RIGHT".
        /// Default is "TOP".
        /// In Windows, if LEFT or RIGHT then MULTILINE=YES and TABORIENTATION=VERTICAL
        /// are set, if TOP or BOTTOM then TABORIENTATION=HORIZONTAL is set.
        /// In Windows, when not TOP, then visual style is removed from tabs.
        /// In Windows, the Visual Styles work only when TABTYPE is TOP.
        /// Windows Classic Windows w/ Styles
        pub fn setTabType(self: *Initializer, arg: ?TabType) Initializer {
            if (arg) |value| switch (value) {
                .Bottom => c.setStrAttribute(self.ref, "TABTYPE", void, void, "BOTTOM"),
                .Left => c.setStrAttribute(self.ref, "TABTYPE", void, void, "LEFT"),
                .Right => c.setStrAttribute(self.ref, "TABTYPE", void, void, "RIGHT"),
                .Top => c.setStrAttribute(self.ref, "TABTYPE", void, void, "TOP"),
            } else {
                c.clearAttribute(self.ref, "TABTYPE", void, void);
            }
            return self.*;
        }


        /// 
        /// EXPAND (non inheritable): The default value is "YES".
        pub fn setExpand(self: *Initializer, arg: ?Expand) Initializer {
            if (arg) |value| switch (value) {
                .Yes => c.setStrAttribute(self.ref, "EXPAND", void, void, "YES"),
                .Horizontal => c.setStrAttribute(self.ref, "EXPAND", void, void, "HORIZONTAL"),
                .Vertical => c.setStrAttribute(self.ref, "EXPAND", void, void, "VERTICAL"),
                .HorizontalFree => c.setStrAttribute(self.ref, "EXPAND", void, void, "HORIZONTALFREE"),
                .VerticalFree => c.setStrAttribute(self.ref, "EXPAND", void, void, "VERTICALFREE"),
                .No => c.setStrAttribute(self.ref, "EXPAND", void, void, "NO"),
            } else {
                c.clearAttribute(self.ref, "EXPAND", void, void);
            }
            return self.*;
        }


        /// 
        /// SIZE (non inheritable): The default size is the smallest size that fits its
        /// largest child.
        /// All child elements are considered even invisible ones.
        pub fn setSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "SIZE", void, void, value);
            return self.*;
        }

        pub fn setFontSize(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "FONTSIZE", void, void, arg);
            return self.*;
        }

        pub fn setUserSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "USERSIZE", void, void, value);
            return self.*;
        }

        pub fn setTipDelay(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "TIPDELAY", void, void, arg);
            return self.*;
        }


        /// 
        /// TABVISIBLEn (non inheritable): Allows to hide a tab.
        /// n starts at 0.
        /// When a tab is hidden the tabs indices are not changed.
        /// Can be Yes or No.
        /// Default: Yes.
        /// (since 3.8)
        pub fn setTabVisible(self: *Initializer, index: i32, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TABVISIBLE", index, void, arg);
            return self.*;
        }

        pub fn setPropagateFocus(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "PROPAGATEFOCUS", void, void, arg);
            return self.*;
        }


        /// 
        /// BGCOLOR: In Windows and in GTK when in Windows, the tab buttons background
        /// it will be always defined by the system.
        /// In Windows the default background is different from the dialog background.
        /// Default: the global attribute DLGBGCOLOR.
        pub fn setBgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "BGCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setTipBalloonTitle(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "TIPBALLOONTITLE", void, void, arg);
            return self.*;
        }


        /// 
        /// CHILDSIZEALL (non inheritable): compute the natural size using all children.
        /// If set to NO will compute using only the current tab.
        /// Default: Yes.
        /// (since 3.27)
        pub fn setChildSizeAll(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "CHILDSIZEALL", void, void, arg);
            return self.*;
        }


        /// 
        /// FLOATING (non inheritable) (at children only): If a child has FLOATING=YES
        /// then its size and position will be ignored by the layout processing.
        /// Default: "NO".
        /// (since 3.27)
        pub fn setFloating(self: *Initializer, arg: ?Floating) Initializer {
            if (arg) |value| switch (value) {
                .Yes => c.setStrAttribute(self.ref, "FLOATING", void, void, "YES"),
                .Ignore => c.setStrAttribute(self.ref, "FLOATING", void, void, "IGNORE"),
                .No => c.setStrAttribute(self.ref, "FLOATING", void, void, "NO"),
            } else {
                c.clearAttribute(self.ref, "FLOATING", void, void);
            }
            return self.*;
        }

        pub fn setNormalizerGroup(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "NORMALIZERGROUP", void, void, arg);
            return self.*;
        }

        pub fn setRasterSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "RASTERSIZE", void, void, value);
            return self.*;
        }

        pub fn setTipFgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "TIPFGCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setControlId(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "CONTROLID", void, void, arg);
            return self.*;
        }

        pub fn setFontFace(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FONTFACE", void, void, arg);
            return self.*;
        }

        pub fn setName(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "NAME", void, void, arg);
            return self.*;
        }


        /// 
        /// VALUEPOS (non inheritable): Changes the current tab by its position,
        /// starting at 0.
        /// When the tabs is created, the first element inserted is set as the visible child.
        /// In GTK, inside the callback the returned value is still the previous one.
        /// (since 3.0)
        pub fn setValuePos(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "VALUEPOS", void, void, arg);
            return self.*;
        }

        pub fn setTipBalloonTitleIcon(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TIPBALLOONTITLEICON", void, void, arg);
            return self.*;
        }


        /// 
        /// VALUE (non inheritable): Changes the current tab by its name.
        /// The value passed must be the name of one of the elements contained in the tabs.
        /// Use IupSetHandle or IupSetAttributeHandle to associate a child to a name.
        /// In Lua you can also use the element reference directly.
        pub fn setValue(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "VALUE", void, void, arg);
            return self.*;
        }


        /// 
        /// TABIMAGEn (non inheritable): image name to be used in the respective tab.
        /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
        /// n starts at 0.
        /// See also IupImage.
        /// In Motif, the image is shown only if TABTITLEn is NULL.
        /// In Windows and Motif set the BGCOLOR attribute before setting the image.
        /// When set after map will update the TABIMAGE attribute on the respective
        /// child (since 3.10).
        /// (since 3.0).
        /// TABIMAGE (non inheritable) (at children only): Same as TABIMAGEn but set in
        /// each child.
        /// Works only if set before the child is added to the tabs.
        pub fn setTabImage(self: *Initializer, index: i32, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "TABIMAGE", index, void, arg);
            return self.*;
        }


        /// 
        /// MULTILINE [Windows Only] (non inheritable): Enable multiple lines of tab buttons.
        /// This will hide the tab scroll and fits to make all tab buttons visible.
        /// Can be "YES" or "NO".
        /// Default "NO".
        /// It is always enabled when TABTYPE=LEFT or TABTYPE=RIGHT.
        /// (since 3.0)
        pub fn setMultiline(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "MULTILINE", void, void, arg);
            return self.*;
        }


        /// 
        /// ACTIVE, FONT, SCREENPOSITION, POSITION, CLIENTSIZE, CLIENTOFFSET, MINSIZE,
        /// MAXSIZE, WID, TIP, RASTERSIZE, ZORDER, VISIBLE, THEME: also accepted.
        pub fn setActive(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "ACTIVE", void, void, arg);
            return self.*;
        }

        pub fn setTipVisible(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TIPVISIBLE", void, void, arg);
            return self.*;
        }

        pub fn setExpandWeight(self: *Initializer, arg: f64) Initializer {
            c.setDoubleAttribute(self.ref, "EXPANDWEIGHT", void, void, arg);
            return self.*;
        }

        pub fn setMinSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "MINSIZE", void, void, value);
            return self.*;
        }

        pub fn setNTheme(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "NTHEME", void, void, arg);
            return self.*;
        }

        pub fn setFontStyle(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FONTSTYLE", void, void, arg);
            return self.*;
        }

        pub fn setTouch(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TOUCH", void, void, arg);
            return self.*;
        }


        /// 
        /// TABTITLEn (non inheritable): Contains the text to be shown in the
        /// respective tab title.
        /// n starts at 0.
        /// If this value is NULL, it will remain empty.
        /// The "&" character can be used to define a mnemonic, the next character will
        /// be used as key.
        /// Use "&&" to show the "&" character instead on defining a mnemonic.
        /// The button can be activated from any control in the dialog using the
        /// "Alt+key" combination.
        /// (mnemonic support since 3.3).
        /// When set after map will update the TABTITLE attribute on the respective
        /// child (since 3.10).
        /// (since 3.0).
        /// TABTITLE (non inheritable) (at children only): Same as TABTITLEn but set in
        /// each child.
        /// Works only if set before the child is added to the tabs.
        pub fn setTabTitle(self: *Initializer, index: i32, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "TABTITLE", index, void, arg);
            return self.*;
        }

        pub fn setFont(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FONT", void, void, arg);
            return self.*;
        }

        pub fn setTouchCallback(self: *Initializer, callback: ?OnTouchFn) Initializer {
            const Handler = CallbackHandler(Self, OnTouchFn, "TOUCH_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// FOCUS_CB: Called when a child of the container gets or looses the focus.
        /// It is called only if PROPAGATEFOCUS is defined in the child.
        /// (since 3.23) int function(Ihandle *ih, int focus); [in C]ih:focus_cb(focus:
        /// number) -> (ret: number) [in Lua]
        pub fn setFocusCallback(self: *Initializer, callback: ?OnFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnFocusFn, "FOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// TABCHANGE_CB: Callback called when the user changes the current tab.
        /// It is not called when the current tab is programmatically changed or removed.
        /// int function(Ihandle* ih, Ihandle* new_tab, Ihandle* old_tab); [in C]
        /// ih:tabchange_cb(new_tab, old_tab: ihandle) -> (ret: number) [in Lua]
        pub fn setTabChangeCallback(self: *Initializer, callback: ?OnTabChangeFn) Initializer {
            const Handler = CallbackHandler(Self, OnTabChangeFn, "TABCHANGE_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// K_ANY K_ANY Action generated when a keyboard event occurs.
        /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
        /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
        /// c: identifier of typed key.
        /// Please refer to the Keyboard Codes table for a list of possible values.
        /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
        /// the control and not propagated.
        /// If returns IUP_CONTINUE, the key will be processed and the event will be
        /// propagated to the parent of the element receiving it, this is the default behavior.
        /// If returns IUP_DEFAULT the key is processed but it is not propagated.
        /// IUP_CLOSE will be processed.
        /// Notes Keyboard callbacks depend on the keyboard usage of the control with
        /// the focus.
        /// So if you return IUP_IGNORE the control will usually not process the key.
        /// But be aware that sometimes the control process the key in another event so
        /// even returning IUP_IGNORE the key can get processed.
        /// Although it will not be propagated.
        /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
        /// the IUP_CONTINUE return value to work while the control is in focus.
        /// If the callback does not exists it is automatically propagated to the
        /// parent of the element.
        /// K_* callbacks All defined keys are also callbacks of any element, called
        /// when the respective key is activated.
        /// For example: "K_cC" is also a callback activated when the user press
        /// Ctrl+C, when the focus is at the element or at a children with focus.
        /// This is the way an application can create shortcut keys, also called hot keys.
        /// These callbacks are not available in IupLua.
        /// Affects All elements with keyboard interaction.
        pub fn setKAnyCallback(self: *Initializer, callback: ?OnKAnyFn) Initializer {
            const Handler = CallbackHandler(Self, OnKAnyFn, "K_ANY");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
        /// In Motif is also activated by the Help button in some workstations keyboard.
        /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Returns: IUP_CLOSE will be processed.
        /// Affects All elements with user interaction.
        pub fn setHelpCallback(self: *Initializer, callback: ?OnHelpFn) Initializer {
            const Handler = CallbackHandler(Self, OnHelpFn, "HELP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setMultiTouchCallback(self: *Initializer, callback: ?OnMultiTouchFn) Initializer {
            const Handler = CallbackHandler(Self, OnMultiTouchFn, "MULTITOUCH_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// RIGHTCLICK_CB: Callback called when the user clicks on some tab using the
        /// right mouse button (since 3.10).
        /// int function(Ihandle* ih, int pos); [in C] ih:rightclick_cb(pos: number) ->
        /// (ret: number) [in Lua]
        pub fn setRightClickCallback(self: *Initializer, callback: ?OnRightClickFn) Initializer {
            const Handler = CallbackHandler(Self, OnRightClickFn, "RIGHTCLICK_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
        /// updated in IupMap.
        /// When the element is a dialog, it is called after the layout is updated.
        /// For all other elements is called before the layout is updated, so the
        /// element current size will still be 0x0 during MAP_CB (since 3.14).
        /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
        /// Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setMapCallback(self: *Initializer, callback: ?OnMapFn) Initializer {
            const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
        /// native element.
        /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Notes When the cursor is moved from one element to another, the call order
        /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
        /// control followed by the ENTERWINDOW_CB callback of the new control.
        /// (since 3.14) If the mouse button is hold pressed and the cursor moves
        /// outside the element the behavior is system dependent.
        /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
        /// GTK the callbacks are called.
        /// Affects All controls with user interaction.
        /// See Also LEAVEWINDOW_CB
        pub fn setEnterWindowCallback(self: *Initializer, callback: ?OnEnterWindowFn) Initializer {
            const Handler = CallbackHandler(Self, OnEnterWindowFn, "ENTERWINDOW_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
        /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Notes If the dialog is visible then it is hidden before it is destroyed.
        /// The callback will be called right after it is hidden.
        /// The callback will be called before all other destroy procedures.
        /// For instance, if the element has children then it is called before the
        /// children are destroyed.
        /// For language binding implementations use the callback name "LDESTROY_CB" to
        /// release memory allocated by the binding for the element.
        /// Also the callback will be called before the language callback.
        /// Affects All.
        pub fn setDestroyCallback(self: *Initializer, callback: ?OnDestroyFn) Initializer {
            const Handler = CallbackHandler(Self, OnDestroyFn, "DESTROY_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
        /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
        /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Affects All elements with user interaction, except menus.
        /// In Windows, there are restrictions when using this callback.
        /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
        /// function calls that display or activate a window.
        /// This causes the thread to yield control and can cause the application to
        /// stop responding to messages.
        /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
        pub fn setKillFocusCallback(self: *Initializer, callback: ?OnKillFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnKillFocusFn, "KILLFOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
        /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setUnmapCallback(self: *Initializer, callback: ?OnUnmapFn) Initializer {
            const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// TABCHANGEPOS_CB: Callback called when the user changes the current tab.
        /// Called only when TABCHANGE_CB is not defined.
        /// (since 3.3) int function(Ihandle* ih, int new_pos, int old_pos); [in C]
        /// ih:tabchange_cb(new_pos, old_pos: number) -> (ret: number) [in Lua]
        pub fn setTabChangePosCallback(self: *Initializer, callback: ?OnTabChangePosFn) Initializer {
            const Handler = CallbackHandler(Self, OnTabChangePosFn, "TABCHANGEPOS_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// TABCLOSE_CB [Windows and GTK Only]: Callback called when the user clicks on
        /// the close button (since 3.10).
        /// Called only when SHOWCLOSE=Yes.
        /// int function(Ihandle* ih, int pos); [in C] ih:tabclose_cb(pos: number) ->
        /// (ret: number) [in Lua]
        pub fn setTabCloseCallback(self: *Initializer, callback: ?OnTabCloseFn) Initializer {
            const Handler = CallbackHandler(Self, OnTabCloseFn, "TABCLOSE_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
        /// This callback is called after the KILLFOCUS_CB of the element that loosed
        /// the focus.
        /// The IupGetFocus function during the callback returns the element that
        /// loosed the focus.
        /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that received keyboard focus.
        /// Affects All elements with user interaction, except menus.
        /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
        pub fn setGetFocusCallback(self: *Initializer, callback: ?OnGetFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnGetFocusFn, "GETFOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setLDestroyCallback(self: *Initializer, callback: ?OnLDestroyFn) Initializer {
            const Handler = CallbackHandler(Self, OnLDestroyFn, "LDESTROY_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
        /// native element.
        /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Notes When the cursor is moved from one element to another, the call order
        /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
        /// control followed by the ENTERWINDOW_CB callback of the new control.
        /// (since 3.14) If the mouse button is hold pressed and the cursor moves
        /// outside the element the behavior is system dependent.
        /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
        /// GTK the callbacks are called.
        /// Affects All controls with user interaction.
        /// See Also ENTERWINDOW_CB
        pub fn setLeaveWindowCallback(self: *Initializer, callback: ?OnLeaveWindowFn) Initializer {
            const Handler = CallbackHandler(Self, OnLeaveWindowFn, "LEAVEWINDOW_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setPostMessageCallback(self: *Initializer, callback: ?OnPostMessageFn) Initializer {
            const Handler = CallbackHandler(Self, OnPostMessageFn, "POSTMESSAGE_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }
    };

    ///
    /// Creates an interface element given its class name and parameters.
    /// After creation the element still needs to be attached to a container and mapped to the native system so it can be visible.
    pub fn init() Initializer {
        var handle = c.IupCreate(Self.CLASS_NAME);

        if (handle) |valid| {
            return .{
                .ref = @ptrCast(*Self, valid),
            };
        } else {
            return .{ .ref = undefined, .last_error = Error.NotInitialized };
        }
    }

    /// 
    /// Destroys an interface element and all its children.
    /// Only dialogs, timers, popup menus and images should be normally destroyed, but detached elements can also be destroyed.        
    pub fn deinit(self: *Self) void {
        c.IupDestroy(c.getHandle(self));
    }

    pub fn setStrAttribute(self: *Self, attributeName: [:0]const u8, arg: [:0]const u8) void {
        c.setStrAttribute(self, attributeName, void, void, arg);
    }

    pub fn getStrAttribute(self: *Self, attributeName: [:0]const u8) [:0]const u8 {
        return c.getStrAttribute(self, attributeName, void, void);
    }

    pub fn setIntAttribute(self: *Self, attributeName: [:0]const u8, arg: i32) void {
        c.setIntAttribute(self, attributeName, void, void, arg);
    }

    pub fn getIntAttribute(self: *Self, attributeName: [:0]const u8) i32 {
        return c.getIntAttribute(self, attributeName, void, void);
    }

    pub fn setBoolAttribute(self: *Self, attributeName: [:0]const u8, arg: bool) void {
        c.setBoolAttribute(self, attributeName, void, void, arg);
    }

    pub fn getBoolAttribute(self: *Self, attributeName: [:0]const u8) bool {
        return c.getBoolAttribute(self, attributeName, void, void);
    }

    pub fn getPtrAttribute(handle: *Self, comptime T: type, attributeName: [:0]const u8) ?*T {
        return c.getPtrAttribute(T, handle, attributeName, void, void);
    }

    pub fn setPtrAttribute(handle: *Self, comptime T: type, attributeName: [:0]const u8, value: ?*T) void {
        c.setPtrAttribute(T, handle, attributeName, void, void, value);
    }

    ///
    /// Adds a tuple of children
    pub fn appendChildren(self: *Self, tuple: anytype) !void {
        try Impl(Self).appendChildren(self, tuple);
    }

    ///
    /// Appends a child on this container
    /// child must be an Element or
    pub fn appendChild(self: *Self, child: anytype) !void {
        try Impl(Self).appendChild(self, child);
    }

    ///
    /// Returns a iterator for children elements.
    pub fn children(self: *Self) ChildrenIterator {
        return ChildrenIterator.init(self);
    }

    ///
    ///
    pub fn getDialog(self: *Self) ?*iup.Dialog {
        if (c.IupGetDialog(c.getHandle(self))) |handle| {
            return c.fromHandle(iup.Dialog, handle);
        } else {
            return null;
        }
    }

    ///
    /// Returns the the child element that has the NAME attribute equals to the given value on the same dialog hierarchy.
    /// Works also for children of a menu that is associated with a dialog.
    pub fn getDialogChild(self: *Self, byName: [:0]const u8) ?Element {
        var child = c.IupGetDialogChild(c.getHandle(self), c.toCStr(byName)) orelse return null;
        var className = c.fromCStr(c.IupGetClassName(child));

        return Element.fromClassName(className, child);
    }

    ///
    /// Updates the size and layout of all controls in the same dialog.
    /// To be used after changing size attributes, or attributes that affect the size of the control. Can be used for any element inside a dialog, but the layout of the dialog and all controls will be updated. It can change the layout of all the controls inside the dialog because of the dynamic layout positioning.
    pub fn refresh(self: *Self) void {
        try Impl(Self).refresh(self);
    }


    /// 
    /// COUNT (read-only) (non inheritable): returns the number of tabs.
    /// Same value returned by IupGetChildCount.
    /// (since 3.3)
    pub fn getCount(self: *Self) i32 {
        return c.getIntAttribute(self, "COUNT", void, void);
    }


    /// 
    /// FGCOLOR: Tabs title color.
    /// Default: the global attribute DLGFGCOLOR.
    pub fn getFgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "FGCOLOR", void, void);
    }


    /// 
    /// FGCOLOR: Tabs title color.
    /// Default: the global attribute DLGFGCOLOR.
    pub fn setFgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "FGCOLOR", void, void, rgb);
    }

    pub fn getTipBalloon(self: *Self) bool {
        return c.getBoolAttribute(self, "TIPBALLOON", void, void);
    }

    pub fn setTipBalloon(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TIPBALLOON", void, void, arg);
    }

    pub fn getHandleName(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "HANDLENAME", void, void);
    }

    pub fn setHandleName(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "HANDLENAME", void, void, arg);
    }

    pub fn getTipBgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "TIPBGCOLOR", void, void);
    }

    pub fn setTipBgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "TIPBGCOLOR", void, void, rgb);
    }

    pub fn getMaxSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "MAXSIZE", void, void);
        return Size.parse(str);
    }

    pub fn setMaxSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "MAXSIZE", void, void, value);
    }

    pub fn getScreenPosition(self: *Self) iup.XYPos {
        var str = c.getStrAttribute(self, "SCREENPOSITION", void, void);
        return iup.XYPos.parse(str, ',');
    }

    pub fn getPosition(self: *Self) iup.XYPos {
        var str = c.getStrAttribute(self, "POSITION", void, void);
        return iup.XYPos.parse(str, ',');
    }

    pub fn setPosition(self: *Self, x: i32, y: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
        c.setStrAttribute(self, "POSITION", void, void, value);
    }

    pub fn getTip(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "TIP", void, void);
    }

    pub fn setTip(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "TIP", void, void, arg);
    }


    /// 
    /// SHOWCLOSE [Windows and GTK Only] (non inheritable): enables the close
    /// button on each tab.
    /// Default value: "NO".
    /// In Windows the close button imply the classic visual for the control.
    /// By default when closed the tab is hidden.
    /// To change that behavior use the TABCLOSE_CB callback.
    /// (since 3.10)
    pub fn getShowClose(self: *Self) bool {
        return c.getBoolAttribute(self, "SHOWCLOSE", void, void);
    }


    /// 
    /// SHOWCLOSE [Windows and GTK Only] (non inheritable): enables the close
    /// button on each tab.
    /// Default value: "NO".
    /// In Windows the close button imply the classic visual for the control.
    /// By default when closed the tab is hidden.
    /// To change that behavior use the TABCLOSE_CB callback.
    /// (since 3.10)
    pub fn setShowClose(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "SHOWCLOSE", void, void, arg);
    }

    pub fn getCanFocus(self: *Self) bool {
        return c.getBoolAttribute(self, "CANFOCUS", void, void);
    }

    pub fn setCanFocus(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "CANFOCUS", void, void, arg);
    }

    pub fn getVisible(self: *Self) bool {
        return c.getBoolAttribute(self, "VISIBLE", void, void);
    }

    pub fn setVisible(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "VISIBLE", void, void, arg);
    }

    pub fn zOrder(self: *Self, arg: ?ZOrder) void {
        if (arg) |value| switch (value) {
            .Top => c.setStrAttribute(self, "ZORDER", void, void, "TOP"),
            .Bottom => c.setStrAttribute(self, "ZORDER", void, void, "BOTTOM"),
        } else {
            c.clearAttribute(self, "ZORDER", void, void);
        }
    }

    pub fn getX(self: *Self) i32 {
        return c.getIntAttribute(self, "X", void, void);
    }

    pub fn getY(self: *Self) i32 {
        return c.getIntAttribute(self, "Y", void, void);
    }

    pub fn getTheme(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "THEME", void, void);
    }

    pub fn setTheme(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "THEME", void, void, arg);
    }


    /// 
    /// CHILDOFFSET: Allow to specify a position offset for the child.
    /// Available for native containers only.
    /// It will not affect the natural size, and allows to position controls
    /// outside the client area.
    /// Format "dxxdy", where dx and dy are integer values corresponding to the
    /// horizontal and vertical offsets, respectively, in pixels.
    /// Default: 0x0.
    /// (since 3.14)
    pub fn getChildOffset(self: *Self) Size {
        var str = c.getStrAttribute(self, "CHILDOFFSET", void, void);
        return Size.parse(str);
    }


    /// 
    /// CHILDOFFSET: Allow to specify a position offset for the child.
    /// Available for native containers only.
    /// It will not affect the natural size, and allows to position controls
    /// outside the client area.
    /// Format "dxxdy", where dx and dy are integer values corresponding to the
    /// horizontal and vertical offsets, respectively, in pixels.
    /// Default: 0x0.
    /// (since 3.14)
    pub fn setChildOffset(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "CHILDOFFSET", void, void, value);
    }


    /// 
    /// TABTYPE (non inheritable) (creation only in Windows): Indicates the type of
    /// tab, which can be "TOP", "BOTTOM", "LEFT" or "RIGHT".
    /// Default is "TOP".
    /// In Windows, if LEFT or RIGHT then MULTILINE=YES and TABORIENTATION=VERTICAL
    /// are set, if TOP or BOTTOM then TABORIENTATION=HORIZONTAL is set.
    /// In Windows, when not TOP, then visual style is removed from tabs.
    /// In Windows, the Visual Styles work only when TABTYPE is TOP.
    /// Windows Classic Windows w/ Styles
    pub fn getTabType(self: *Self) ?TabType {
        var ret = c.getStrAttribute(self, "TABTYPE", void, void);

        if (std.ascii.eqlIgnoreCase("BOTTOM", ret)) return .Bottom;
        if (std.ascii.eqlIgnoreCase("LEFT", ret)) return .Left;
        if (std.ascii.eqlIgnoreCase("RIGHT", ret)) return .Right;
        if (std.ascii.eqlIgnoreCase("TOP", ret)) return .Top;
        return null;
    }


    /// 
    /// TABTYPE (non inheritable) (creation only in Windows): Indicates the type of
    /// tab, which can be "TOP", "BOTTOM", "LEFT" or "RIGHT".
    /// Default is "TOP".
    /// In Windows, if LEFT or RIGHT then MULTILINE=YES and TABORIENTATION=VERTICAL
    /// are set, if TOP or BOTTOM then TABORIENTATION=HORIZONTAL is set.
    /// In Windows, when not TOP, then visual style is removed from tabs.
    /// In Windows, the Visual Styles work only when TABTYPE is TOP.
    /// Windows Classic Windows w/ Styles
    pub fn setTabType(self: *Self, arg: ?TabType) void {
        if (arg) |value| switch (value) {
            .Bottom => c.setStrAttribute(self, "TABTYPE", void, void, "BOTTOM"),
            .Left => c.setStrAttribute(self, "TABTYPE", void, void, "LEFT"),
            .Right => c.setStrAttribute(self, "TABTYPE", void, void, "RIGHT"),
            .Top => c.setStrAttribute(self, "TABTYPE", void, void, "TOP"),
        } else {
            c.clearAttribute(self, "TABTYPE", void, void);
        }
    }


    /// 
    /// EXPAND (non inheritable): The default value is "YES".
    pub fn getExpand(self: *Self) ?Expand {
        var ret = c.getStrAttribute(self, "EXPAND", void, void);

        if (std.ascii.eqlIgnoreCase("YES", ret)) return .Yes;
        if (std.ascii.eqlIgnoreCase("HORIZONTAL", ret)) return .Horizontal;
        if (std.ascii.eqlIgnoreCase("VERTICAL", ret)) return .Vertical;
        if (std.ascii.eqlIgnoreCase("HORIZONTALFREE", ret)) return .HorizontalFree;
        if (std.ascii.eqlIgnoreCase("VERTICALFREE", ret)) return .VerticalFree;
        if (std.ascii.eqlIgnoreCase("NO", ret)) return .No;
        return null;
    }


    /// 
    /// EXPAND (non inheritable): The default value is "YES".
    pub fn setExpand(self: *Self, arg: ?Expand) void {
        if (arg) |value| switch (value) {
            .Yes => c.setStrAttribute(self, "EXPAND", void, void, "YES"),
            .Horizontal => c.setStrAttribute(self, "EXPAND", void, void, "HORIZONTAL"),
            .Vertical => c.setStrAttribute(self, "EXPAND", void, void, "VERTICAL"),
            .HorizontalFree => c.setStrAttribute(self, "EXPAND", void, void, "HORIZONTALFREE"),
            .VerticalFree => c.setStrAttribute(self, "EXPAND", void, void, "VERTICALFREE"),
            .No => c.setStrAttribute(self, "EXPAND", void, void, "NO"),
        } else {
            c.clearAttribute(self, "EXPAND", void, void);
        }
    }


    /// 
    /// SIZE (non inheritable): The default size is the smallest size that fits its
    /// largest child.
    /// All child elements are considered even invisible ones.
    pub fn getSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "SIZE", void, void);
        return Size.parse(str);
    }


    /// 
    /// SIZE (non inheritable): The default size is the smallest size that fits its
    /// largest child.
    /// All child elements are considered even invisible ones.
    pub fn setSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "SIZE", void, void, value);
    }

    pub fn getWId(self: *Self) i32 {
        return c.getIntAttribute(self, "WID", void, void);
    }

    pub fn getFontSize(self: *Self) i32 {
        return c.getIntAttribute(self, "FONTSIZE", void, void);
    }

    pub fn setFontSize(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "FONTSIZE", void, void, arg);
    }

    pub fn getNaturalSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "NATURALSIZE", void, void);
        return Size.parse(str);
    }

    pub fn getUserSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "USERSIZE", void, void);
        return Size.parse(str);
    }

    pub fn setUserSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "USERSIZE", void, void, value);
    }

    pub fn getTipDelay(self: *Self) i32 {
        return c.getIntAttribute(self, "TIPDELAY", void, void);
    }

    pub fn setTipDelay(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "TIPDELAY", void, void, arg);
    }


    /// 
    /// TABVISIBLEn (non inheritable): Allows to hide a tab.
    /// n starts at 0.
    /// When a tab is hidden the tabs indices are not changed.
    /// Can be Yes or No.
    /// Default: Yes.
    /// (since 3.8)
    pub fn getTabVisible(self: *Self, index: i32) bool {
        return c.getBoolAttribute(self, "TABVISIBLE", index, void);
    }


    /// 
    /// TABVISIBLEn (non inheritable): Allows to hide a tab.
    /// n starts at 0.
    /// When a tab is hidden the tabs indices are not changed.
    /// Can be Yes or No.
    /// Default: Yes.
    /// (since 3.8)
    pub fn setTabVisible(self: *Self, index: i32, arg: bool) void {
        c.setBoolAttribute(self, "TABVISIBLE", index, void, arg);
    }

    pub fn getPropagateFocus(self: *Self) bool {
        return c.getBoolAttribute(self, "PROPAGATEFOCUS", void, void);
    }

    pub fn setPropagateFocus(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "PROPAGATEFOCUS", void, void, arg);
    }


    /// 
    /// BGCOLOR: In Windows and in GTK when in Windows, the tab buttons background
    /// it will be always defined by the system.
    /// In Windows the default background is different from the dialog background.
    /// Default: the global attribute DLGBGCOLOR.
    pub fn getBgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "BGCOLOR", void, void);
    }


    /// 
    /// BGCOLOR: In Windows and in GTK when in Windows, the tab buttons background
    /// it will be always defined by the system.
    /// In Windows the default background is different from the dialog background.
    /// Default: the global attribute DLGBGCOLOR.
    pub fn setBgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "BGCOLOR", void, void, rgb);
    }

    pub fn getTipBalloonTitle(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "TIPBALLOONTITLE", void, void);
    }

    pub fn setTipBalloonTitle(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "TIPBALLOONTITLE", void, void, arg);
    }


    /// 
    /// CHILDSIZEALL (non inheritable): compute the natural size using all children.
    /// If set to NO will compute using only the current tab.
    /// Default: Yes.
    /// (since 3.27)
    pub fn getChildSizeAll(self: *Self) bool {
        return c.getBoolAttribute(self, "CHILDSIZEALL", void, void);
    }


    /// 
    /// CHILDSIZEALL (non inheritable): compute the natural size using all children.
    /// If set to NO will compute using only the current tab.
    /// Default: Yes.
    /// (since 3.27)
    pub fn setChildSizeAll(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "CHILDSIZEALL", void, void, arg);
    }


    /// 
    /// FLOATING (non inheritable) (at children only): If a child has FLOATING=YES
    /// then its size and position will be ignored by the layout processing.
    /// Default: "NO".
    /// (since 3.27)
    pub fn getFloating(self: *Self) ?Floating {
        var ret = c.getStrAttribute(self, "FLOATING", void, void);

        if (std.ascii.eqlIgnoreCase("YES", ret)) return .Yes;
        if (std.ascii.eqlIgnoreCase("IGNORE", ret)) return .Ignore;
        if (std.ascii.eqlIgnoreCase("NO", ret)) return .No;
        return null;
    }


    /// 
    /// FLOATING (non inheritable) (at children only): If a child has FLOATING=YES
    /// then its size and position will be ignored by the layout processing.
    /// Default: "NO".
    /// (since 3.27)
    pub fn setFloating(self: *Self, arg: ?Floating) void {
        if (arg) |value| switch (value) {
            .Yes => c.setStrAttribute(self, "FLOATING", void, void, "YES"),
            .Ignore => c.setStrAttribute(self, "FLOATING", void, void, "IGNORE"),
            .No => c.setStrAttribute(self, "FLOATING", void, void, "NO"),
        } else {
            c.clearAttribute(self, "FLOATING", void, void);
        }
    }

    pub fn getNormalizerGroup(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "NORMALIZERGROUP", void, void);
    }

    pub fn setNormalizerGroup(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "NORMALIZERGROUP", void, void, arg);
    }

    pub fn getRasterSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "RASTERSIZE", void, void);
        return Size.parse(str);
    }

    pub fn setRasterSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "RASTERSIZE", void, void, value);
    }

    pub fn getTipFgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "TIPFGCOLOR", void, void);
    }

    pub fn setTipFgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "TIPFGCOLOR", void, void, rgb);
    }

    pub fn getControlId(self: *Self) i32 {
        return c.getIntAttribute(self, "CONTROLID", void, void);
    }

    pub fn setControlId(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "CONTROLID", void, void, arg);
    }

    pub fn getFontFace(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FONTFACE", void, void);
    }

    pub fn setFontFace(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FONTFACE", void, void, arg);
    }


    /// 
    /// TABORIENTATION (non inheritable): Indicates the orientation of tab text,
    /// which can be "HORIZONTAL" or "VERTICAL".
    /// Default is "HORIZONTAL".
    /// VERTICAL is supported only in GTK and in Windows.
    /// In Windows, it can NOT be set, it is dependent on the TABTYPE attribute, if
    /// TABTYPE=LEFT or TABTYPE=RIGHT then TABORIENTATION=VERTICAL, if TABTYPE=TOP
    /// or TABTYPE=BOTTOM then TABORIENTATION=HORIZONTAL.
    /// (GTK 2.6)
    pub fn getTabOrientation(self: *Self) ?TabOrientation {
        var ret = c.getStrAttribute(self, "TABORIENTATION", void, void);

        if (std.ascii.eqlIgnoreCase("HORIZONTAL", ret)) return .Horizontal;
        if (std.ascii.eqlIgnoreCase("VERTICAL", ret)) return .Vertical;
        return null;
    }

    pub fn getName(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "NAME", void, void);
    }

    pub fn setName(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "NAME", void, void, arg);
    }


    /// 
    /// VALUEPOS (non inheritable): Changes the current tab by its position,
    /// starting at 0.
    /// When the tabs is created, the first element inserted is set as the visible child.
    /// In GTK, inside the callback the returned value is still the previous one.
    /// (since 3.0)
    pub fn getValuePos(self: *Self) i32 {
        return c.getIntAttribute(self, "VALUEPOS", void, void);
    }


    /// 
    /// VALUEPOS (non inheritable): Changes the current tab by its position,
    /// starting at 0.
    /// When the tabs is created, the first element inserted is set as the visible child.
    /// In GTK, inside the callback the returned value is still the previous one.
    /// (since 3.0)
    pub fn setValuePos(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "VALUEPOS", void, void, arg);
    }

    pub fn getTipBalloonTitleIcon(self: *Self) bool {
        return c.getBoolAttribute(self, "TIPBALLOONTITLEICON", void, void);
    }

    pub fn setTipBalloonTitleIcon(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TIPBALLOONTITLEICON", void, void, arg);
    }


    /// 
    /// VALUE (non inheritable): Changes the current tab by its name.
    /// The value passed must be the name of one of the elements contained in the tabs.
    /// Use IupSetHandle or IupSetAttributeHandle to associate a child to a name.
    /// In Lua you can also use the element reference directly.
    pub fn getValue(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "VALUE", void, void);
    }


    /// 
    /// VALUE (non inheritable): Changes the current tab by its name.
    /// The value passed must be the name of one of the elements contained in the tabs.
    /// Use IupSetHandle or IupSetAttributeHandle to associate a child to a name.
    /// In Lua you can also use the element reference directly.
    pub fn setValue(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "VALUE", void, void, arg);
    }


    /// 
    /// TABIMAGEn (non inheritable): image name to be used in the respective tab.
    /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
    /// n starts at 0.
    /// See also IupImage.
    /// In Motif, the image is shown only if TABTITLEn is NULL.
    /// In Windows and Motif set the BGCOLOR attribute before setting the image.
    /// When set after map will update the TABIMAGE attribute on the respective
    /// child (since 3.10).
    /// (since 3.0).
    /// TABIMAGE (non inheritable) (at children only): Same as TABIMAGEn but set in
    /// each child.
    /// Works only if set before the child is added to the tabs.
    pub fn getTabImage(self: *Self, index: i32) [:0]const u8 {
        return c.getStrAttribute(self, "TABIMAGE", index, void);
    }


    /// 
    /// TABIMAGEn (non inheritable): image name to be used in the respective tab.
    /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
    /// n starts at 0.
    /// See also IupImage.
    /// In Motif, the image is shown only if TABTITLEn is NULL.
    /// In Windows and Motif set the BGCOLOR attribute before setting the image.
    /// When set after map will update the TABIMAGE attribute on the respective
    /// child (since 3.10).
    /// (since 3.0).
    /// TABIMAGE (non inheritable) (at children only): Same as TABIMAGEn but set in
    /// each child.
    /// Works only if set before the child is added to the tabs.
    pub fn setTabImage(self: *Self, index: i32, arg: [:0]const u8) void {
        c.setStrAttribute(self, "TABIMAGE", index, void, arg);
    }


    /// 
    /// MULTILINE [Windows Only] (non inheritable): Enable multiple lines of tab buttons.
    /// This will hide the tab scroll and fits to make all tab buttons visible.
    /// Can be "YES" or "NO".
    /// Default "NO".
    /// It is always enabled when TABTYPE=LEFT or TABTYPE=RIGHT.
    /// (since 3.0)
    pub fn getMultiline(self: *Self) bool {
        return c.getBoolAttribute(self, "MULTILINE", void, void);
    }


    /// 
    /// MULTILINE [Windows Only] (non inheritable): Enable multiple lines of tab buttons.
    /// This will hide the tab scroll and fits to make all tab buttons visible.
    /// Can be "YES" or "NO".
    /// Default "NO".
    /// It is always enabled when TABTYPE=LEFT or TABTYPE=RIGHT.
    /// (since 3.0)
    pub fn setMultiline(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "MULTILINE", void, void, arg);
    }


    /// 
    /// ACTIVE, FONT, SCREENPOSITION, POSITION, CLIENTSIZE, CLIENTOFFSET, MINSIZE,
    /// MAXSIZE, WID, TIP, RASTERSIZE, ZORDER, VISIBLE, THEME: also accepted.
    pub fn getActive(self: *Self) bool {
        return c.getBoolAttribute(self, "ACTIVE", void, void);
    }


    /// 
    /// ACTIVE, FONT, SCREENPOSITION, POSITION, CLIENTSIZE, CLIENTOFFSET, MINSIZE,
    /// MAXSIZE, WID, TIP, RASTERSIZE, ZORDER, VISIBLE, THEME: also accepted.
    pub fn setActive(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "ACTIVE", void, void, arg);
    }

    pub fn getTipVisible(self: *Self) bool {
        return c.getBoolAttribute(self, "TIPVISIBLE", void, void);
    }

    pub fn setTipVisible(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TIPVISIBLE", void, void, arg);
    }

    pub fn getExpandWeight(self: *Self) f64 {
        return c.getDoubleAttribute(self, "EXPANDWEIGHT", void, void);
    }

    pub fn setExpandWeight(self: *Self, arg: f64) void {
        c.setDoubleAttribute(self, "EXPANDWEIGHT", void, void, arg);
    }

    pub fn getMinSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "MINSIZE", void, void);
        return Size.parse(str);
    }

    pub fn setMinSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "MINSIZE", void, void, value);
    }

    pub fn getNTheme(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "NTHEME", void, void);
    }

    pub fn setNTheme(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "NTHEME", void, void, arg);
    }

    pub fn getCharSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "CHARSIZE", void, void);
        return Size.parse(str);
    }

    pub fn getClientSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "CLIENTSIZE", void, void);
        return Size.parse(str);
    }

    pub fn getClientOffset(self: *Self) Size {
        var str = c.getStrAttribute(self, "CLIENTOFFSET", void, void);
        return Size.parse(str);
    }

    pub fn getFontStyle(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FONTSTYLE", void, void);
    }

    pub fn setFontStyle(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FONTSTYLE", void, void, arg);
    }

    pub fn getTouch(self: *Self) bool {
        return c.getBoolAttribute(self, "TOUCH", void, void);
    }

    pub fn setTouch(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TOUCH", void, void, arg);
    }


    /// 
    /// TABTITLEn (non inheritable): Contains the text to be shown in the
    /// respective tab title.
    /// n starts at 0.
    /// If this value is NULL, it will remain empty.
    /// The "&" character can be used to define a mnemonic, the next character will
    /// be used as key.
    /// Use "&&" to show the "&" character instead on defining a mnemonic.
    /// The button can be activated from any control in the dialog using the
    /// "Alt+key" combination.
    /// (mnemonic support since 3.3).
    /// When set after map will update the TABTITLE attribute on the respective
    /// child (since 3.10).
    /// (since 3.0).
    /// TABTITLE (non inheritable) (at children only): Same as TABTITLEn but set in
    /// each child.
    /// Works only if set before the child is added to the tabs.
    pub fn getTabTitle(self: *Self, index: i32) [:0]const u8 {
        return c.getStrAttribute(self, "TABTITLE", index, void);
    }


    /// 
    /// TABTITLEn (non inheritable): Contains the text to be shown in the
    /// respective tab title.
    /// n starts at 0.
    /// If this value is NULL, it will remain empty.
    /// The "&" character can be used to define a mnemonic, the next character will
    /// be used as key.
    /// Use "&&" to show the "&" character instead on defining a mnemonic.
    /// The button can be activated from any control in the dialog using the
    /// "Alt+key" combination.
    /// (mnemonic support since 3.3).
    /// When set after map will update the TABTITLE attribute on the respective
    /// child (since 3.10).
    /// (since 3.0).
    /// TABTITLE (non inheritable) (at children only): Same as TABTITLEn but set in
    /// each child.
    /// Works only if set before the child is added to the tabs.
    pub fn setTabTitle(self: *Self, index: i32, arg: [:0]const u8) void {
        c.setStrAttribute(self, "TABTITLE", index, void, arg);
    }

    pub fn getFont(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FONT", void, void);
    }

    pub fn setFont(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FONT", void, void, arg);
    }

    pub fn setTouchCallback(self: *Self, callback: ?OnTouchFn) void {
        const Handler = CallbackHandler(Self, OnTouchFn, "TOUCH_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// FOCUS_CB: Called when a child of the container gets or looses the focus.
    /// It is called only if PROPAGATEFOCUS is defined in the child.
    /// (since 3.23) int function(Ihandle *ih, int focus); [in C]ih:focus_cb(focus:
    /// number) -> (ret: number) [in Lua]
    pub fn setFocusCallback(self: *Self, callback: ?OnFocusFn) void {
        const Handler = CallbackHandler(Self, OnFocusFn, "FOCUS_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// TABCHANGE_CB: Callback called when the user changes the current tab.
    /// It is not called when the current tab is programmatically changed or removed.
    /// int function(Ihandle* ih, Ihandle* new_tab, Ihandle* old_tab); [in C]
    /// ih:tabchange_cb(new_tab, old_tab: ihandle) -> (ret: number) [in Lua]
    pub fn setTabChangeCallback(self: *Self, callback: ?OnTabChangeFn) void {
        const Handler = CallbackHandler(Self, OnTabChangeFn, "TABCHANGE_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// K_ANY K_ANY Action generated when a keyboard event occurs.
    /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
    /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
    /// c: identifier of typed key.
    /// Please refer to the Keyboard Codes table for a list of possible values.
    /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
    /// the control and not propagated.
    /// If returns IUP_CONTINUE, the key will be processed and the event will be
    /// propagated to the parent of the element receiving it, this is the default behavior.
    /// If returns IUP_DEFAULT the key is processed but it is not propagated.
    /// IUP_CLOSE will be processed.
    /// Notes Keyboard callbacks depend on the keyboard usage of the control with
    /// the focus.
    /// So if you return IUP_IGNORE the control will usually not process the key.
    /// But be aware that sometimes the control process the key in another event so
    /// even returning IUP_IGNORE the key can get processed.
    /// Although it will not be propagated.
    /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
    /// the IUP_CONTINUE return value to work while the control is in focus.
    /// If the callback does not exists it is automatically propagated to the
    /// parent of the element.
    /// K_* callbacks All defined keys are also callbacks of any element, called
    /// when the respective key is activated.
    /// For example: "K_cC" is also a callback activated when the user press
    /// Ctrl+C, when the focus is at the element or at a children with focus.
    /// This is the way an application can create shortcut keys, also called hot keys.
    /// These callbacks are not available in IupLua.
    /// Affects All elements with keyboard interaction.
    pub fn setKAnyCallback(self: *Self, callback: ?OnKAnyFn) void {
        const Handler = CallbackHandler(Self, OnKAnyFn, "K_ANY");
        Handler.setCallback(self, callback);
    }

    /// 
    /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
    /// In Motif is also activated by the Help button in some workstations keyboard.
    /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Returns: IUP_CLOSE will be processed.
    /// Affects All elements with user interaction.
    pub fn setHelpCallback(self: *Self, callback: ?OnHelpFn) void {
        const Handler = CallbackHandler(Self, OnHelpFn, "HELP_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setMultiTouchCallback(self: *Self, callback: ?OnMultiTouchFn) void {
        const Handler = CallbackHandler(Self, OnMultiTouchFn, "MULTITOUCH_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// RIGHTCLICK_CB: Callback called when the user clicks on some tab using the
    /// right mouse button (since 3.10).
    /// int function(Ihandle* ih, int pos); [in C] ih:rightclick_cb(pos: number) ->
    /// (ret: number) [in Lua]
    pub fn setRightClickCallback(self: *Self, callback: ?OnRightClickFn) void {
        const Handler = CallbackHandler(Self, OnRightClickFn, "RIGHTCLICK_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setMapCallback(self: *Self, callback: ?OnMapFn) void {
        const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also LEAVEWINDOW_CB
    pub fn setEnterWindowCallback(self: *Self, callback: ?OnEnterWindowFn) void {
        const Handler = CallbackHandler(Self, OnEnterWindowFn, "ENTERWINDOW_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
    /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Notes If the dialog is visible then it is hidden before it is destroyed.
    /// The callback will be called right after it is hidden.
    /// The callback will be called before all other destroy procedures.
    /// For instance, if the element has children then it is called before the
    /// children are destroyed.
    /// For language binding implementations use the callback name "LDESTROY_CB" to
    /// release memory allocated by the binding for the element.
    /// Also the callback will be called before the language callback.
    /// Affects All.
    pub fn setDestroyCallback(self: *Self, callback: ?OnDestroyFn) void {
        const Handler = CallbackHandler(Self, OnDestroyFn, "DESTROY_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
    /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Affects All elements with user interaction, except menus.
    /// In Windows, there are restrictions when using this callback.
    /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
    /// function calls that display or activate a window.
    /// This causes the thread to yield control and can cause the application to
    /// stop responding to messages.
    /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
    pub fn setKillFocusCallback(self: *Self, callback: ?OnKillFocusFn) void {
        const Handler = CallbackHandler(Self, OnKillFocusFn, "KILLFOCUS_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setUnmapCallback(self: *Self, callback: ?OnUnmapFn) void {
        const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// TABCHANGEPOS_CB: Callback called when the user changes the current tab.
    /// Called only when TABCHANGE_CB is not defined.
    /// (since 3.3) int function(Ihandle* ih, int new_pos, int old_pos); [in C]
    /// ih:tabchange_cb(new_pos, old_pos: number) -> (ret: number) [in Lua]
    pub fn setTabChangePosCallback(self: *Self, callback: ?OnTabChangePosFn) void {
        const Handler = CallbackHandler(Self, OnTabChangePosFn, "TABCHANGEPOS_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// TABCLOSE_CB [Windows and GTK Only]: Callback called when the user clicks on
    /// the close button (since 3.10).
    /// Called only when SHOWCLOSE=Yes.
    /// int function(Ihandle* ih, int pos); [in C] ih:tabclose_cb(pos: number) ->
    /// (ret: number) [in Lua]
    pub fn setTabCloseCallback(self: *Self, callback: ?OnTabCloseFn) void {
        const Handler = CallbackHandler(Self, OnTabCloseFn, "TABCLOSE_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
    /// This callback is called after the KILLFOCUS_CB of the element that loosed
    /// the focus.
    /// The IupGetFocus function during the callback returns the element that
    /// loosed the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that received keyboard focus.
    /// Affects All elements with user interaction, except menus.
    /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
    pub fn setGetFocusCallback(self: *Self, callback: ?OnGetFocusFn) void {
        const Handler = CallbackHandler(Self, OnGetFocusFn, "GETFOCUS_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setLDestroyCallback(self: *Self, callback: ?OnLDestroyFn) void {
        const Handler = CallbackHandler(Self, OnLDestroyFn, "LDESTROY_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also ENTERWINDOW_CB
    pub fn setLeaveWindowCallback(self: *Self, callback: ?OnLeaveWindowFn) void {
        const Handler = CallbackHandler(Self, OnLeaveWindowFn, "LEAVEWINDOW_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setPostMessageCallback(self: *Self, callback: ?OnPostMessageFn) void {
        const Handler = CallbackHandler(Self, OnPostMessageFn, "POSTMESSAGE_CB");
        Handler.setCallback(self, callback);
    }
};

test "Tabs FgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setFgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getFgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "Tabs TipBalloon" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setTipBalloon(true).unwrap());
    defer item.deinit();

    var ret = item.getTipBalloon();

    try std.testing.expect(ret == true);
}

test "Tabs HandleName" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setHandleName("Hello").unwrap());
    defer item.deinit();

    var ret = item.getHandleName();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Tabs TipBgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setTipBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTipBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "Tabs MaxSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setMaxSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMaxSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Tabs Position" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setPosition(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getPosition();

    try std.testing.expect(ret.x == 9 and ret.y == 10);
}

test "Tabs Tip" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setTip("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTip();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Tabs ShowClose" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setShowClose(true).unwrap());
    defer item.deinit();

    var ret = item.getShowClose();

    try std.testing.expect(ret == true);
}

test "Tabs CanFocus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setCanFocus(true).unwrap());
    defer item.deinit();

    var ret = item.getCanFocus();

    try std.testing.expect(ret == true);
}

test "Tabs Visible" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setVisible(true).unwrap());
    defer item.deinit();

    var ret = item.getVisible();

    try std.testing.expect(ret == true);
}

test "Tabs Theme" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setTheme("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTheme();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Tabs ChildOffset" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setChildOffset(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getChildOffset();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Tabs TabType" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setTabType(.Bottom).unwrap());
    defer item.deinit();

    var ret = item.getTabType();

    try std.testing.expect(ret != null and ret.? == .Bottom);
}

test "Tabs Expand" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setExpand(.Yes).unwrap());
    defer item.deinit();

    var ret = item.getExpand();

    try std.testing.expect(ret != null and ret.? == .Yes);
}

test "Tabs Size" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Tabs FontSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setFontSize(42).unwrap());
    defer item.deinit();

    var ret = item.getFontSize();

    try std.testing.expect(ret == 42);
}

test "Tabs UserSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setUserSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getUserSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Tabs TipDelay" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setTipDelay(42).unwrap());
    defer item.deinit();

    var ret = item.getTipDelay();

    try std.testing.expect(ret == 42);
}

test "Tabs TabVisible" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setTabVisible(0, true).unwrap());
    defer item.deinit();

    var ret = item.getTabVisible(0);

    try std.testing.expect(ret == true);
}

test "Tabs PropagateFocus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setPropagateFocus(true).unwrap());
    defer item.deinit();

    var ret = item.getPropagateFocus();

    try std.testing.expect(ret == true);
}

test "Tabs BgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "Tabs TipBalloonTitle" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setTipBalloonTitle("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTipBalloonTitle();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Tabs ChildSizeAll" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setChildSizeAll(true).unwrap());
    defer item.deinit();

    var ret = item.getChildSizeAll();

    try std.testing.expect(ret == true);
}

test "Tabs Floating" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setFloating(.Yes).unwrap());
    defer item.deinit();

    var ret = item.getFloating();

    try std.testing.expect(ret != null and ret.? == .Yes);
}

test "Tabs NormalizerGroup" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setNormalizerGroup("Hello").unwrap());
    defer item.deinit();

    var ret = item.getNormalizerGroup();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Tabs RasterSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setRasterSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getRasterSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Tabs TipFgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setTipFgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTipFgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "Tabs ControlId" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setControlId(42).unwrap());
    defer item.deinit();

    var ret = item.getControlId();

    try std.testing.expect(ret == 42);
}

test "Tabs FontFace" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setFontFace("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFontFace();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Tabs Name" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setName("Hello").unwrap());
    defer item.deinit();

    var ret = item.getName();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Tabs ValuePos" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setValuePos(42).unwrap());
    defer item.deinit();

    var ret = item.getValuePos();

    try std.testing.expect(ret == 42);
}

test "Tabs TipBalloonTitleIcon" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setTipBalloonTitleIcon(true).unwrap());
    defer item.deinit();

    var ret = item.getTipBalloonTitleIcon();

    try std.testing.expect(ret == true);
}

test "Tabs Value" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setValue("Hello").unwrap());
    defer item.deinit();

    var ret = item.getValue();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Tabs TabImage" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setTabImage(0, "Hello").unwrap());
    defer item.deinit();

    var ret = item.getTabImage(0);

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Tabs Multiline" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setMultiline(true).unwrap());
    defer item.deinit();

    var ret = item.getMultiline();

    try std.testing.expect(ret == true);
}

test "Tabs Active" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setActive(true).unwrap());
    defer item.deinit();

    var ret = item.getActive();

    try std.testing.expect(ret == true);
}

test "Tabs TipVisible" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setTipVisible(true).unwrap());
    defer item.deinit();

    var ret = item.getTipVisible();

    try std.testing.expect(ret == true);
}

test "Tabs ExpandWeight" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setExpandWeight(3.14).unwrap());
    defer item.deinit();

    var ret = item.getExpandWeight();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "Tabs MinSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setMinSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMinSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Tabs NTheme" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setNTheme("Hello").unwrap());
    defer item.deinit();

    var ret = item.getNTheme();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Tabs FontStyle" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setFontStyle("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFontStyle();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Tabs Touch" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setTouch(true).unwrap());
    defer item.deinit();

    var ret = item.getTouch();

    try std.testing.expect(ret == true);
}

test "Tabs TabTitle" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setTabTitle(0, "Hello").unwrap());
    defer item.deinit();

    var ret = item.getTabTitle(0);

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Tabs Font" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Tabs.init().setFont("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFont();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}
