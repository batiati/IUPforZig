// This code was generated by a tool.
// IUP Metadata Code Generator
// https://github.com/batiati/IUPMetadata
//
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.

const std = @import("std");

const c = @import("../c.zig");
const iup = @import("../iup.zig");

const Impl = @import("../impl.zig").Impl;
const CallbackHandler = @import("../callback_handler.zig").CallbackHandler;

const debug = std.debug;
const trait = std.meta.trait;

const Element = iup.Element;
const Handle = iup.Handle;
const Error = iup.Error;
const ChildrenIterator = iup.ChildrenIterator;
const Size = iup.Size;
const Margin = iup.Margin;

/// 
/// Construction element used only in IupParamBox.
/// It is not mapped in the native system, but it will exist while its
/// IupParamBox container exists.
pub const Param = opaque {
    pub const CLASS_NAME = "param";
    const Self = @This();

    pub const OnLDestroyFn = fn (self: *Self) anyerror!void;

    /// 
    /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
    /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Notes If the dialog is visible then it is hidden before it is destroyed.
    /// The callback will be called right after it is hidden.
    /// The callback will be called before all other destroy procedures.
    /// For instance, if the element has children then it is called before the
    /// children are destroyed.
    /// For language binding implementations use the callback name "LDESTROY_CB" to
    /// release memory allocated by the binding for the element.
    /// Also the callback will be called before the language callback.
    /// Affects All.
    pub const OnDestroyFn = fn (self: *Self) anyerror!void;

    /// 
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnMapFn = fn (self: *Self) anyerror!void;

    pub const OnPostMessageFn = fn (self: *Self, arg0: [:0]const u8, arg1: i32, arg2: f64, arg3: *iup.Unknow) anyerror!void;

    /// 
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnUnmapFn = fn (self: *Self) anyerror!void;

    /// 
    /// DIALOGTYPE, FILTER, DIRECTORY, NOCHANGEDIR, NOOVERWRITEPROMPT: used for the
    /// FILE parameter dialog.
    /// See IupFileDlg.
    /// For 'f' parameter.
    pub const DialogType = enum {
        Save,
        Dir,
        Open,
    };

    pub const Initializer = struct {
        last_error: ?anyerror = null,
        ref: *Self,

        ///
        /// Returns a pointer to IUP element or an error.
        /// Only top-level or detached elements needs to be unwraped,
        pub fn unwrap(self: Initializer) !*Self {
            if (self.last_error) |e| {
                return e;
            } else {
                return self.ref;
            }
        }

        ///
        /// Captures a reference into a external variable
        /// Allows to capture some references even using full declarative API
        pub fn capture(self: *Initializer, ref: **Self) Initializer {
            ref.* = self.ref;
            return self.*;
        }

        pub fn setStrAttribute(self: *Initializer, attributeName: [:0]const u8, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setStrAttribute(self.ref, attributeName, arg);
            return self.*;
        }

        pub fn setIntAttribute(self: *Initializer, attributeName: [:0]const u8, arg: i32) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setIntAttribute(self.ref, attributeName, arg);
            return self.*;
        }

        pub fn setBoolAttribute(self: *Initializer, attributeName: [:0]const u8, arg: bool) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setBoolAttribute(self.ref, attributeName, bool);
            return self.*;
        }

        pub fn setPtrAttribute(self: *Initializer, comptime T: type, attributeName: [:0]const u8, value: ?*T) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setPtrAttribute(self.ref, T, attributeName, value);
            return self.*;
        }

        pub fn setDirectory(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "DIRECTORY", void, void, arg);
            return self.*;
        }

        pub fn setNoOverwritePrompt(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "NOOVERWRITEPROMPT", void, void, arg);
            return self.*;
        }


        /// 
        /// TITLE: text of the parameter, used as label.
        /// For all parameters.
        pub fn setTitle(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "TITLE", void, void, arg);
            return self.*;
        }


        /// 
        /// MULTILINE: can be Yes or No.
        /// Defines if the edit box can have more than one line.
        /// For 'm' parameter.
        pub fn setMultiline(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "MULTILINE", void, void, arg);
            return self.*;
        }

        pub fn setFilter(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FILTER", void, void, arg);
            return self.*;
        }


        /// 
        /// TIP: text of the tip.
        /// For all parameters.
        pub fn setTip(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "TIP", void, void, arg);
            return self.*;
        }

        pub fn setMax(self: *Initializer, arg: f64) Initializer {
            c.setDoubleAttribute(self.ref, "MAX", void, void, arg);
            return self.*;
        }


        /// 
        /// BUTTON1, BUTTON2, BUTTON3: button titles.
        /// Default is "OK/Cancel/Help" for regular IupGetParam, and "Apply/Reset/Help"
        /// when IupParamBox is directly used.
        /// For 'u' parameter.
        pub fn setButton1(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "BUTTON1", void, void, arg);
            return self.*;
        }

        pub fn setButton2(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "BUTTON2", void, void, arg);
            return self.*;
        }


        /// 
        /// MASK: mask for the edit box input.
        /// For 's' and 'm' parameters.
        pub fn setMask(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "MASK", void, void, arg);
            return self.*;
        }

        pub fn setButton3(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "BUTTON3", void, void, arg);
            return self.*;
        }


        /// 
        /// TYPE: can be BOOLEAN ('b'), LIST ('l'), OPTIONS ('o'), REAL ('A', 'a', 'R',
        /// 'r'), STRING ('m', 's'), INTEGER ('i'), DATE ('d'), FILE ('f'), COLOR
        /// ('c'), SEPARATOR ('t'), BUTTONNAMES ('u'), PARAMBOX ('x') and HANDLE ('h').
        /// And describe the type of the parameter.
        /// For all parameters.
        pub fn setType(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "TYPE", void, void, arg);
            return self.*;
        }


        /// 
        /// VALUE - the value of the parameter.
        /// IupGetFloat and IupGetInt can also be used.
        /// For the current parameter inside the callback contains the new value that
        /// will be applied to the control, to get the old value use the VALUE
        /// attribute for the CONTROL returned Ihandle*.
        pub fn setValue(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "VALUE", void, void, arg);
            return self.*;
        }


        /// 
        /// DIALOGTYPE, FILTER, DIRECTORY, NOCHANGEDIR, NOOVERWRITEPROMPT: used for the
        /// FILE parameter dialog.
        /// See IupFileDlg.
        /// For 'f' parameter.
        pub fn setDialogType(self: *Initializer, arg: ?DialogType) Initializer {
            if (arg) |value| switch (value) {
                .Save => c.setStrAttribute(self.ref, "DIALOGTYPE", void, void, "SAVE"),
                .Dir => c.setStrAttribute(self.ref, "DIALOGTYPE", void, void, "DIR"),
                .Open => c.setStrAttribute(self.ref, "DIALOGTYPE", void, void, "OPEN"),
            } else {
                c.clearAttribute(self.ref, "DIALOGTYPE", void, void);
            }
            return self.*;
        }

        pub fn setNoChangeDir(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "NOCHANGEDIR", void, void, arg);
            return self.*;
        }

        pub fn setMin(self: *Initializer, arg: f64) Initializer {
            c.setDoubleAttribute(self.ref, "MIN", void, void, arg);
            return self.*;
        }

        pub fn setStep(self: *Initializer, arg: f64) Initializer {
            c.setDoubleAttribute(self.ref, "STEP", void, void, arg);
            return self.*;
        }

        pub fn setLDestroyCallback(self: *Initializer, callback: ?OnLDestroyFn) Initializer {
            const Handler = CallbackHandler(Self, OnLDestroyFn, "LDESTROY_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
        /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Notes If the dialog is visible then it is hidden before it is destroyed.
        /// The callback will be called right after it is hidden.
        /// The callback will be called before all other destroy procedures.
        /// For instance, if the element has children then it is called before the
        /// children are destroyed.
        /// For language binding implementations use the callback name "LDESTROY_CB" to
        /// release memory allocated by the binding for the element.
        /// Also the callback will be called before the language callback.
        /// Affects All.
        pub fn setDestroyCallback(self: *Initializer, callback: ?OnDestroyFn) Initializer {
            const Handler = CallbackHandler(Self, OnDestroyFn, "DESTROY_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
        /// updated in IupMap.
        /// When the element is a dialog, it is called after the layout is updated.
        /// For all other elements is called before the layout is updated, so the
        /// element current size will still be 0x0 during MAP_CB (since 3.14).
        /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
        /// Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setMapCallback(self: *Initializer, callback: ?OnMapFn) Initializer {
            const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setPostMessageCallback(self: *Initializer, callback: ?OnPostMessageFn) Initializer {
            const Handler = CallbackHandler(Self, OnPostMessageFn, "POSTMESSAGE_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
        /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setUnmapCallback(self: *Initializer, callback: ?OnUnmapFn) Initializer {
            const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }
    };

    ///
    /// Creates an interface element given its class name and parameters.
    /// After creation the element still needs to be attached to a container and mapped to the native system so it can be visible.
    pub fn init() Initializer {
        var handle = c.IupCreate(Self.CLASS_NAME);

        if (handle) |valid| {
            return .{
                .ref = @ptrCast(*Self, valid),
            };
        } else {
            return .{ .ref = undefined, .last_error = Error.NotInitialized };
        }
    }

    /// 
    /// Destroys an interface element and all its children.
    /// Only dialogs, timers, popup menus and images should be normally destroyed, but detached elements can also be destroyed.        
    pub fn deinit(self: *Self) void {
        c.IupDestroy(c.getHandle(self));
    }

    pub fn setStrAttribute(self: *Self, attributeName: [:0]const u8, arg: [:0]const u8) void {
        c.setStrAttribute(self, attributeName, void, void, arg);
    }

    pub fn getStrAttribute(self: *Self, attributeName: [:0]const u8) [:0]const u8 {
        return c.getStrAttribute(self, attributeName, void, void);
    }

    pub fn setIntAttribute(self: *Self, attributeName: [:0]const u8, arg: i32) void {
        c.setIntAttribute(self, attributeName, void, void, arg);
    }

    pub fn getIntAttribute(self: *Self, attributeName: [:0]const u8) i32 {
        return c.getIntAttribute(self, attributeName, void, void);
    }

    pub fn setBoolAttribute(self: *Self, attributeName: [:0]const u8, arg: bool) void {
        c.setBoolAttribute(self, attributeName, void, void, arg);
    }

    pub fn getBoolAttribute(self: *Self, attributeName: [:0]const u8) bool {
        return c.getBoolAttribute(self, attributeName, void, void);
    }

    pub fn getPtrAttribute(handle: *Self, comptime T: type, attributeName: [:0]const u8) ?*T {
        return c.getPtrAttribute(T, handle, attributeName, void, void);
    }

    pub fn setPtrAttribute(handle: *Self, comptime T: type, attributeName: [:0]const u8, value: ?*T) void {
        c.setPtrAttribute(T, handle, attributeName, void, void, value);
    }

    ///
    ///
    pub fn getDialog(self: *Self) ?*iup.Dialog {
        if (c.IupGetDialog(c.getHandle(self))) |handle| {
            return c.fromHandle(iup.Dialog, handle);
        } else {
            return null;
        }
    }

    ///
    /// Returns the the child element that has the NAME attribute equals to the given value on the same dialog hierarchy.
    /// Works also for children of a menu that is associated with a dialog.
    pub fn getDialogChild(self: *Self, byName: [:0]const u8) ?Element {
        var child = c.IupGetDialogChild(c.getHandle(self), c.toCStr(byName)) orelse return null;
        var className = c.fromCStr(c.IupGetClassName(child));

        return Element.fromClassName(className, child);
    }

    ///
    /// Updates the size and layout of all controls in the same dialog.
    /// To be used after changing size attributes, or attributes that affect the size of the control. Can be used for any element inside a dialog, but the layout of the dialog and all controls will be updated. It can change the layout of all the controls inside the dialog because of the dynamic layout positioning.
    pub fn refresh(self: *Self) void {
        try Impl(Self).refresh(self);
    }

    pub fn getDirectory(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "DIRECTORY", void, void);
    }

    pub fn setDirectory(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "DIRECTORY", void, void, arg);
    }

    pub fn getNoOverwritePrompt(self: *Self) bool {
        return c.getBoolAttribute(self, "NOOVERWRITEPROMPT", void, void);
    }

    pub fn setNoOverwritePrompt(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "NOOVERWRITEPROMPT", void, void, arg);
    }


    /// 
    /// TITLE: text of the parameter, used as label.
    /// For all parameters.
    pub fn getTitle(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "TITLE", void, void);
    }


    /// 
    /// TITLE: text of the parameter, used as label.
    /// For all parameters.
    pub fn setTitle(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "TITLE", void, void, arg);
    }


    /// 
    /// MULTILINE: can be Yes or No.
    /// Defines if the edit box can have more than one line.
    /// For 'm' parameter.
    pub fn getMultiline(self: *Self) bool {
        return c.getBoolAttribute(self, "MULTILINE", void, void);
    }


    /// 
    /// MULTILINE: can be Yes or No.
    /// Defines if the edit box can have more than one line.
    /// For 'm' parameter.
    pub fn setMultiline(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "MULTILINE", void, void, arg);
    }

    pub fn getFilter(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FILTER", void, void);
    }

    pub fn setFilter(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FILTER", void, void, arg);
    }


    /// 
    /// TIP: text of the tip.
    /// For all parameters.
    pub fn getTip(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "TIP", void, void);
    }


    /// 
    /// TIP: text of the tip.
    /// For all parameters.
    pub fn setTip(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "TIP", void, void, arg);
    }

    pub fn getMax(self: *Self) f64 {
        return c.getDoubleAttribute(self, "MAX", void, void);
    }

    pub fn setMax(self: *Self, arg: f64) void {
        c.setDoubleAttribute(self, "MAX", void, void, arg);
    }


    /// 
    /// BUTTON1, BUTTON2, BUTTON3: button titles.
    /// Default is "OK/Cancel/Help" for regular IupGetParam, and "Apply/Reset/Help"
    /// when IupParamBox is directly used.
    /// For 'u' parameter.
    pub fn getButton1(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "BUTTON1", void, void);
    }


    /// 
    /// BUTTON1, BUTTON2, BUTTON3: button titles.
    /// Default is "OK/Cancel/Help" for regular IupGetParam, and "Apply/Reset/Help"
    /// when IupParamBox is directly used.
    /// For 'u' parameter.
    pub fn setButton1(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "BUTTON1", void, void, arg);
    }

    pub fn getButton2(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "BUTTON2", void, void);
    }

    pub fn setButton2(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "BUTTON2", void, void, arg);
    }


    /// 
    /// MASK: mask for the edit box input.
    /// For 's' and 'm' parameters.
    pub fn getMask(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "MASK", void, void);
    }


    /// 
    /// MASK: mask for the edit box input.
    /// For 's' and 'm' parameters.
    pub fn setMask(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "MASK", void, void, arg);
    }

    pub fn getButton3(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "BUTTON3", void, void);
    }

    pub fn setButton3(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "BUTTON3", void, void, arg);
    }


    /// 
    /// TYPE: can be BOOLEAN ('b'), LIST ('l'), OPTIONS ('o'), REAL ('A', 'a', 'R',
    /// 'r'), STRING ('m', 's'), INTEGER ('i'), DATE ('d'), FILE ('f'), COLOR
    /// ('c'), SEPARATOR ('t'), BUTTONNAMES ('u'), PARAMBOX ('x') and HANDLE ('h').
    /// And describe the type of the parameter.
    /// For all parameters.
    pub fn getType(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "TYPE", void, void);
    }


    /// 
    /// TYPE: can be BOOLEAN ('b'), LIST ('l'), OPTIONS ('o'), REAL ('A', 'a', 'R',
    /// 'r'), STRING ('m', 's'), INTEGER ('i'), DATE ('d'), FILE ('f'), COLOR
    /// ('c'), SEPARATOR ('t'), BUTTONNAMES ('u'), PARAMBOX ('x') and HANDLE ('h').
    /// And describe the type of the parameter.
    /// For all parameters.
    pub fn setType(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "TYPE", void, void, arg);
    }


    /// 
    /// VALUE - the value of the parameter.
    /// IupGetFloat and IupGetInt can also be used.
    /// For the current parameter inside the callback contains the new value that
    /// will be applied to the control, to get the old value use the VALUE
    /// attribute for the CONTROL returned Ihandle*.
    pub fn getValue(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "VALUE", void, void);
    }


    /// 
    /// VALUE - the value of the parameter.
    /// IupGetFloat and IupGetInt can also be used.
    /// For the current parameter inside the callback contains the new value that
    /// will be applied to the control, to get the old value use the VALUE
    /// attribute for the CONTROL returned Ihandle*.
    pub fn setValue(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "VALUE", void, void, arg);
    }


    /// 
    /// DIALOGTYPE, FILTER, DIRECTORY, NOCHANGEDIR, NOOVERWRITEPROMPT: used for the
    /// FILE parameter dialog.
    /// See IupFileDlg.
    /// For 'f' parameter.
    pub fn getDialogType(self: *Self) ?DialogType {
        var ret = c.getStrAttribute(self, "DIALOGTYPE", void, void);

        if (std.ascii.eqlIgnoreCase("SAVE", ret)) return .Save;
        if (std.ascii.eqlIgnoreCase("DIR", ret)) return .Dir;
        if (std.ascii.eqlIgnoreCase("OPEN", ret)) return .Open;
        return null;
    }


    /// 
    /// DIALOGTYPE, FILTER, DIRECTORY, NOCHANGEDIR, NOOVERWRITEPROMPT: used for the
    /// FILE parameter dialog.
    /// See IupFileDlg.
    /// For 'f' parameter.
    pub fn setDialogType(self: *Self, arg: ?DialogType) void {
        if (arg) |value| switch (value) {
            .Save => c.setStrAttribute(self, "DIALOGTYPE", void, void, "SAVE"),
            .Dir => c.setStrAttribute(self, "DIALOGTYPE", void, void, "DIR"),
            .Open => c.setStrAttribute(self, "DIALOGTYPE", void, void, "OPEN"),
        } else {
            c.clearAttribute(self, "DIALOGTYPE", void, void);
        }
    }

    pub fn getNoChangeDir(self: *Self) bool {
        return c.getBoolAttribute(self, "NOCHANGEDIR", void, void);
    }

    pub fn setNoChangeDir(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "NOCHANGEDIR", void, void, arg);
    }

    pub fn getMin(self: *Self) f64 {
        return c.getDoubleAttribute(self, "MIN", void, void);
    }

    pub fn setMin(self: *Self, arg: f64) void {
        c.setDoubleAttribute(self, "MIN", void, void, arg);
    }

    pub fn getStep(self: *Self) f64 {
        return c.getDoubleAttribute(self, "STEP", void, void);
    }

    pub fn setStep(self: *Self, arg: f64) void {
        c.setDoubleAttribute(self, "STEP", void, void, arg);
    }

    pub fn setLDestroyCallback(self: *Self, callback: ?OnLDestroyFn) void {
        const Handler = CallbackHandler(Self, OnLDestroyFn, "LDESTROY_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
    /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Notes If the dialog is visible then it is hidden before it is destroyed.
    /// The callback will be called right after it is hidden.
    /// The callback will be called before all other destroy procedures.
    /// For instance, if the element has children then it is called before the
    /// children are destroyed.
    /// For language binding implementations use the callback name "LDESTROY_CB" to
    /// release memory allocated by the binding for the element.
    /// Also the callback will be called before the language callback.
    /// Affects All.
    pub fn setDestroyCallback(self: *Self, callback: ?OnDestroyFn) void {
        const Handler = CallbackHandler(Self, OnDestroyFn, "DESTROY_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setMapCallback(self: *Self, callback: ?OnMapFn) void {
        const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setPostMessageCallback(self: *Self, callback: ?OnPostMessageFn) void {
        const Handler = CallbackHandler(Self, OnPostMessageFn, "POSTMESSAGE_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setUnmapCallback(self: *Self, callback: ?OnUnmapFn) void {
        const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
        Handler.setCallback(self, callback);
    }
};
