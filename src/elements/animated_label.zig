// This code was generated by a tool.
// IUP Metadata Code Generator
// https://github.com/batiati/IUPMetadata
//
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.

const std = @import("std");

const c = @import("../c.zig");
const iup = @import("../iup.zig");

const Impl = @import("../impl.zig").Impl;
const CallbackHandler = @import("../callback_handler.zig").CallbackHandler;

const debug = std.debug;
const trait = std.meta.trait;

const Element = iup.Element;
const Handle = iup.Handle;
const Error = iup.Error;
const ChildrenIterator = iup.ChildrenIterator;
const Size = iup.Size;
const Margin = iup.Margin;

/// 
/// Creates an animated label interface element, which displays an image that
/// is changed periodically.
/// It uses an animation that is simply an IupUser with several IupImage as children.
/// It inherits from IupLabel.
pub const AnimatedLabel = opaque {
    pub const CLASS_NAME = "animatedlabel";
    const Self = @This();

    pub const OnTouchFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: i32, arg3: [:0]const u8) anyerror!void;

    pub const OnDropMotionFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: [:0]const u8) anyerror!void;

    pub const OnDragEndFn = fn (self: *Self, arg0: i32) anyerror!void;

    pub const OnDragBeginFn = fn (self: *Self, arg0: i32, arg1: i32) anyerror!void;

    pub const OnMultiTouchFn = fn (self: *Self, arg0: i32, arg1: *i32, arg2: *i32, arg3: *i32) anyerror!void;

    /// 
    /// MOTION_CB MOTION_CB Action generated when the mouse moves.
    /// Callback int function(Ihandle *ih, int x, int y, char *status); [in C]
    /// ih:motion_cb(x, y: number, status: string) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of mouse buttons and certain keyboard keys at the moment the
    /// event was generated.
    /// The same macros used for BUTTON_CB can be used for this status.
    /// Notes Between press and release all mouse events are redirected only to
    /// this control, even if the cursor moves outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupGLCanvas
    pub const OnMotionFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: [:0]const u8) anyerror!void;

    /// 
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnMapFn = fn (self: *Self) anyerror!void;

    /// 
    /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also LEAVEWINDOW_CB
    pub const OnEnterWindowFn = fn (self: *Self) anyerror!void;

    pub const OnDropDataFn = fn (self: *Self, arg0: [:0]const u8, arg1: *iup.Unknow, arg2: i32, arg3: i32, arg4: i32) anyerror!void;

    pub const OnDragDataFn = fn (self: *Self, arg0: [:0]const u8, arg1: *iup.Unknow, arg2: i32) anyerror!void;

    pub const OnDragDataSizeFn = fn (self: *Self, arg0: [:0]const u8) anyerror!void;

    /// 
    /// DROPFILES_CB DROPFILES_CB Action called when a file is "dropped" into the control.
    /// When several files are dropped at once, the callback is called several
    /// times, once for each file.
    /// If defined after the element is mapped then the attribute DROPFILESTARGET
    /// must be set to YES.
    /// [Windows and GTK Only] (GTK 2.6) Callback int function(Ihandle *ih, const
    /// char* filename, int num, int x, int y); [in C] ih:dropfiles_cb(filename:
    /// string; num, x, y: number) -> (ret: number) [in Lua] ih: identifier of the
    /// element that activated the event.
    /// filename: Name of the dropped file.
    /// num: Number index of the dropped file.
    /// If several files are dropped, num is the index of the dropped file starting
    /// from "total-1" to "0".
    /// x: X coordinate of the point where the user released the mouse button.
    /// y: Y coordinate of the point where the user released the mouse button.
    /// Returns: If IUP_IGNORE is returned the callback will NOT be called for the
    /// next dropped files, and the processing of dropped files will be interrupted.
    /// Affects IupDialog, IupCanvas, IupGLCanvas, IupText, IupList
    pub const OnDropFilesFn = fn (self: *Self, arg0: [:0]const u8, arg1: i32, arg2: i32, arg3: i32) anyerror!void;

    /// 
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnUnmapFn = fn (self: *Self) anyerror!void;

    /// 
    /// BUTTON_CB BUTTON_CB Action generated when a mouse button is pressed or released.
    /// Callback int function(Ihandle* ih, int button, int pressed, int x, int y,
    /// char* status); [in C] ih:button_cb(button, pressed, x, y: number, status:
    /// string) -> (ret: number) [in Lua] ih: identifies the element that activated
    /// the event.
    /// button: identifies the activated mouse button: IUP_BUTTON1 - left mouse
    /// button (button 1); IUP_BUTTON2 - middle mouse button (button 2);
    /// IUP_BUTTON3 - right mouse button (button 3).
    /// pressed: indicates the state of the button: 0 - mouse button was released;
    /// 1 - mouse button was pressed.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of the mouse buttons and some keyboard keys at the moment
    /// the event is generated.
    /// The following macros must be used for verification: iup_isshift(status)
    /// iup_iscontrol(status) iup_isbutton1(status) iup_isbutton2(status)
    /// iup_isbutton3(status) iup_isbutton4(status) iup_isbutton5(status)
    /// iup_isdouble(status) iup_isalt(status) iup_issys(status) They return 1 if
    /// the respective key or button is pressed, and 0 otherwise.
    /// These macros are also available in Lua, returning a boolean.
    /// Returns: IUP_CLOSE will be processed.
    /// On some controls if IUP_IGNORE is returned the action is ignored (this is
    /// system dependent).
    /// Notes This callback can be used to customize a button behavior.
    /// For a standard button behavior use the ACTION callback of the IupButton.
    /// For a single click the callback is called twice, one for pressed=1 and one
    /// for pressed=0.
    /// Only after both calls the ACTION callback is called.
    /// In Windows, if a dialog is shown or popup in any situation there could be
    /// unpredictable results because the native system still has processing to be
    /// done even after the callback is called.
    /// A double click is preceded by two single clicks, one for pressed=1 and one
    /// for pressed=0, and followed by a press=0, all three without the double
    /// click flag set.
    /// In GTK, it is preceded by an additional two single clicks sequence.
    /// For example, for one double click all the following calls are made:
    /// BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) BUTTON_CB(but=1 (0), x=154, y=83 [
    /// 1 ]) BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1
    /// (0), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1 (1), x=154, y=83 [ 1
    /// D ]) BUTTON_CB(but=1 (0), x=154, y=83 [ 1 ]) Between press and release all
    /// mouse events are redirected only to this control, even if the cursor moves
    /// outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupButton, IupText, IupList, IupGLCanvas
    pub const OnButtonFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: [:0]const u8) anyerror!void;

    /// 
    /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also ENTERWINDOW_CB
    pub const OnLeaveWindowFn = fn (self: *Self) anyerror!void;

    pub const ZOrder = enum {
        Top,
        Bottom,
    };

    pub const Expand = enum {
        Yes,
        Horizontal,
        Vertical,
        HorizontalFree,
        VerticalFree,
        No,
    };

    pub const Floating = enum {
        Yes,
        Ignore,
        No,
    };

    pub const Initializer = struct {
        last_error: ?anyerror = null,
        ref: *Self,

        ///
        /// Returns a pointer to IUP element or an error.
        /// Only top-level or detached elements needs to be unwraped,
        pub fn unwrap(self: Initializer) !*Self {
            if (self.last_error) |e| {
                return e;
            } else {
                return self.ref;
            }
        }

        ///
        /// Captures a reference into a external variable
        /// Allows to capture some references even using full declarative API
        pub fn capture(self: *Initializer, ref: **Self) Initializer {
            ref.* = self.ref;
            return self.*;
        }

        pub fn setStrAttribute(self: *Initializer, attributeName: [:0]const u8, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setStrAttribute(self.ref, attributeName, arg);
            return self.*;
        }

        pub fn setIntAttribute(self: *Initializer, attributeName: [:0]const u8, arg: i32) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setIntAttribute(self.ref, attributeName, arg);
            return self.*;
        }

        pub fn setBoolAttribute(self: *Initializer, attributeName: [:0]const u8, arg: bool) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setBoolAttribute(self.ref, attributeName, bool);
            return self.*;
        }

        pub fn setPtrAttribute(self: *Initializer, comptime T: type, attributeName: [:0]const u8, value: ?*T) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setPtrAttribute(self.ref, T, attributeName, value);
            return self.*;
        }

        pub fn setFgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "FGCOLOR", .{}, rgb);
            return self.*;
        }

        pub fn setTipBalloon(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TIPBALLOON", .{}, arg);
            return self.*;
        }

        pub fn setHandleName(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "HANDLENAME", .{}, arg);
            return self.*;
        }

        pub fn setTipBgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "TIPBGCOLOR", .{}, rgb);
            return self.*;
        }

        pub fn setWordWrap(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "WORDWRAP", .{}, arg);
            return self.*;
        }


        /// 
        /// FRAMETIME: The time between each frame.
        /// If the IupUser element has a FRAMETIME attribute it will be used to set the
        /// IupAnimatedLabel FRAMETIME attribute, but it can be overwritten later on.
        pub fn setFrameTime(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FRAMETIME", .{}, arg);
            return self.*;
        }

        pub fn setMaxSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "MAXSIZE", .{}, value);
            return self.*;
        }

        pub fn setPosition(self: *Initializer, x: i32, y: i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
            c.setStrAttribute(self.ref, "POSITION", .{}, value);
            return self.*;
        }

        pub fn setDropFilesTarget(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DROPFILESTARGET", .{}, arg);
            return self.*;
        }

        pub fn setTip(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "TIP", .{}, arg);
            return self.*;
        }

        pub fn setCanFocus(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "CANFOCUS", .{}, arg);
            return self.*;
        }

        pub fn setDragSourceMove(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DRAGSOURCEMOVE", .{}, arg);
            return self.*;
        }

        pub fn setVisible(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "VISIBLE", .{}, arg);
            return self.*;
        }

        pub fn setSeparator(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "SEPARATOR", .{}, arg);
            return self.*;
        }

        pub fn setImage(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "IMAGE", .{}, arg);
            return self.*;
        }

        pub fn zOrder(self: *Initializer, arg: ?ZOrder) Initializer {
            if (arg) |value| switch (value) {
                .Top => c.setStrAttribute(self.ref, "ZORDER", .{}, "TOP"),
                .Bottom => c.setStrAttribute(self.ref, "ZORDER", .{}, "BOTTOM"),
            } else {
                c.clearAttribute(self.ref, "ZORDER", .{});
            }
            return self.*;
        }

        pub fn setDragDrop(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DRAGDROP", .{}, arg);
            return self.*;
        }

        pub fn setTheme(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "THEME", .{}, arg);
            return self.*;
        }

        pub fn setDragCursorCopy(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "DRAGCURSORCOPY", .{}, arg);
            return self.*;
        }

        pub fn setHtTransparent(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "HTTRANSPARENT", .{}, arg);
            return self.*;
        }

        pub fn setExpand(self: *Initializer, arg: ?Expand) Initializer {
            if (arg) |value| switch (value) {
                .Yes => c.setStrAttribute(self.ref, "EXPAND", .{}, "YES"),
                .Horizontal => c.setStrAttribute(self.ref, "EXPAND", .{}, "HORIZONTAL"),
                .Vertical => c.setStrAttribute(self.ref, "EXPAND", .{}, "VERTICAL"),
                .HorizontalFree => c.setStrAttribute(self.ref, "EXPAND", .{}, "HORIZONTALFREE"),
                .VerticalFree => c.setStrAttribute(self.ref, "EXPAND", .{}, "VERTICALFREE"),
                .No => c.setStrAttribute(self.ref, "EXPAND", .{}, "NO"),
            } else {
                c.clearAttribute(self.ref, "EXPAND", .{});
            }
            return self.*;
        }

        pub fn setSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "SIZE", .{}, value);
            return self.*;
        }

        pub fn setPadding(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "PADDING", .{}, value);
            return self.*;
        }

        pub fn setFontSize(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "FONTSIZE", .{}, arg);
            return self.*;
        }

        pub fn setDropTypes(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "DROPTYPES", .{}, arg);
            return self.*;
        }

        pub fn setUserSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "USERSIZE", .{}, value);
            return self.*;
        }

        pub fn setTipDelay(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "TIPDELAY", .{}, arg);
            return self.*;
        }

        pub fn setDragStart(self: *Initializer, x: i32, y: i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
            c.setStrAttribute(self.ref, "DRAGSTART", .{}, value);
            return self.*;
        }

        pub fn setTitle(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "TITLE", .{}, arg);
            return self.*;
        }

        pub fn setPropagateFocus(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "PROPAGATEFOCUS", .{}, arg);
            return self.*;
        }

        pub fn setBgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "BGCOLOR", .{}, rgb);
            return self.*;
        }

        pub fn setTipBalloonTitle(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "TIPBALLOONTITLE", .{}, arg);
            return self.*;
        }

        pub fn setDropTarget(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DROPTARGET", .{}, arg);
            return self.*;
        }

        pub fn setDragSource(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DRAGSOURCE", .{}, arg);
            return self.*;
        }

        pub fn setMarkup(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "MARKUP", .{}, arg);
            return self.*;
        }

        pub fn setFloating(self: *Initializer, arg: ?Floating) Initializer {
            if (arg) |value| switch (value) {
                .Yes => c.setStrAttribute(self.ref, "FLOATING", .{}, "YES"),
                .Ignore => c.setStrAttribute(self.ref, "FLOATING", .{}, "IGNORE"),
                .No => c.setStrAttribute(self.ref, "FLOATING", .{}, "NO"),
            } else {
                c.clearAttribute(self.ref, "FLOATING", .{});
            }
            return self.*;
        }

        pub fn setNormalizerGroup(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "NORMALIZERGROUP", .{}, arg);
            return self.*;
        }

        pub fn setRasterSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "RASTERSIZE", .{}, value);
            return self.*;
        }


        /// 
        /// START (write-only): starts the animation.
        /// The value is ignored.
        /// By default the animation is stopped.
        pub fn start(self: *Initializer) Initializer {
            c.setStrAttribute(self.ref, "START", .{}, null);
            return self.*;
        }

        pub fn setTipFgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "TIPFGCOLOR", .{}, rgb);
            return self.*;
        }

        pub fn setControlId(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "CONTROLID", .{}, arg);
            return self.*;
        }

        pub fn setFontFace(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FONTFACE", .{}, arg);
            return self.*;
        }

        pub fn setName(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "NAME", .{}, arg);
            return self.*;
        }

        pub fn setEllipsis(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "ELLIPSIS", .{}, arg);
            return self.*;
        }

        pub fn setTipBalloonTitleIcon(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TIPBALLOONTITLEICON", .{}, arg);
            return self.*;
        }

        pub fn setCPadding(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "CPADDING", .{}, value);
            return self.*;
        }

        pub fn setActive(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "ACTIVE", .{}, arg);
            return self.*;
        }

        pub fn setTipVisible(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TIPVISIBLE", .{}, arg);
            return self.*;
        }

        pub fn setExpandWeight(self: *Initializer, arg: f64) Initializer {
            c.setDoubleAttribute(self.ref, "EXPANDWEIGHT", .{}, arg);
            return self.*;
        }

        pub fn setMinSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "MINSIZE", .{}, value);
            return self.*;
        }

        pub fn setNTheme(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "NTHEME", .{}, arg);
            return self.*;
        }


        /// 
        /// ANIMATION: the name of the element that contains the list of images.
        /// The value passed must be the name of an IupUser element with several
        /// IupImage as children.
        /// Use IupSetHandle or IupSetAttributeHandle to associate a child to a name.
        /// In Lua you can also use the element reference directly.
        pub fn setAnimation(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "ANIMATION", .{}, arg);
            return self.*;
        }

        pub fn setDragTypes(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "DRAGTYPES", .{}, arg);
            return self.*;
        }

        pub fn setFontStyle(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FONTSTYLE", .{}, arg);
            return self.*;
        }

        pub fn setTouch(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TOUCH", .{}, arg);
            return self.*;
        }

        pub fn setDragCursor(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "DRAGCURSOR", .{}, arg);
            return self.*;
        }

        pub fn setFont(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FONT", .{}, arg);
            return self.*;
        }

        pub fn setTouchCallback(self: *Initializer, callback: ?OnTouchFn) Initializer {
            const Handler = CallbackHandler(Self, OnTouchFn, "TOUCH_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDropMotionCallback(self: *Initializer, callback: ?OnDropMotionFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropMotionFn, "DROPMOTION_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDragEndCallback(self: *Initializer, callback: ?OnDragEndFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragEndFn, "DRAGEND_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDragBeginCallback(self: *Initializer, callback: ?OnDragBeginFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragBeginFn, "DRAGBEGIN_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setMultiTouchCallback(self: *Initializer, callback: ?OnMultiTouchFn) Initializer {
            const Handler = CallbackHandler(Self, OnMultiTouchFn, "MULTITOUCH_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// MOTION_CB MOTION_CB Action generated when the mouse moves.
        /// Callback int function(Ihandle *ih, int x, int y, char *status); [in C]
        /// ih:motion_cb(x, y: number, status: string) -> (ret: number) [in Lua] ih:
        /// identifier of the element that activated the event.
        /// x, y: position in the canvas where the event has occurred, in pixels.
        /// status: status of mouse buttons and certain keyboard keys at the moment the
        /// event was generated.
        /// The same macros used for BUTTON_CB can be used for this status.
        /// Notes Between press and release all mouse events are redirected only to
        /// this control, even if the cursor moves outside the element.
        /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
        /// called with coordinates outside the element rectangle.
        /// Affects IupCanvas, IupGLCanvas
        pub fn setMotionCallback(self: *Initializer, callback: ?OnMotionFn) Initializer {
            const Handler = CallbackHandler(Self, OnMotionFn, "MOTION_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
        /// updated in IupMap.
        /// When the element is a dialog, it is called after the layout is updated.
        /// For all other elements is called before the layout is updated, so the
        /// element current size will still be 0x0 during MAP_CB (since 3.14).
        /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
        /// Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setMapCallback(self: *Initializer, callback: ?OnMapFn) Initializer {
            const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
        /// native element.
        /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Notes When the cursor is moved from one element to another, the call order
        /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
        /// control followed by the ENTERWINDOW_CB callback of the new control.
        /// (since 3.14) If the mouse button is hold pressed and the cursor moves
        /// outside the element the behavior is system dependent.
        /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
        /// GTK the callbacks are called.
        /// Affects All controls with user interaction.
        /// See Also LEAVEWINDOW_CB
        pub fn setEnterWindowCallback(self: *Initializer, callback: ?OnEnterWindowFn) Initializer {
            const Handler = CallbackHandler(Self, OnEnterWindowFn, "ENTERWINDOW_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDropDataCallback(self: *Initializer, callback: ?OnDropDataFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropDataFn, "DROPDATA_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDragDataCallback(self: *Initializer, callback: ?OnDragDataFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragDataFn, "DRAGDATA_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDragDataSizeCallback(self: *Initializer, callback: ?OnDragDataSizeFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragDataSizeFn, "DRAGDATASIZE_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// DROPFILES_CB DROPFILES_CB Action called when a file is "dropped" into the control.
        /// When several files are dropped at once, the callback is called several
        /// times, once for each file.
        /// If defined after the element is mapped then the attribute DROPFILESTARGET
        /// must be set to YES.
        /// [Windows and GTK Only] (GTK 2.6) Callback int function(Ihandle *ih, const
        /// char* filename, int num, int x, int y); [in C] ih:dropfiles_cb(filename:
        /// string; num, x, y: number) -> (ret: number) [in Lua] ih: identifier of the
        /// element that activated the event.
        /// filename: Name of the dropped file.
        /// num: Number index of the dropped file.
        /// If several files are dropped, num is the index of the dropped file starting
        /// from "total-1" to "0".
        /// x: X coordinate of the point where the user released the mouse button.
        /// y: Y coordinate of the point where the user released the mouse button.
        /// Returns: If IUP_IGNORE is returned the callback will NOT be called for the
        /// next dropped files, and the processing of dropped files will be interrupted.
        /// Affects IupDialog, IupCanvas, IupGLCanvas, IupText, IupList
        pub fn setDropFilesCallback(self: *Initializer, callback: ?OnDropFilesFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropFilesFn, "DROPFILES_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
        /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setUnmapCallback(self: *Initializer, callback: ?OnUnmapFn) Initializer {
            const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// BUTTON_CB BUTTON_CB Action generated when a mouse button is pressed or released.
        /// Callback int function(Ihandle* ih, int button, int pressed, int x, int y,
        /// char* status); [in C] ih:button_cb(button, pressed, x, y: number, status:
        /// string) -> (ret: number) [in Lua] ih: identifies the element that activated
        /// the event.
        /// button: identifies the activated mouse button: IUP_BUTTON1 - left mouse
        /// button (button 1); IUP_BUTTON2 - middle mouse button (button 2);
        /// IUP_BUTTON3 - right mouse button (button 3).
        /// pressed: indicates the state of the button: 0 - mouse button was released;
        /// 1 - mouse button was pressed.
        /// x, y: position in the canvas where the event has occurred, in pixels.
        /// status: status of the mouse buttons and some keyboard keys at the moment
        /// the event is generated.
        /// The following macros must be used for verification: iup_isshift(status)
        /// iup_iscontrol(status) iup_isbutton1(status) iup_isbutton2(status)
        /// iup_isbutton3(status) iup_isbutton4(status) iup_isbutton5(status)
        /// iup_isdouble(status) iup_isalt(status) iup_issys(status) They return 1 if
        /// the respective key or button is pressed, and 0 otherwise.
        /// These macros are also available in Lua, returning a boolean.
        /// Returns: IUP_CLOSE will be processed.
        /// On some controls if IUP_IGNORE is returned the action is ignored (this is
        /// system dependent).
        /// Notes This callback can be used to customize a button behavior.
        /// For a standard button behavior use the ACTION callback of the IupButton.
        /// For a single click the callback is called twice, one for pressed=1 and one
        /// for pressed=0.
        /// Only after both calls the ACTION callback is called.
        /// In Windows, if a dialog is shown or popup in any situation there could be
        /// unpredictable results because the native system still has processing to be
        /// done even after the callback is called.
        /// A double click is preceded by two single clicks, one for pressed=1 and one
        /// for pressed=0, and followed by a press=0, all three without the double
        /// click flag set.
        /// In GTK, it is preceded by an additional two single clicks sequence.
        /// For example, for one double click all the following calls are made:
        /// BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) BUTTON_CB(but=1 (0), x=154, y=83 [
        /// 1 ]) BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1
        /// (0), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1 (1), x=154, y=83 [ 1
        /// D ]) BUTTON_CB(but=1 (0), x=154, y=83 [ 1 ]) Between press and release all
        /// mouse events are redirected only to this control, even if the cursor moves
        /// outside the element.
        /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
        /// called with coordinates outside the element rectangle.
        /// Affects IupCanvas, IupButton, IupText, IupList, IupGLCanvas
        pub fn setButtonCallback(self: *Initializer, callback: ?OnButtonFn) Initializer {
            const Handler = CallbackHandler(Self, OnButtonFn, "BUTTON_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
        /// native element.
        /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Notes When the cursor is moved from one element to another, the call order
        /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
        /// control followed by the ENTERWINDOW_CB callback of the new control.
        /// (since 3.14) If the mouse button is hold pressed and the cursor moves
        /// outside the element the behavior is system dependent.
        /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
        /// GTK the callbacks are called.
        /// Affects All controls with user interaction.
        /// See Also ENTERWINDOW_CB
        pub fn setLeaveWindowCallback(self: *Initializer, callback: ?OnLeaveWindowFn) Initializer {
            const Handler = CallbackHandler(Self, OnLeaveWindowFn, "LEAVEWINDOW_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }
    };

    ///
    /// Creates an interface element given its class name and parameters.
    /// After creation the element still needs to be attached to a container and mapped to the native system so it can be visible.
    pub fn init() Initializer {
        var handle = c.IupCreate(Self.CLASS_NAME);

        if (handle) |valid| {
            return .{
                .ref = @ptrCast(*Self, valid),
            };
        } else {
            return .{ .ref = undefined, .last_error = Error.NotInitialized };
        }
    }

    /// 
    /// Destroys an interface element and all its children.
    /// Only dialogs, timers, popup menus and images should be normally destroyed, but detached elements can also be destroyed.        
    pub fn deinit(self: *Self) void {
        c.IupDestroy(c.getHandle(self));
    }

    pub fn setStrAttribute(self: *Self, attribute: [:0]const u8, arg: [:0]const u8) void {
        c.setStrAttribute(self, attribute, .{}, arg);
    }

    pub fn getStrAttribute(self: *Self, attribute: [:0]const u8) [:0]const u8 {
        return c.getStrAttribute(self, attribute, .{});
    }

    pub fn setIntAttribute(self: *Self, attribute: [:0]const u8, arg: i32) void {
        c.setIntAttribute(self, attribute, .{}, arg);
    }

    pub fn getIntAttribute(self: *Self, attribute: [:0]const u8) i32 {
        return c.getIntAttribute(self, attribute, .{});
    }

    pub fn setBoolAttribute(self: *Self, attribute: [:0]const u8, arg: bool) void {
        c.setBoolAttribute(self, attribute, .{}, arg);
    }

    pub fn getBoolAttribute(self: *Self, attribute: [:0]const u8) bool {
        return c.getBoolAttribute(self, attribute, .{});
    }

    pub fn getPtrAttribute(handle: *Self, comptime T: type, attribute: [:0]const u8) ?*T {
        return c.getPtrAttribute(T, handle, attribute, .{});
    }

    pub fn setPtrAttribute(handle: *Self, comptime T: type, attribute: [:0]const u8, value: ?*T) void {
        c.setPtrAttribute(T, handle, attribute, .{}, value);
    }

    ///
    ///
    pub fn getDialog(self: *Self) ?*iup.Dialog {
        if (c.IupGetDialog(c.getHandle(self))) |handle| {
            return c.fromHandle(iup.Dialog, handle);
        } else {
            return null;
        }
    }

    ///
    /// Returns the the child element that has the NAME attribute equals to the given value on the same dialog hierarchy.
    /// Works also for children of a menu that is associated with a dialog.
    pub fn getDialogChild(self: *Self, byName: [:0]const u8) ?Element {
        var child = c.IupGetDialogChild(c.getHandle(self), c.toCStr(byName)) orelse return null;
        var className = c.fromCStr(c.IupGetClassName(child));

        return Element.fromClassName(className, child);
    }

    ///
    /// Updates the size and layout of all controls in the same dialog.
    /// To be used after changing size attributes, or attributes that affect the size of the control. Can be used for any element inside a dialog, but the layout of the dialog and all controls will be updated. It can change the layout of all the controls inside the dialog because of the dynamic layout positioning.
    pub fn refresh(self: *Self) void {
        try Impl(Self).refresh(self);
    }

    pub fn getFgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "FGCOLOR", .{});
    }

    pub fn setFgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "FGCOLOR", .{}, rgb);
    }

    pub fn getTipBalloon(self: *Self) bool {
        return c.getBoolAttribute(self, "TIPBALLOON", .{});
    }

    pub fn setTipBalloon(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TIPBALLOON", .{}, arg);
    }

    pub fn getHandleName(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "HANDLENAME", .{});
    }

    pub fn setHandleName(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "HANDLENAME", .{}, arg);
    }

    pub fn getTipBgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "TIPBGCOLOR", .{});
    }

    pub fn setTipBgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "TIPBGCOLOR", .{}, rgb);
    }

    pub fn getWordWrap(self: *Self) bool {
        return c.getBoolAttribute(self, "WORDWRAP", .{});
    }

    pub fn setWordWrap(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "WORDWRAP", .{}, arg);
    }


    /// 
    /// FRAMETIME: The time between each frame.
    /// If the IupUser element has a FRAMETIME attribute it will be used to set the
    /// IupAnimatedLabel FRAMETIME attribute, but it can be overwritten later on.
    pub fn getFrameTime(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FRAMETIME", .{});
    }


    /// 
    /// FRAMETIME: The time between each frame.
    /// If the IupUser element has a FRAMETIME attribute it will be used to set the
    /// IupAnimatedLabel FRAMETIME attribute, but it can be overwritten later on.
    pub fn setFrameTime(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FRAMETIME", .{}, arg);
    }

    pub fn getMaxSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "MAXSIZE", .{});
        return Size.parse(str);
    }

    pub fn setMaxSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "MAXSIZE", .{}, value);
    }

    pub fn getScreenPosition(self: *Self) iup.XYPos {
        var str = c.getStrAttribute(self, "SCREENPOSITION", .{});
        return iup.XYPos.parse(str, ',');
    }

    pub fn getPosition(self: *Self) iup.XYPos {
        var str = c.getStrAttribute(self, "POSITION", .{});
        return iup.XYPos.parse(str, ',');
    }

    pub fn setPosition(self: *Self, x: i32, y: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
        c.setStrAttribute(self, "POSITION", .{}, value);
    }

    pub fn getDropFilesTarget(self: *Self) bool {
        return c.getBoolAttribute(self, "DROPFILESTARGET", .{});
    }

    pub fn setDropFilesTarget(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DROPFILESTARGET", .{}, arg);
    }

    pub fn getTip(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "TIP", .{});
    }

    pub fn setTip(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "TIP", .{}, arg);
    }

    pub fn getCanFocus(self: *Self) bool {
        return c.getBoolAttribute(self, "CANFOCUS", .{});
    }

    pub fn setCanFocus(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "CANFOCUS", .{}, arg);
    }

    pub fn getDragSourceMove(self: *Self) bool {
        return c.getBoolAttribute(self, "DRAGSOURCEMOVE", .{});
    }

    pub fn setDragSourceMove(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DRAGSOURCEMOVE", .{}, arg);
    }

    pub fn getVisible(self: *Self) bool {
        return c.getBoolAttribute(self, "VISIBLE", .{});
    }

    pub fn setVisible(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "VISIBLE", .{}, arg);
    }

    pub fn getSeparator(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "SEPARATOR", .{});
    }

    pub fn setSeparator(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "SEPARATOR", .{}, arg);
    }

    pub fn getImage(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "IMAGE", .{});
    }

    pub fn setImage(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "IMAGE", .{}, arg);
    }

    pub fn zOrder(self: *Self, arg: ?ZOrder) void {
        if (arg) |value| switch (value) {
            .Top => c.setStrAttribute(self, "ZORDER", .{}, "TOP"),
            .Bottom => c.setStrAttribute(self, "ZORDER", .{}, "BOTTOM"),
        } else {
            c.clearAttribute(self, "ZORDER", .{});
        }
    }

    pub fn getX(self: *Self) i32 {
        return c.getIntAttribute(self, "X", .{});
    }

    pub fn getY(self: *Self) i32 {
        return c.getIntAttribute(self, "Y", .{});
    }

    pub fn getDragDrop(self: *Self) bool {
        return c.getBoolAttribute(self, "DRAGDROP", .{});
    }

    pub fn setDragDrop(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DRAGDROP", .{}, arg);
    }

    pub fn getTheme(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "THEME", .{});
    }

    pub fn setTheme(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "THEME", .{}, arg);
    }

    pub fn getDragCursorCopy(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "DRAGCURSORCOPY", .{});
    }

    pub fn setDragCursorCopy(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "DRAGCURSORCOPY", .{}, arg);
    }

    pub fn getHtTransparent(self: *Self) bool {
        return c.getBoolAttribute(self, "HTTRANSPARENT", .{});
    }

    pub fn setHtTransparent(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "HTTRANSPARENT", .{}, arg);
    }

    pub fn getExpand(self: *Self) ?Expand {
        var ret = c.getStrAttribute(self, "EXPAND", .{});

        if (std.ascii.eqlIgnoreCase("YES", ret)) return .Yes;
        if (std.ascii.eqlIgnoreCase("HORIZONTAL", ret)) return .Horizontal;
        if (std.ascii.eqlIgnoreCase("VERTICAL", ret)) return .Vertical;
        if (std.ascii.eqlIgnoreCase("HORIZONTALFREE", ret)) return .HorizontalFree;
        if (std.ascii.eqlIgnoreCase("VERTICALFREE", ret)) return .VerticalFree;
        if (std.ascii.eqlIgnoreCase("NO", ret)) return .No;
        return null;
    }

    pub fn setExpand(self: *Self, arg: ?Expand) void {
        if (arg) |value| switch (value) {
            .Yes => c.setStrAttribute(self, "EXPAND", .{}, "YES"),
            .Horizontal => c.setStrAttribute(self, "EXPAND", .{}, "HORIZONTAL"),
            .Vertical => c.setStrAttribute(self, "EXPAND", .{}, "VERTICAL"),
            .HorizontalFree => c.setStrAttribute(self, "EXPAND", .{}, "HORIZONTALFREE"),
            .VerticalFree => c.setStrAttribute(self, "EXPAND", .{}, "VERTICALFREE"),
            .No => c.setStrAttribute(self, "EXPAND", .{}, "NO"),
        } else {
            c.clearAttribute(self, "EXPAND", .{});
        }
    }

    pub fn getSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "SIZE", .{});
        return Size.parse(str);
    }

    pub fn setSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "SIZE", .{}, value);
    }

    pub fn getPadding(self: *Self) Size {
        var str = c.getStrAttribute(self, "PADDING", .{});
        return Size.parse(str);
    }

    pub fn setPadding(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "PADDING", .{}, value);
    }

    pub fn getWId(self: *Self) i32 {
        return c.getIntAttribute(self, "WID", .{});
    }

    pub fn getFontSize(self: *Self) i32 {
        return c.getIntAttribute(self, "FONTSIZE", .{});
    }

    pub fn setFontSize(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "FONTSIZE", .{}, arg);
    }

    pub fn getNaturalSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "NATURALSIZE", .{});
        return Size.parse(str);
    }

    pub fn getDropTypes(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "DROPTYPES", .{});
    }

    pub fn setDropTypes(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "DROPTYPES", .{}, arg);
    }

    pub fn getUserSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "USERSIZE", .{});
        return Size.parse(str);
    }

    pub fn setUserSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "USERSIZE", .{}, value);
    }

    pub fn getTipDelay(self: *Self) i32 {
        return c.getIntAttribute(self, "TIPDELAY", .{});
    }

    pub fn setTipDelay(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "TIPDELAY", .{}, arg);
    }

    pub fn getDragStart(self: *Self) iup.XYPos {
        var str = c.getStrAttribute(self, "DRAGSTART", .{});
        return iup.XYPos.parse(str, ',');
    }

    pub fn setDragStart(self: *Self, x: i32, y: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
        c.setStrAttribute(self, "DRAGSTART", .{}, value);
    }

    pub fn getTitle(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "TITLE", .{});
    }

    pub fn setTitle(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "TITLE", .{}, arg);
    }

    pub fn getPropagateFocus(self: *Self) bool {
        return c.getBoolAttribute(self, "PROPAGATEFOCUS", .{});
    }

    pub fn setPropagateFocus(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "PROPAGATEFOCUS", .{}, arg);
    }

    pub fn getBgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "BGCOLOR", .{});
    }

    pub fn setBgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "BGCOLOR", .{}, rgb);
    }

    pub fn getTipBalloonTitle(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "TIPBALLOONTITLE", .{});
    }

    pub fn setTipBalloonTitle(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "TIPBALLOONTITLE", .{}, arg);
    }

    pub fn getDropTarget(self: *Self) bool {
        return c.getBoolAttribute(self, "DROPTARGET", .{});
    }

    pub fn setDropTarget(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DROPTARGET", .{}, arg);
    }

    pub fn getDragSource(self: *Self) bool {
        return c.getBoolAttribute(self, "DRAGSOURCE", .{});
    }

    pub fn setDragSource(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DRAGSOURCE", .{}, arg);
    }

    pub fn getMarkup(self: *Self) bool {
        return c.getBoolAttribute(self, "MARKUP", .{});
    }

    pub fn setMarkup(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "MARKUP", .{}, arg);
    }

    pub fn getFloating(self: *Self) ?Floating {
        var ret = c.getStrAttribute(self, "FLOATING", .{});

        if (std.ascii.eqlIgnoreCase("YES", ret)) return .Yes;
        if (std.ascii.eqlIgnoreCase("IGNORE", ret)) return .Ignore;
        if (std.ascii.eqlIgnoreCase("NO", ret)) return .No;
        return null;
    }

    pub fn setFloating(self: *Self, arg: ?Floating) void {
        if (arg) |value| switch (value) {
            .Yes => c.setStrAttribute(self, "FLOATING", .{}, "YES"),
            .Ignore => c.setStrAttribute(self, "FLOATING", .{}, "IGNORE"),
            .No => c.setStrAttribute(self, "FLOATING", .{}, "NO"),
        } else {
            c.clearAttribute(self, "FLOATING", .{});
        }
    }

    pub fn getNormalizerGroup(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "NORMALIZERGROUP", .{});
    }

    pub fn setNormalizerGroup(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "NORMALIZERGROUP", .{}, arg);
    }

    pub fn getRasterSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "RASTERSIZE", .{});
        return Size.parse(str);
    }

    pub fn setRasterSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "RASTERSIZE", .{}, value);
    }


    /// 
    /// START (write-only): starts the animation.
    /// The value is ignored.
    /// By default the animation is stopped.
    pub fn start(self: *Self) void {
        c.setStrAttribute(self, "START", .{}, null);
    }

    pub fn getTipFgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "TIPFGCOLOR", .{});
    }

    pub fn setTipFgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "TIPFGCOLOR", .{}, rgb);
    }

    pub fn getControlId(self: *Self) i32 {
        return c.getIntAttribute(self, "CONTROLID", .{});
    }

    pub fn setControlId(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "CONTROLID", .{}, arg);
    }

    pub fn getFontFace(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FONTFACE", .{});
    }

    pub fn setFontFace(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FONTFACE", .{}, arg);
    }

    pub fn getName(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "NAME", .{});
    }

    pub fn setName(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "NAME", .{}, arg);
    }

    pub fn getEllipsis(self: *Self) bool {
        return c.getBoolAttribute(self, "ELLIPSIS", .{});
    }

    pub fn setEllipsis(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "ELLIPSIS", .{}, arg);
    }

    pub fn getTipBalloonTitleIcon(self: *Self) bool {
        return c.getBoolAttribute(self, "TIPBALLOONTITLEICON", .{});
    }

    pub fn setTipBalloonTitleIcon(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TIPBALLOONTITLEICON", .{}, arg);
    }

    pub fn getCPadding(self: *Self) Size {
        var str = c.getStrAttribute(self, "CPADDING", .{});
        return Size.parse(str);
    }

    pub fn setCPadding(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "CPADDING", .{}, value);
    }

    pub fn getActive(self: *Self) bool {
        return c.getBoolAttribute(self, "ACTIVE", .{});
    }

    pub fn setActive(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "ACTIVE", .{}, arg);
    }

    pub fn getTipVisible(self: *Self) bool {
        return c.getBoolAttribute(self, "TIPVISIBLE", .{});
    }

    pub fn setTipVisible(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TIPVISIBLE", .{}, arg);
    }

    pub fn getExpandWeight(self: *Self) f64 {
        return c.getDoubleAttribute(self, "EXPANDWEIGHT", .{});
    }

    pub fn setExpandWeight(self: *Self, arg: f64) void {
        c.setDoubleAttribute(self, "EXPANDWEIGHT", .{}, arg);
    }

    pub fn getMinSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "MINSIZE", .{});
        return Size.parse(str);
    }

    pub fn setMinSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "MINSIZE", .{}, value);
    }

    pub fn getNTheme(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "NTHEME", .{});
    }

    pub fn setNTheme(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "NTHEME", .{}, arg);
    }


    /// 
    /// ANIMATION: the name of the element that contains the list of images.
    /// The value passed must be the name of an IupUser element with several
    /// IupImage as children.
    /// Use IupSetHandle or IupSetAttributeHandle to associate a child to a name.
    /// In Lua you can also use the element reference directly.
    pub fn getAnimation(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "ANIMATION", .{});
    }


    /// 
    /// ANIMATION: the name of the element that contains the list of images.
    /// The value passed must be the name of an IupUser element with several
    /// IupImage as children.
    /// Use IupSetHandle or IupSetAttributeHandle to associate a child to a name.
    /// In Lua you can also use the element reference directly.
    pub fn setAnimation(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "ANIMATION", .{}, arg);
    }

    pub fn getCharSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "CHARSIZE", .{});
        return Size.parse(str);
    }

    pub fn getDragTypes(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "DRAGTYPES", .{});
    }

    pub fn setDragTypes(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "DRAGTYPES", .{}, arg);
    }

    pub fn getFontStyle(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FONTSTYLE", .{});
    }

    pub fn setFontStyle(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FONTSTYLE", .{}, arg);
    }

    pub fn getTouch(self: *Self) bool {
        return c.getBoolAttribute(self, "TOUCH", .{});
    }

    pub fn setTouch(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TOUCH", .{}, arg);
    }

    pub fn getDragCursor(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "DRAGCURSOR", .{});
    }

    pub fn setDragCursor(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "DRAGCURSOR", .{}, arg);
    }

    pub fn getFont(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FONT", .{});
    }

    pub fn setFont(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FONT", .{}, arg);
    }

    pub fn setTouchCallback(self: *Self, callback: ?OnTouchFn) void {
        const Handler = CallbackHandler(Self, OnTouchFn, "TOUCH_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDropMotionCallback(self: *Self, callback: ?OnDropMotionFn) void {
        const Handler = CallbackHandler(Self, OnDropMotionFn, "DROPMOTION_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragEndCallback(self: *Self, callback: ?OnDragEndFn) void {
        const Handler = CallbackHandler(Self, OnDragEndFn, "DRAGEND_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragBeginCallback(self: *Self, callback: ?OnDragBeginFn) void {
        const Handler = CallbackHandler(Self, OnDragBeginFn, "DRAGBEGIN_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setMultiTouchCallback(self: *Self, callback: ?OnMultiTouchFn) void {
        const Handler = CallbackHandler(Self, OnMultiTouchFn, "MULTITOUCH_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// MOTION_CB MOTION_CB Action generated when the mouse moves.
    /// Callback int function(Ihandle *ih, int x, int y, char *status); [in C]
    /// ih:motion_cb(x, y: number, status: string) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of mouse buttons and certain keyboard keys at the moment the
    /// event was generated.
    /// The same macros used for BUTTON_CB can be used for this status.
    /// Notes Between press and release all mouse events are redirected only to
    /// this control, even if the cursor moves outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupGLCanvas
    pub fn setMotionCallback(self: *Self, callback: ?OnMotionFn) void {
        const Handler = CallbackHandler(Self, OnMotionFn, "MOTION_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setMapCallback(self: *Self, callback: ?OnMapFn) void {
        const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also LEAVEWINDOW_CB
    pub fn setEnterWindowCallback(self: *Self, callback: ?OnEnterWindowFn) void {
        const Handler = CallbackHandler(Self, OnEnterWindowFn, "ENTERWINDOW_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDropDataCallback(self: *Self, callback: ?OnDropDataFn) void {
        const Handler = CallbackHandler(Self, OnDropDataFn, "DROPDATA_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragDataCallback(self: *Self, callback: ?OnDragDataFn) void {
        const Handler = CallbackHandler(Self, OnDragDataFn, "DRAGDATA_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragDataSizeCallback(self: *Self, callback: ?OnDragDataSizeFn) void {
        const Handler = CallbackHandler(Self, OnDragDataSizeFn, "DRAGDATASIZE_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// DROPFILES_CB DROPFILES_CB Action called when a file is "dropped" into the control.
    /// When several files are dropped at once, the callback is called several
    /// times, once for each file.
    /// If defined after the element is mapped then the attribute DROPFILESTARGET
    /// must be set to YES.
    /// [Windows and GTK Only] (GTK 2.6) Callback int function(Ihandle *ih, const
    /// char* filename, int num, int x, int y); [in C] ih:dropfiles_cb(filename:
    /// string; num, x, y: number) -> (ret: number) [in Lua] ih: identifier of the
    /// element that activated the event.
    /// filename: Name of the dropped file.
    /// num: Number index of the dropped file.
    /// If several files are dropped, num is the index of the dropped file starting
    /// from "total-1" to "0".
    /// x: X coordinate of the point where the user released the mouse button.
    /// y: Y coordinate of the point where the user released the mouse button.
    /// Returns: If IUP_IGNORE is returned the callback will NOT be called for the
    /// next dropped files, and the processing of dropped files will be interrupted.
    /// Affects IupDialog, IupCanvas, IupGLCanvas, IupText, IupList
    pub fn setDropFilesCallback(self: *Self, callback: ?OnDropFilesFn) void {
        const Handler = CallbackHandler(Self, OnDropFilesFn, "DROPFILES_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setUnmapCallback(self: *Self, callback: ?OnUnmapFn) void {
        const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// BUTTON_CB BUTTON_CB Action generated when a mouse button is pressed or released.
    /// Callback int function(Ihandle* ih, int button, int pressed, int x, int y,
    /// char* status); [in C] ih:button_cb(button, pressed, x, y: number, status:
    /// string) -> (ret: number) [in Lua] ih: identifies the element that activated
    /// the event.
    /// button: identifies the activated mouse button: IUP_BUTTON1 - left mouse
    /// button (button 1); IUP_BUTTON2 - middle mouse button (button 2);
    /// IUP_BUTTON3 - right mouse button (button 3).
    /// pressed: indicates the state of the button: 0 - mouse button was released;
    /// 1 - mouse button was pressed.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of the mouse buttons and some keyboard keys at the moment
    /// the event is generated.
    /// The following macros must be used for verification: iup_isshift(status)
    /// iup_iscontrol(status) iup_isbutton1(status) iup_isbutton2(status)
    /// iup_isbutton3(status) iup_isbutton4(status) iup_isbutton5(status)
    /// iup_isdouble(status) iup_isalt(status) iup_issys(status) They return 1 if
    /// the respective key or button is pressed, and 0 otherwise.
    /// These macros are also available in Lua, returning a boolean.
    /// Returns: IUP_CLOSE will be processed.
    /// On some controls if IUP_IGNORE is returned the action is ignored (this is
    /// system dependent).
    /// Notes This callback can be used to customize a button behavior.
    /// For a standard button behavior use the ACTION callback of the IupButton.
    /// For a single click the callback is called twice, one for pressed=1 and one
    /// for pressed=0.
    /// Only after both calls the ACTION callback is called.
    /// In Windows, if a dialog is shown or popup in any situation there could be
    /// unpredictable results because the native system still has processing to be
    /// done even after the callback is called.
    /// A double click is preceded by two single clicks, one for pressed=1 and one
    /// for pressed=0, and followed by a press=0, all three without the double
    /// click flag set.
    /// In GTK, it is preceded by an additional two single clicks sequence.
    /// For example, for one double click all the following calls are made:
    /// BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) BUTTON_CB(but=1 (0), x=154, y=83 [
    /// 1 ]) BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1
    /// (0), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1 (1), x=154, y=83 [ 1
    /// D ]) BUTTON_CB(but=1 (0), x=154, y=83 [ 1 ]) Between press and release all
    /// mouse events are redirected only to this control, even if the cursor moves
    /// outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupButton, IupText, IupList, IupGLCanvas
    pub fn setButtonCallback(self: *Self, callback: ?OnButtonFn) void {
        const Handler = CallbackHandler(Self, OnButtonFn, "BUTTON_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also ENTERWINDOW_CB
    pub fn setLeaveWindowCallback(self: *Self, callback: ?OnLeaveWindowFn) void {
        const Handler = CallbackHandler(Self, OnLeaveWindowFn, "LEAVEWINDOW_CB");
        Handler.setCallback(self, callback);
    }
};

test "AnimatedLabel FgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setFgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getFgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "AnimatedLabel TipBalloon" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setTipBalloon(true).unwrap());
    defer item.deinit();

    var ret = item.getTipBalloon();

    try std.testing.expect(ret == true);
}

test "AnimatedLabel HandleName" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setHandleName("Hello").unwrap());
    defer item.deinit();

    var ret = item.getHandleName();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "AnimatedLabel TipBgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setTipBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTipBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "AnimatedLabel WordWrap" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setWordWrap(true).unwrap());
    defer item.deinit();

    var ret = item.getWordWrap();

    try std.testing.expect(ret == true);
}

test "AnimatedLabel FrameTime" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setFrameTime("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFrameTime();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "AnimatedLabel MaxSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setMaxSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMaxSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "AnimatedLabel Position" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setPosition(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getPosition();

    try std.testing.expect(ret.x == 9 and ret.y == 10);
}

test "AnimatedLabel DropFilesTarget" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setDropFilesTarget(true).unwrap());
    defer item.deinit();

    var ret = item.getDropFilesTarget();

    try std.testing.expect(ret == true);
}

test "AnimatedLabel Tip" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setTip("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTip();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "AnimatedLabel CanFocus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setCanFocus(true).unwrap());
    defer item.deinit();

    var ret = item.getCanFocus();

    try std.testing.expect(ret == true);
}

test "AnimatedLabel DragSourceMove" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setDragSourceMove(true).unwrap());
    defer item.deinit();

    var ret = item.getDragSourceMove();

    try std.testing.expect(ret == true);
}

test "AnimatedLabel Visible" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setVisible(true).unwrap());
    defer item.deinit();

    var ret = item.getVisible();

    try std.testing.expect(ret == true);
}

test "AnimatedLabel Separator" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setSeparator("Hello").unwrap());
    defer item.deinit();

    var ret = item.getSeparator();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "AnimatedLabel Image" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setImage("Hello").unwrap());
    defer item.deinit();

    var ret = item.getImage();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "AnimatedLabel DragDrop" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setDragDrop(true).unwrap());
    defer item.deinit();

    var ret = item.getDragDrop();

    try std.testing.expect(ret == true);
}

test "AnimatedLabel Theme" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setTheme("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTheme();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "AnimatedLabel DragCursorCopy" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setDragCursorCopy("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDragCursorCopy();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "AnimatedLabel HtTransparent" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setHtTransparent(true).unwrap());
    defer item.deinit();

    var ret = item.getHtTransparent();

    try std.testing.expect(ret == true);
}

test "AnimatedLabel Expand" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setExpand(.Yes).unwrap());
    defer item.deinit();

    var ret = item.getExpand();

    try std.testing.expect(ret != null and ret.? == .Yes);
}

test "AnimatedLabel Size" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "AnimatedLabel Padding" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setPadding(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getPadding();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "AnimatedLabel FontSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setFontSize(42).unwrap());
    defer item.deinit();

    var ret = item.getFontSize();

    try std.testing.expect(ret == 42);
}

test "AnimatedLabel DropTypes" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setDropTypes("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDropTypes();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "AnimatedLabel UserSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setUserSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getUserSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "AnimatedLabel TipDelay" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setTipDelay(42).unwrap());
    defer item.deinit();

    var ret = item.getTipDelay();

    try std.testing.expect(ret == 42);
}

test "AnimatedLabel DragStart" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setDragStart(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getDragStart();

    try std.testing.expect(ret.x == 9 and ret.y == 10);
}

test "AnimatedLabel Title" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setTitle("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTitle();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "AnimatedLabel PropagateFocus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setPropagateFocus(true).unwrap());
    defer item.deinit();

    var ret = item.getPropagateFocus();

    try std.testing.expect(ret == true);
}

test "AnimatedLabel BgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "AnimatedLabel TipBalloonTitle" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setTipBalloonTitle("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTipBalloonTitle();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "AnimatedLabel DropTarget" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setDropTarget(true).unwrap());
    defer item.deinit();

    var ret = item.getDropTarget();

    try std.testing.expect(ret == true);
}

test "AnimatedLabel DragSource" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setDragSource(true).unwrap());
    defer item.deinit();

    var ret = item.getDragSource();

    try std.testing.expect(ret == true);
}

test "AnimatedLabel Markup" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setMarkup(true).unwrap());
    defer item.deinit();

    var ret = item.getMarkup();

    try std.testing.expect(ret == true);
}

test "AnimatedLabel Floating" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setFloating(.Yes).unwrap());
    defer item.deinit();

    var ret = item.getFloating();

    try std.testing.expect(ret != null and ret.? == .Yes);
}

test "AnimatedLabel NormalizerGroup" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setNormalizerGroup("Hello").unwrap());
    defer item.deinit();

    var ret = item.getNormalizerGroup();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "AnimatedLabel RasterSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setRasterSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getRasterSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "AnimatedLabel TipFgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setTipFgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTipFgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "AnimatedLabel ControlId" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setControlId(42).unwrap());
    defer item.deinit();

    var ret = item.getControlId();

    try std.testing.expect(ret == 42);
}

test "AnimatedLabel FontFace" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setFontFace("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFontFace();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "AnimatedLabel Name" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setName("Hello").unwrap());
    defer item.deinit();

    var ret = item.getName();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "AnimatedLabel Ellipsis" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setEllipsis(true).unwrap());
    defer item.deinit();

    var ret = item.getEllipsis();

    try std.testing.expect(ret == true);
}

test "AnimatedLabel TipBalloonTitleIcon" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setTipBalloonTitleIcon(true).unwrap());
    defer item.deinit();

    var ret = item.getTipBalloonTitleIcon();

    try std.testing.expect(ret == true);
}

test "AnimatedLabel CPadding" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setCPadding(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getCPadding();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "AnimatedLabel Active" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setActive(true).unwrap());
    defer item.deinit();

    var ret = item.getActive();

    try std.testing.expect(ret == true);
}

test "AnimatedLabel TipVisible" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setTipVisible(true).unwrap());
    defer item.deinit();

    var ret = item.getTipVisible();

    try std.testing.expect(ret == true);
}

test "AnimatedLabel ExpandWeight" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setExpandWeight(3.14).unwrap());
    defer item.deinit();

    var ret = item.getExpandWeight();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "AnimatedLabel MinSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setMinSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMinSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "AnimatedLabel NTheme" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setNTheme("Hello").unwrap());
    defer item.deinit();

    var ret = item.getNTheme();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "AnimatedLabel Animation" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setAnimation("Hello").unwrap());
    defer item.deinit();

    var ret = item.getAnimation();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "AnimatedLabel DragTypes" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setDragTypes("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDragTypes();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "AnimatedLabel FontStyle" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setFontStyle("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFontStyle();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "AnimatedLabel Touch" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setTouch(true).unwrap());
    defer item.deinit();

    var ret = item.getTouch();

    try std.testing.expect(ret == true);
}

test "AnimatedLabel DragCursor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setDragCursor("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDragCursor();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "AnimatedLabel Font" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.AnimatedLabel.init().setFont("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFont();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}
