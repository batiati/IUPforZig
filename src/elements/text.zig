// This code was generated by a tool.
// IUP Metadata Code Generator
// https://github.com/batiati/IUPMetadata
//
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.

const std = @import("std");

const interop = @import("../interop.zig");
const iup = @import("../iup.zig");

const Impl = @import("../impl.zig").Impl;
const CallbackHandler = @import("../callback_handler.zig").CallbackHandler;

const debug = std.debug;
const trait = std.meta.trait;

const Element = iup.Element;
const Handle = iup.Handle;
const Error = iup.Error;
const ChildrenIterator = iup.ChildrenIterator;
const Size = iup.Size;
const Margin = iup.Margin;

///
/// Creates an editable text field.
pub const Text = opaque {
    pub const CLASS_NAME = "text";
    pub const NATIVE_TYPE = iup.NativeType.Control;
    const Self = @This();

    ///
    /// K_ANY K_ANY Action generated when a keyboard event occurs.
    /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
    /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
    /// c: identifier of typed key.
    /// Please refer to the Keyboard Codes table for a list of possible values.
    /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
    /// the control and not propagated.
    /// If returns IUP_CONTINUE, the key will be processed and the event will be
    /// propagated to the parent of the element receiving it, this is the default behavior.
    /// If returns IUP_DEFAULT the key is processed but it is not propagated.
    /// IUP_CLOSE will be processed.
    /// Notes Keyboard callbacks depend on the keyboard usage of the control with
    /// the focus.
    /// So if you return IUP_IGNORE the control will usually not process the key.
    /// But be aware that sometimes the control process the key in another event so
    /// even returning IUP_IGNORE the key can get processed.
    /// Although it will not be propagated.
    /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
    /// the IUP_CONTINUE return value to work while the control is in focus.
    /// If the callback does not exists it is automatically propagated to the
    /// parent of the element.
    /// K_* callbacks All defined keys are also callbacks of any element, called
    /// when the respective key is activated.
    /// For example: "K_cC" is also a callback activated when the user press
    /// Ctrl+C, when the focus is at the element or at a children with focus.
    /// This is the way an application can create shortcut keys, also called hot keys.
    /// These callbacks are not available in IupLua.
    /// Affects All elements with keyboard interaction.
    pub const OnKAnyFn = fn (self: *Self, arg0: i32) anyerror!void;

    ///
    /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
    /// In Motif is also activated by the Help button in some workstations keyboard.
    /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Returns: IUP_CLOSE will be processed.
    /// Affects All elements with user interaction.
    pub const OnHelpFn = fn (self: *Self) anyerror!void;

    pub const OnDropMotionFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: [:0]const u8) anyerror!void;

    pub const OnDragEndFn = fn (self: *Self, arg0: i32) anyerror!void;

    pub const OnDragBeginFn = fn (self: *Self, arg0: i32, arg1: i32) anyerror!void;

    ///
    /// ACTION ACTION Action generated when the element is activated.
    /// Affects each element differently.
    /// Callback int function(Ihandle *ih); [in C] ih:action() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// In some elements, this callback may receive more parameters, apart from ih.
    /// Please refer to each element's documentation.
    /// Affects IupButton, IupItem, IupList, IupText, IupCanvas, IupMultiline,
    /// IupToggle
    pub const OnActionFn = fn (self: *Self, arg0: i32, arg1: [:0]const u8) anyerror!void;

    ///
    /// MOTION_CB MOTION_CB Action generated when the mouse moves.
    /// Callback int function(Ihandle *ih, int x, int y, char *status); [in C]
    /// ih:motion_cb(x, y: number, status: string) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of mouse buttons and certain keyboard keys at the moment the
    /// event was generated.
    /// The same macros used for BUTTON_CB can be used for this status.
    /// Notes Between press and release all mouse events are redirected only to
    /// this control, even if the cursor moves outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupGLCanvas
    pub const OnMotionFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: [:0]const u8) anyerror!void;

    ///
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnMapFn = fn (self: *Self) anyerror!void;

    ///
    /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also LEAVEWINDOW_CB
    pub const OnEnterWindowFn = fn (self: *Self) anyerror!void;

    ///
    /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
    /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Notes If the dialog is visible then it is hidden before it is destroyed.
    /// The callback will be called right after it is hidden.
    /// The callback will be called before all other destroy procedures.
    /// For instance, if the element has children then it is called before the
    /// children are destroyed.
    /// For language binding implementations use the callback name "LDESTROY_CB" to
    /// release memory allocated by the binding for the element.
    /// Also the callback will be called before the language callback.
    /// Affects All.
    pub const OnDestroyFn = fn (self: *Self) anyerror!void;

    pub const OnDropDataFn = fn (self: *Self, arg0: [:0]const u8, arg1: ?*anyopaque, arg2: i32, arg3: i32, arg4: i32) anyerror!void;

    ///
    /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
    /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Affects All elements with user interaction, except menus.
    /// In Windows, there are restrictions when using this callback.
    /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
    /// function calls that display or activate a window.
    /// This causes the thread to yield control and can cause the application to
    /// stop responding to messages.
    /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
    pub const OnKillFocusFn = fn (self: *Self) anyerror!void;

    pub const OnDragDataFn = fn (self: *Self, arg0: [:0]const u8, arg1: ?*anyopaque, arg2: i32) anyerror!void;

    pub const OnDragDataSizeFn = fn (self: *Self, arg0: [:0]const u8) anyerror!void;

    ///
    /// DROPFILES_CB DROPFILES_CB Action called when a file is "dropped" into the control.
    /// When several files are dropped at once, the callback is called several
    /// times, once for each file.
    /// If defined after the element is mapped then the attribute DROPFILESTARGET
    /// must be set to YES.
    /// [Windows and GTK Only] (GTK 2.6) Callback int function(Ihandle *ih, const
    /// char* filename, int num, int x, int y); [in C] ih:dropfiles_cb(filename:
    /// string; num, x, y: number) -> (ret: number) [in Lua] ih: identifier of the
    /// element that activated the event.
    /// filename: Name of the dropped file.
    /// num: Number index of the dropped file.
    /// If several files are dropped, num is the index of the dropped file starting
    /// from "total-1" to "0".
    /// x: X coordinate of the point where the user released the mouse button.
    /// y: Y coordinate of the point where the user released the mouse button.
    /// Returns: If IUP_IGNORE is returned the callback will NOT be called for the
    /// next dropped files, and the processing of dropped files will be interrupted.
    /// Affects IupDialog, IupCanvas, IupGLCanvas, IupText, IupList
    pub const OnDropFilesFn = fn (self: *Self, arg0: [:0]const u8, arg1: i32, arg2: i32, arg3: i32) anyerror!void;

    ///
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnUnmapFn = fn (self: *Self) anyerror!void;

    ///
    /// CARET_CB: Action generated when the caret/cursor position is changed.
    /// int function(Ihandle *ih, int lin, int col, int pos); [in
    /// C]ih:caret_cb(lin, col, pos: number) -> (ret: number) [in Lua]
    pub const OnCaretFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: i32) anyerror!void;

    ///
    /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
    /// This callback is called after the KILLFOCUS_CB of the element that loosed
    /// the focus.
    /// The IupGetFocus function during the callback returns the element that
    /// loosed the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that received keyboard focus.
    /// Affects All elements with user interaction, except menus.
    /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
    pub const OnGetFocusFn = fn (self: *Self) anyerror!void;

    ///
    /// BUTTON_CB BUTTON_CB Action generated when a mouse button is pressed or released.
    /// Callback int function(Ihandle* ih, int button, int pressed, int x, int y,
    /// char* status); [in C] ih:button_cb(button, pressed, x, y: number, status:
    /// string) -> (ret: number) [in Lua] ih: identifies the element that activated
    /// the event.
    /// button: identifies the activated mouse button: IUP_BUTTON1 - left mouse
    /// button (button 1); IUP_BUTTON2 - middle mouse button (button 2);
    /// IUP_BUTTON3 - right mouse button (button 3).
    /// pressed: indicates the state of the button: 0 - mouse button was released;
    /// 1 - mouse button was pressed.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of the mouse buttons and some keyboard keys at the moment
    /// the event is generated.
    /// The following macros must be used for verification: iup_isshift(status)
    /// iup_iscontrol(status) iup_isbutton1(status) iup_isbutton2(status)
    /// iup_isbutton3(status) iup_isbutton4(status) iup_isbutton5(status)
    /// iup_isdouble(status) iup_isalt(status) iup_issys(status) They return 1 if
    /// the respective key or button is pressed, and 0 otherwise.
    /// These macros are also available in Lua, returning a boolean.
    /// Returns: IUP_CLOSE will be processed.
    /// On some controls if IUP_IGNORE is returned the action is ignored (this is
    /// system dependent).
    /// Notes This callback can be used to customize a button behavior.
    /// For a standard button behavior use the ACTION callback of the IupButton.
    /// For a single click the callback is called twice, one for pressed=1 and one
    /// for pressed=0.
    /// Only after both calls the ACTION callback is called.
    /// In Windows, if a dialog is shown or popup in any situation there could be
    /// unpredictable results because the native system still has processing to be
    /// done even after the callback is called.
    /// A double click is preceded by two single clicks, one for pressed=1 and one
    /// for pressed=0, and followed by a press=0, all three without the double
    /// click flag set.
    /// In GTK, it is preceded by an additional two single clicks sequence.
    /// For example, for one double click all the following calls are made:
    /// BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) BUTTON_CB(but=1 (0), x=154, y=83 [
    /// 1 ]) BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1
    /// (0), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1 (1), x=154, y=83 [ 1
    /// D ]) BUTTON_CB(but=1 (0), x=154, y=83 [ 1 ]) Between press and release all
    /// mouse events are redirected only to this control, even if the cursor moves
    /// outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupButton, IupText, IupList, IupGLCanvas
    pub const OnButtonFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: [:0]const u8) anyerror!void;

    ///
    /// VALUECHANGED_CB: Called after the value was interactively changed by the user.
    /// (since 3.0) int function(Ihandle *ih); [in C]ih:valuechanged_cb() -> (ret:
    /// number) [in Lua]
    pub const OnValueChangedFn = fn (self: *Self) anyerror!void;

    ///
    /// SPIN_CB: Action generated when a spin button is pressed.
    /// Valid only when SPIN=YES.
    /// When this callback is called the ACTION callback is not called.
    /// The VALUE attribute can be changed during this callback only if SPINAUTO=NO.
    /// (since 3.0) int function(Ihandle *ih, int pos); [in C]ih:spin_cb(pos:
    /// number) -> (ret: number) [in Lua]
    pub const OnSpinFn = fn (self: *Self, arg0: i32) anyerror!void;

    pub const OnLDestroyFn = fn (self: *Self) anyerror!void;

    ///
    /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also ENTERWINDOW_CB
    pub const OnLeaveWindowFn = fn (self: *Self) anyerror!void;

    pub const OnPostMessageFn = fn (self: *Self, arg0: [:0]const u8, arg1: i32, arg2: f64, arg3: ?*anyopaque) anyerror!void;

    pub const ZOrder = enum {
        Top,
        Bottom,
    };

    pub const MaskReal = enum {
        Signed,
        Unsigned,
    };

    pub const Expand = enum {
        Yes,
        Horizontal,
        Vertical,
        HorizontalFree,
        VerticalFree,
        No,
    };

    pub const Floating = enum {
        Yes,
        Ignore,
        No,
    };

    pub const SpinAlign = enum {
        Left,
        Right,
    };
    ///
    /// FILTER [Windows Only] (non inheritable): allows a custom filter to process
    /// the characters: Can be LOWERCASE, UPPERCASE or NUMBER (only numbers allowed).
    /// (since 3.0)
    pub const Filter = enum {
        LowerCase,
        Number,
        UpperCase,
    };
    ///
    /// CHANGECASE (non inheritable): Change case according to given conversion.
    /// Can be UPPER, LOWER, TOGGLE, or TITLE.
    /// TITLE case change first letter of words separated by spaces to upper case
    /// others to lower case, but first letter is changed only if word has more
    /// than 3 characters, for instance: "Best of the World".
    /// Supports Latin-1 encoding only, even when using UTF-8.
    /// Does not depends on current locale.
    /// (since 3.28)
    pub const ChangeCase = enum {
        Upper,
        Lower,
        Toggle,
        Title,
    };
    ///
    /// CLIPBOARD (write-only): clear, cut, copy or paste the selection to or from
    /// the clipboard.
    /// Values: "CLEAR", "CUT", "COPY" or "PASTE".
    /// In Windows UNDO is also available, and REDO is available when FORMATTING=YES.
    /// (since 3.0)
    pub const Clipboard = enum {
        Copy,
        Cut,
        Paste,
        Clear,
        Undo,
        Redo,
    };

    pub const RemoveFormatting = enum {
        All,
        Selection,
    };

    pub const Initializer = struct {
        last_error: ?anyerror = null,
        ref: *Self,

        ///
        /// Returns a pointer to IUP element or an error.
        /// Only top-level or detached elements needs to be unwraped,
        pub fn unwrap(self: Initializer) !*Self {
            if (self.last_error) |e| {
                return e;
            } else {
                return self.ref;
            }
        }

        ///
        /// Captures a reference into a external variable
        /// Allows to capture some references even using full declarative API
        pub fn capture(self: Initializer, ref: **Self) Initializer {
            ref.* = self.ref;
            return self;
        }

        pub fn setStrAttribute(self: Initializer, attributeName: [:0]const u8, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            Self.setStrAttribute(self.ref, attributeName, arg);
            return self;
        }

        pub fn setIntAttribute(self: Initializer, attributeName: [:0]const u8, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            Self.setIntAttribute(self.ref, attributeName, arg);
            return self;
        }

        pub fn setBoolAttribute(self: Initializer, attributeName: [:0]const u8, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            Self.setBoolAttribute(self.ref, attributeName, arg);
            return self;
        }

        pub fn setPtrAttribute(self: Initializer, comptime T: type, attributeName: [:0]const u8, value: ?*T) Initializer {
            if (self.last_error) |_| return self;
            Self.setPtrAttribute(self.ref, T, attributeName, value);
            return self;
        }

        pub fn setHandle(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setHandle(self.ref, arg);
            return self;
        }

        ///
        /// FGCOLOR: Text color.
        /// Default: the global attribute TXTFGCOLOR.
        pub fn setFgColor(self: Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self;
            interop.setRgb(self.ref, "FGCOLOR", .{}, rgb);
            return self;
        }

        pub fn setHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "HANDLENAME", .{}, arg);
            return self;
        }

        pub fn setTipBgColor(self: Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self;
            interop.setRgb(self.ref, "TIPBGCOLOR", .{}, rgb);
            return self;
        }

        ///
        /// WORDWRAP (creation only): Valid only when MULTILINE=YES.
        /// If enabled will force a word wrap of lines that are greater than the with
        /// of the control, and the horizontal scrollbar will be removed.
        /// Default: NO.
        pub fn setWordWrap(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "WORDWRAP", .{}, arg);
            return self;
        }

        ///
        /// PASSWORD (creation only) [Windows and GTK Only] (non inheritable): Hide the
        /// typed character using an "*".
        /// Default: "NO".
        pub fn setPassword(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "PASSWORD", .{}, arg);
            return self;
        }

        ///
        /// CARET (non inheritable): Character position of the insertion point.
        /// Its format depends in MULTILINE=YES.
        /// The first position, lin or col, is "1".
        pub fn setCaret(self: Initializer, lin: i32, col: i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = iup.LinColPos.intIntToString(&buffer, lin, col, ',');
            interop.setStrAttribute(self.ref, "CARET", .{}, value);
            return self;
        }

        pub fn setMaskDecimalSymbol(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "MASKDECIMALSYMBOL", .{}, arg);
            return self;
        }

        pub fn setTipIcon(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "TIPICON", .{}, arg);
            return self;
        }

        ///
        /// OVERWRITE [Windows and GTK Only] (non inheritable): turns the overwrite
        /// mode ON or OFF.
        /// Works only when FORMATTING=YES.
        /// (since 3.0)
        pub fn setOverwrite(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "OVERWRITE", .{}, arg);
            return self;
        }

        pub fn setAddFormatTagHandle(self: Initializer, arg: *iup.User) Initializer {
            if (self.last_error) |_| return self;
            interop.setHandleAttribute(self.ref, "ADDFORMATTAG_HANDLE", .{}, arg);
            return self;
        }

        pub fn setAddFormatTagHandleHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "ADDFORMATTAG_HANDLE", .{}, arg);
            return self;
        }

        pub fn setSpinInc(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "SPININC", .{}, arg);
            return self;
        }

        pub fn setMaxSize(self: Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "MAXSIZE", .{}, value);
            return self;
        }

        pub fn setPosition(self: Initializer, x: i32, y: i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
            interop.setStrAttribute(self.ref, "POSITION", .{}, value);
            return self;
        }

        pub fn setAppendNewLine(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "APPENDNEWLINE", .{}, arg);
            return self;
        }

        ///
        /// DROPFILESTARGET [Windows and GTK Only] (non inheritable): Enable or disable
        /// the drop of files.
        /// Default: NO, but if DROPFILES_CB is defined when the element is mapped then
        /// it will be automatically enabled.
        /// (since 3.0)
        pub fn setDropFilesTarget(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DROPFILESTARGET", .{}, arg);
            return self;
        }

        pub fn setTip(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "TIP", .{}, arg);
            return self;
        }

        ///
        /// CANFOCUS (creation only) (non inheritable): enables the focus traversal of
        /// the control.
        /// In Windows the control will still get the focus when clicked.
        /// Default: YES.
        /// (since 3.0)
        pub fn setCanFocus(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "CANFOCUS", .{}, arg);
            return self;
        }

        pub fn setDragSourceMove(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DRAGSOURCEMOVE", .{}, arg);
            return self;
        }

        pub fn setAddFormatTag(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "ADDFORMATTAG", .{}, arg);
            return self;
        }

        pub fn setVisible(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "VISIBLE", .{}, arg);
            return self;
        }

        ///
        /// NC: Maximum number of characters allowed for keyboard input, larger text
        /// can still be set using attributes.
        /// The maximum value is the limit of the VALUE attribute.
        /// The "0" value is the same as maximum.
        /// Default: maximum.
        pub fn setNc(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "NC", .{}, arg);
            return self;
        }

        pub fn zOrder(self: Initializer, arg: ?ZOrder) Initializer {
            if (self.last_error) |_| return self;
            if (arg) |value| switch (value) {
                .Top => interop.setStrAttribute(self.ref, "ZORDER", .{}, "TOP"),
                .Bottom => interop.setStrAttribute(self.ref, "ZORDER", .{}, "BOTTOM"),
            } else {
                interop.clearAttribute(self.ref, "ZORDER", .{});
            }
            return self;
        }

        pub fn setDragDrop(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DRAGDROP", .{}, arg);
            return self;
        }

        pub fn setTheme(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "THEME", .{}, arg);
            return self;
        }

        pub fn setMaskReal(self: Initializer, arg: ?MaskReal) Initializer {
            if (self.last_error) |_| return self;
            if (arg) |value| switch (value) {
                .Signed => interop.setStrAttribute(self.ref, "MASKREAL", .{}, "SIGNED"),
                .Unsigned => interop.setStrAttribute(self.ref, "MASKREAL", .{}, "UNSIGNED"),
            } else {
                interop.clearAttribute(self.ref, "MASKREAL", .{});
            }
            return self;
        }

        pub fn setExpand(self: Initializer, arg: ?Expand) Initializer {
            if (self.last_error) |_| return self;
            if (arg) |value| switch (value) {
                .Yes => interop.setStrAttribute(self.ref, "EXPAND", .{}, "YES"),
                .Horizontal => interop.setStrAttribute(self.ref, "EXPAND", .{}, "HORIZONTAL"),
                .Vertical => interop.setStrAttribute(self.ref, "EXPAND", .{}, "VERTICAL"),
                .HorizontalFree => interop.setStrAttribute(self.ref, "EXPAND", .{}, "HORIZONTALFREE"),
                .VerticalFree => interop.setStrAttribute(self.ref, "EXPAND", .{}, "VERTICALFREE"),
                .No => interop.setStrAttribute(self.ref, "EXPAND", .{}, "NO"),
            } else {
                interop.clearAttribute(self.ref, "EXPAND", .{});
            }
            return self;
        }

        ///
        /// VISIBLELINES: When MULTILINE=YES defines the number of visible lines for
        /// the Natural Size, this means that will act also as minimum number of
        /// visible lines.
        /// As for SIZE you can set to NULL after map to use it as an initial value.
        /// Default: 1 (since 3.0)
        pub fn setVisibleLines(self: Initializer, arg: ?i32) Initializer {
            if (self.last_error) |_| return self;
            if (arg == null) {
                interop.setStrAttribute(self.ref, "VISIBLELINES", .{}, null);
            } else {
                interop.setIntAttribute(self.ref, "VISIBLELINES", .{}, arg.?);
            }
            return self;
        }

        ///
        /// SIZE (non inheritable): Since the contents can be changed by the user, the
        /// Natural Size is not affected by the text contents (since 3.0).
        /// Use VISIBLECOLUMNS and VISIBLELINES to control the Natural Size.
        pub fn setSize(self: Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "SIZE", .{}, value);
            return self;
        }

        ///
        /// PADDING: internal margin.
        /// Works just like the MARGIN attribute of the IupHbox and IupVbox containers,
        /// but uses a different name to avoid inheritance problems.
        /// Default value: "0x0".
        /// In Windows, only the horizontal value is used.
        /// (since 3.0) (GTK 2.10 for single line)
        pub fn setPadding(self: Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "PADDING", .{}, value);
            return self;
        }

        pub fn setSpinMin(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "SPINMIN", .{}, arg);
            return self;
        }

        pub fn setTipMarkup(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "TIPMARKUP", .{}, arg);
            return self;
        }

        pub fn setFontSize(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "FONTSIZE", .{}, arg);
            return self;
        }

        pub fn setDropTypes(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "DROPTYPES", .{}, arg);
            return self;
        }

        pub fn setUserSize(self: Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "USERSIZE", .{}, value);
            return self;
        }

        pub fn setTipDelay(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "TIPDELAY", .{}, arg);
            return self;
        }

        ///
        /// SCROLLBAR (creation only): Valid only when MULTILINE=YES.
        /// Associates an automatic horizontal and/or vertical scrollbar to the multiline.
        /// Can be: "VERTICAL", "HORIZONTAL", "YES" (both) or "NO" (none).
        /// Default: "YES".
        /// For all systems, when SCROLLBAR!=NO the natural size will always include
        /// its size even if the native system hides the scrollbar.
        /// If AUTOHIDE=YES scrollbars are visible only if they are necessary, by
        /// default AUTOHIDE=NO.
        /// In Windows when FORMATTING=NO, AUTOHIDE is not supported.
        /// In Motif AUTOHIDE is not supported.
        pub fn setScrollBar(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "SCROLLBAR", .{}, arg);
            return self;
        }

        ///
        /// TABSIZE [Windows and GTK Only]: Valid only when MULTILINE=YES.
        /// Controls the number of characters for a tab stop.
        /// Default: 8.
        pub fn setTabsIZe(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "TABSIZE", .{}, arg);
            return self;
        }

        ///
        /// PROPAGATEFOCUS(non inheritable): enables the focus callback forwarding to
        /// the next native parent with FOCUS_CB defined.
        /// Default: NO.
        /// (since 3.23)
        pub fn setPropagateFocus(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "PROPAGATEFOCUS", .{}, arg);
            return self;
        }

        ///
        /// BGCOLOR: Background color of the text.
        /// Default: the global attribute TXTBGCOLOR.
        /// Ignored in GTK when MULTILINE=NO.
        pub fn setBgColor(self: Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self;
            interop.setRgb(self.ref, "BGCOLOR", .{}, rgb);
            return self;
        }

        pub fn setDropTarget(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DROPTARGET", .{}, arg);
            return self;
        }

        ///
        /// VALUEMASKED (non inheritable) (write-only): sets VALUE but first checks if
        /// it is validated by MASK.
        /// If not does nothing.
        /// (since 3.4)
        pub fn valueMasked(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "VALUEMASKED", .{}, arg);
            return self;
        }

        pub fn setDragSource(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DRAGSOURCE", .{}, arg);
            return self;
        }

        pub fn setFloating(self: Initializer, arg: ?Floating) Initializer {
            if (self.last_error) |_| return self;
            if (arg) |value| switch (value) {
                .Yes => interop.setStrAttribute(self.ref, "FLOATING", .{}, "YES"),
                .Ignore => interop.setStrAttribute(self.ref, "FLOATING", .{}, "IGNORE"),
                .No => interop.setStrAttribute(self.ref, "FLOATING", .{}, "NO"),
            } else {
                interop.clearAttribute(self.ref, "FLOATING", .{});
            }
            return self;
        }

        pub fn setNormalizerGroup(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "NORMALIZERGROUP", .{}, arg);
            return self;
        }

        pub fn setRasterSize(self: Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "RASTERSIZE", .{}, value);
            return self;
        }

        ///
        /// SCROLLTOPOS (non inheritable, write only): Scroll the text to make the
        /// given character position visible.
        /// It uses the same format and reference of the CARETPOS attribute ("pos"
        /// starting at 0).
        /// (since 3.0)
        pub fn scrollTopOs(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "SCROLLTOPOS", .{}, arg);
            return self;
        }

        ///
        /// FORMATTING [Windows and GTK Only] (non inheritable): When enabled allow the
        /// use of text formatting attributes.
        /// In GTK is always enabled, but only when MULTILINE=YES.
        /// Default: NO.
        /// (since 3.0)
        pub fn setFormatting(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "FORMATTING", .{}, arg);
            return self;
        }

        ///
        /// SCROLLTO (non inheritable, write only): Scroll the text to make the given
        /// character position visible.
        /// It uses the same format and reference of the CARET attribute ("lin:col" or
        /// "col" starting at 1).
        /// In Windows, when FORMATTING=Yes "col" is ignored.
        /// (since 3.0)
        pub fn scrollTo(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "SCROLLTO", .{}, arg);
            return self;
        }

        pub fn setTipFgColor(self: Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self;
            interop.setRgb(self.ref, "TIPFGCOLOR", .{}, rgb);
            return self;
        }

        pub fn setSpinWrap(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "SPINWRAP", .{}, arg);
            return self;
        }

        pub fn setFontFace(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "FONTFACE", .{}, arg);
            return self;
        }

        ///
        /// VISIBLECOLUMNS: Defines the number of visible columns for the Natural Size,
        /// this means that will act also as minimum number of visible columns.
        /// It uses a wider character size than the one used for the SIZE attribute so
        /// strings will fit better without the need of extra columns.
        /// As for SIZE you can set to NULL after map to use it as an initial value.
        /// Default: 5 (since 3.0)
        pub fn setVisibleColumns(self: Initializer, arg: ?i32) Initializer {
            if (self.last_error) |_| return self;
            if (arg == null) {
                interop.setStrAttribute(self.ref, "VISIBLECOLUMNS", .{}, null);
            } else {
                interop.setIntAttribute(self.ref, "VISIBLECOLUMNS", .{}, arg.?);
            }
            return self;
        }

        pub fn setMaskInt(self: Initializer, begin: i32, end: i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = iup.Range.intIntToString(&buffer, begin, end, ',');
            interop.setStrAttribute(self.ref, "MASKINT", .{}, value);
            return self;
        }

        ///
        /// SPINVALUE (non inheritable): the current value of the spin.
        /// The value is limited to the minimum and maximum values.
        /// SPINMAX (non inheritable): the maximum value.
        /// Default: 100.
        /// SPINMIN (non inheritable): the minimum value.
        /// Default: 0.
        /// SPININC (non inheritable): the increment value.
        /// Default: 1.
        /// SPINALIGN (creation only): the position of the spin.
        /// Can be LEFT or RIGHT.
        /// Default: RIGHT.
        /// In GTK is always RIGHT.
        /// SPINWRAP (creation only): if the position reach a limit it continues from
        /// the opposite limit.
        /// Default: NO.
        /// SPINAUTO (creation only): enables the automatic update of the text contents.
        /// Default: YES.
        /// Use SPINAUTO=NO and the VALUE attribute during SPIN_CB to control the text
        /// contents when the spin is incremented.
        pub fn setSpinValue(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "SPINVALUE", .{}, arg);
            return self;
        }

        pub fn setSpinAlign(self: Initializer, arg: ?SpinAlign) Initializer {
            if (self.last_error) |_| return self;
            if (arg) |value| switch (value) {
                .Left => interop.setStrAttribute(self.ref, "SPINALIGN", .{}, "LEFT"),
                .Right => interop.setStrAttribute(self.ref, "SPINALIGN", .{}, "RIGHT"),
            } else {
                interop.clearAttribute(self.ref, "SPINALIGN", .{});
            }
            return self;
        }

        pub fn setName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "NAME", .{}, arg);
            return self;
        }

        pub fn setMaskCasei(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "MASKCASEI", .{}, arg);
            return self;
        }

        ///
        /// SELECTIONPOS (non inheritable): Same as SELECTION but using a zero based
        /// character index "pos1:pos2".
        /// Useful for indexing the VALUE string.
        /// The values ALL and NONE are also accepted.
        /// See the Notes below if using UTF-8 strings in GTK.
        /// (since 3.0)
        pub fn setSelectionPos(self: Initializer, begin: i32, end: i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = iup.Range.intIntToString(&buffer, begin, end, ',');
            interop.setStrAttribute(self.ref, "SELECTIONPOS", .{}, value);
            return self;
        }

        ///
        /// VALUE (non inheritable): Text entered by the user.
        /// The '\n' character indicates a new line, valid only when MULTILINE=YES.
        /// After the element is mapped and if there is no text will return the empty
        /// string "".
        pub fn setValue(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "VALUE", .{}, arg);
            return self;
        }

        ///
        /// FILTER [Windows Only] (non inheritable): allows a custom filter to process
        /// the characters: Can be LOWERCASE, UPPERCASE or NUMBER (only numbers allowed).
        /// (since 3.0)
        pub fn setFilter(self: Initializer, arg: ?Filter) Initializer {
            if (self.last_error) |_| return self;
            if (arg) |value| switch (value) {
                .LowerCase => interop.setStrAttribute(self.ref, "FILTER", .{}, "LOWERCASE"),
                .Number => interop.setStrAttribute(self.ref, "FILTER", .{}, "NUMBER"),
                .UpperCase => interop.setStrAttribute(self.ref, "FILTER", .{}, "UPPERCASE"),
            } else {
                interop.clearAttribute(self.ref, "FILTER", .{});
            }
            return self;
        }

        pub fn setSpinMax(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "SPINMAX", .{}, arg);
            return self;
        }

        ///
        /// MULTILINE (creation only) (non inheritable): allows the edition of multiple lines.
        /// In single line mode some characters are invalid, like "\t", "\r" and "\n".
        /// Default: NO.
        /// When set to Yes will also reset the SCROLLBAR attribute to Yes.
        /// The values ALL and NONE are also accepted independently of MULTILINE (since 3.0).
        pub fn setMultiline(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "MULTILINE", .{}, arg);
            return self;
        }

        ///
        /// SELECTEDTEXT (non inheritable): Selection text.
        /// Returns NULL if there is no selection.
        /// When changed replaces the current selection.
        /// Similar to INSERT, but does nothing if there is no selection.
        pub fn setSelectedText(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "SELECTEDTEXT", .{}, arg);
            return self;
        }

        ///
        /// CPADDING: same as PADDING but using the units of the SIZE attribute.
        /// It will actually set the PADDING attribute.
        /// (since 3.29)
        pub fn setCPadding(self: Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "CPADDING", .{}, value);
            return self;
        }

        ///
        /// ACTIVE, FONT, EXPAND, SCREENPOSITION, POSITION, MINSIZE, MAXSIZE, WID, TIP,
        /// RASTERSIZE, ZORDER, VISIBLE, THEME: also accepted.
        pub fn setActive(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "ACTIVE", .{}, arg);
            return self;
        }

        pub fn setTipVisible(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "TIPVISIBLE", .{}, arg);
            return self;
        }

        ///
        /// CHANGECASE (non inheritable): Change case according to given conversion.
        /// Can be UPPER, LOWER, TOGGLE, or TITLE.
        /// TITLE case change first letter of words separated by spaces to upper case
        /// others to lower case, but first letter is changed only if word has more
        /// than 3 characters, for instance: "Best of the World".
        /// Supports Latin-1 encoding only, even when using UTF-8.
        /// Does not depends on current locale.
        /// (since 3.28)
        pub fn changeCase(self: Initializer, arg: ?ChangeCase) Initializer {
            if (self.last_error) |_| return self;
            if (arg) |value| switch (value) {
                .Upper => interop.setStrAttribute(self.ref, "CHANGECASE", .{}, "UPPER"),
                .Lower => interop.setStrAttribute(self.ref, "CHANGECASE", .{}, "LOWER"),
                .Toggle => interop.setStrAttribute(self.ref, "CHANGECASE", .{}, "TOGGLE"),
                .Title => interop.setStrAttribute(self.ref, "CHANGECASE", .{}, "TITLE"),
            } else {
                interop.clearAttribute(self.ref, "CHANGECASE", .{});
            }
            return self;
        }

        ///
        /// CUEBANNER [Windows and GTK Only] (non inheritable): a text that is
        /// displayed when there is no text at the control.
        /// It works as a textual cue, or tip to prompt the user for input.
        /// Valid only for MULTILINE=NO, and works only when Visual Styles are enabled.
        /// (since 3.0) [GTK 3.2] (GTK support added in IUP 3.20)
        pub fn setCueBanner(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "CUEBANNER", .{}, arg);
            return self;
        }

        pub fn setExpandWeight(self: Initializer, arg: f64) Initializer {
            if (self.last_error) |_| return self;
            interop.setDoubleAttribute(self.ref, "EXPANDWEIGHT", .{}, arg);
            return self;
        }

        pub fn setMinSize(self: Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "MINSIZE", .{}, value);
            return self;
        }

        ///
        /// SPIN (non inheritable, creation only): enables a spin control attached to
        /// the element.
        /// Default: NO.
        /// The spin increments and decrements an integer number.
        /// The editing in the element is still available.
        /// (since 3.0)
        pub fn setSpin(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "SPIN", .{}, arg);
            return self;
        }

        pub fn setNTheme(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "NTHEME", .{}, arg);
            return self;
        }

        ///
        /// BORDER (creation only): Shows a border around the text.
        /// Default: "YES".
        pub fn setBorder(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "BORDER", .{}, arg);
            return self;
        }

        ///
        /// CARETPOS (non inheritable): Also the character position of the insertion
        /// point, but using a zero based character unique index "pos".
        /// Useful for indexing the VALUE string.
        /// See the Notes below if using UTF-8 strings in GTK.
        /// (since 3.0)
        pub fn setCaretPos(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "CARETPOS", .{}, arg);
            return self;
        }

        pub fn setSpinAuto(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "SPINAUTO", .{}, arg);
            return self;
        }

        ///
        /// MASK (non inheritable): Defines a mask that will filter interactive text input.
        pub fn setMask(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "MASK", .{}, arg);
            return self;
        }

        pub fn setDragTypes(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "DRAGTYPES", .{}, arg);
            return self;
        }

        pub fn setAutoHide(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "AUTOHIDE", .{}, arg);
            return self;
        }

        pub fn setFontStyle(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "FONTSTYLE", .{}, arg);
            return self;
        }

        ///
        /// CLIPBOARD (write-only): clear, cut, copy or paste the selection to or from
        /// the clipboard.
        /// Values: "CLEAR", "CUT", "COPY" or "PASTE".
        /// In Windows UNDO is also available, and REDO is available when FORMATTING=YES.
        /// (since 3.0)
        pub fn setClipboard(self: Initializer, arg: ?Clipboard) Initializer {
            if (self.last_error) |_| return self;
            if (arg) |value| switch (value) {
                .Copy => interop.setStrAttribute(self.ref, "CLIPBOARD", .{}, "COPY"),
                .Cut => interop.setStrAttribute(self.ref, "CLIPBOARD", .{}, "CUT"),
                .Paste => interop.setStrAttribute(self.ref, "CLIPBOARD", .{}, "PASTE"),
                .Clear => interop.setStrAttribute(self.ref, "CLIPBOARD", .{}, "CLEAR"),
                .Undo => interop.setStrAttribute(self.ref, "CLIPBOARD", .{}, "UNDO"),
                .Redo => interop.setStrAttribute(self.ref, "CLIPBOARD", .{}, "REDO"),
            } else {
                interop.clearAttribute(self.ref, "CLIPBOARD", .{});
            }
            return self;
        }

        pub fn removeFormatting(self: Initializer, arg: ?RemoveFormatting) Initializer {
            if (self.last_error) |_| return self;
            if (arg) |value| switch (value) {
                .All => interop.setStrAttribute(self.ref, "REMOVEFORMATTING", .{}, "ALL"),
                .Selection => interop.setStrAttribute(self.ref, "REMOVEFORMATTING", .{}, "SELECTION"),
            } else {
                interop.clearAttribute(self.ref, "REMOVEFORMATTING", .{});
            }
            return self;
        }

        ///
        /// READONLY: Allows the user only to read the contents, without changing it.
        /// Restricts keyboard input only, text value can still be changed using attributes.
        /// Navigation keys are still available.
        /// Possible values: "YES", "NO".
        /// Default: NO.
        pub fn setReadonly(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "READONLY", .{}, arg);
            return self;
        }

        ///
        /// APPEND (write-only): Inserts a text at the end of the current text.
        /// In the Multiline, if APPENDNEWLINE=YES, a "\n" character will be
        /// automatically inserted before the appended text if the current text is not
        /// empty(APPENDNEWLINE default is YES).
        /// Ignored if set before map.
        pub fn append(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "APPEND", .{}, arg);
            return self;
        }

        pub fn setMaskNoEmpty(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "MASKNOEMPTY", .{}, arg);
            return self;
        }

        pub fn setFont(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "FONT", .{}, arg);
            return self;
        }

        ///
        /// TABIMAGEn (non inheritable): image name to be used in the respective tab.
        /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
        /// n starts at 0.
        /// See also IupImage.
        /// In Motif, the image is shown only if TABTITLEn is NULL.
        /// In Windows and Motif set the BGCOLOR attribute before setting the image.
        /// When set after map will update the TABIMAGE attribute on the respective
        /// child (since 3.10).
        /// (since 3.0).
        /// TABIMAGE (non inheritable) (at children only): Same as TABIMAGEn but set in
        /// each child.
        /// Works only if set before the child is added to the tabs.
        pub fn setTabImage(self: Initializer, index: i32, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "TABIMAGE", .{index}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setTabImageHandleName(self: Initializer, index: i32, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "TABIMAGE", .{index}, arg);
            return self;
        }

        ///
        /// TABTITLEn (non inheritable): Contains the text to be shown in the
        /// respective tab title.
        /// n starts at 0.
        /// If this value is NULL, it will remain empty.
        /// The "&" character can be used to define a mnemonic, the next character will
        /// be used as key.
        /// Use "&&" to show the "&" character instead on defining a mnemonic.
        /// The button can be activated from any control in the dialog using the
        /// "Alt+key" combination.
        /// (mnemonic support since 3.3).
        /// When set after map will update the TABTITLE attribute on the respective
        /// child (since 3.10).
        /// (since 3.0).
        /// TABTITLE (non inheritable) (at children only): Same as TABTITLEn but set in
        /// each child.
        /// Works only if set before the child is added to the tabs.
        pub fn setTabTitle(self: Initializer, index: i32, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "TABTITLE", .{index}, arg);
            return self;
        }

        ///
        /// K_ANY K_ANY Action generated when a keyboard event occurs.
        /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
        /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
        /// c: identifier of typed key.
        /// Please refer to the Keyboard Codes table for a list of possible values.
        /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
        /// the control and not propagated.
        /// If returns IUP_CONTINUE, the key will be processed and the event will be
        /// propagated to the parent of the element receiving it, this is the default behavior.
        /// If returns IUP_DEFAULT the key is processed but it is not propagated.
        /// IUP_CLOSE will be processed.
        /// Notes Keyboard callbacks depend on the keyboard usage of the control with
        /// the focus.
        /// So if you return IUP_IGNORE the control will usually not process the key.
        /// But be aware that sometimes the control process the key in another event so
        /// even returning IUP_IGNORE the key can get processed.
        /// Although it will not be propagated.
        /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
        /// the IUP_CONTINUE return value to work while the control is in focus.
        /// If the callback does not exists it is automatically propagated to the
        /// parent of the element.
        /// K_* callbacks All defined keys are also callbacks of any element, called
        /// when the respective key is activated.
        /// For example: "K_cC" is also a callback activated when the user press
        /// Ctrl+C, when the focus is at the element or at a children with focus.
        /// This is the way an application can create shortcut keys, also called hot keys.
        /// These callbacks are not available in IupLua.
        /// Affects All elements with keyboard interaction.
        pub fn setKAnyCallback(self: Initializer, callback: ?*const OnKAnyFn) Initializer {
            const Handler = CallbackHandler(Self, OnKAnyFn, "K_ANY");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
        /// In Motif is also activated by the Help button in some workstations keyboard.
        /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Returns: IUP_CLOSE will be processed.
        /// Affects All elements with user interaction.
        pub fn setHelpCallback(self: Initializer, callback: ?*const OnHelpFn) Initializer {
            const Handler = CallbackHandler(Self, OnHelpFn, "HELP_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setDropMotionCallback(self: Initializer, callback: ?*const OnDropMotionFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropMotionFn, "DROPMOTION_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setDragEndCallback(self: Initializer, callback: ?*const OnDragEndFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragEndFn, "DRAGEND_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setDragBeginCallback(self: Initializer, callback: ?*const OnDragBeginFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragBeginFn, "DRAGBEGIN_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// ACTION ACTION Action generated when the element is activated.
        /// Affects each element differently.
        /// Callback int function(Ihandle *ih); [in C] ih:action() -> (ret: number) [in
        /// Lua] ih: identifier of the element that activated the event.
        /// In some elements, this callback may receive more parameters, apart from ih.
        /// Please refer to each element's documentation.
        /// Affects IupButton, IupItem, IupList, IupText, IupCanvas, IupMultiline,
        /// IupToggle
        pub fn setActionCallback(self: Initializer, callback: ?*const OnActionFn) Initializer {
            const Handler = CallbackHandler(Self, OnActionFn, "ACTION");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// MOTION_CB MOTION_CB Action generated when the mouse moves.
        /// Callback int function(Ihandle *ih, int x, int y, char *status); [in C]
        /// ih:motion_cb(x, y: number, status: string) -> (ret: number) [in Lua] ih:
        /// identifier of the element that activated the event.
        /// x, y: position in the canvas where the event has occurred, in pixels.
        /// status: status of mouse buttons and certain keyboard keys at the moment the
        /// event was generated.
        /// The same macros used for BUTTON_CB can be used for this status.
        /// Notes Between press and release all mouse events are redirected only to
        /// this control, even if the cursor moves outside the element.
        /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
        /// called with coordinates outside the element rectangle.
        /// Affects IupCanvas, IupGLCanvas
        pub fn setMotionCallback(self: Initializer, callback: ?*const OnMotionFn) Initializer {
            const Handler = CallbackHandler(Self, OnMotionFn, "MOTION_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
        /// updated in IupMap.
        /// When the element is a dialog, it is called after the layout is updated.
        /// For all other elements is called before the layout is updated, so the
        /// element current size will still be 0x0 during MAP_CB (since 3.14).
        /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
        /// Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setMapCallback(self: Initializer, callback: ?*const OnMapFn) Initializer {
            const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
        /// native element.
        /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Notes When the cursor is moved from one element to another, the call order
        /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
        /// control followed by the ENTERWINDOW_CB callback of the new control.
        /// (since 3.14) If the mouse button is hold pressed and the cursor moves
        /// outside the element the behavior is system dependent.
        /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
        /// GTK the callbacks are called.
        /// Affects All controls with user interaction.
        /// See Also LEAVEWINDOW_CB
        pub fn setEnterWindowCallback(self: Initializer, callback: ?*const OnEnterWindowFn) Initializer {
            const Handler = CallbackHandler(Self, OnEnterWindowFn, "ENTERWINDOW_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
        /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Notes If the dialog is visible then it is hidden before it is destroyed.
        /// The callback will be called right after it is hidden.
        /// The callback will be called before all other destroy procedures.
        /// For instance, if the element has children then it is called before the
        /// children are destroyed.
        /// For language binding implementations use the callback name "LDESTROY_CB" to
        /// release memory allocated by the binding for the element.
        /// Also the callback will be called before the language callback.
        /// Affects All.
        pub fn setDestroyCallback(self: Initializer, callback: ?*const OnDestroyFn) Initializer {
            const Handler = CallbackHandler(Self, OnDestroyFn, "DESTROY_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setDropDataCallback(self: Initializer, callback: ?*const OnDropDataFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropDataFn, "DROPDATA_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
        /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
        /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Affects All elements with user interaction, except menus.
        /// In Windows, there are restrictions when using this callback.
        /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
        /// function calls that display or activate a window.
        /// This causes the thread to yield control and can cause the application to
        /// stop responding to messages.
        /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
        pub fn setKillFocusCallback(self: Initializer, callback: ?*const OnKillFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnKillFocusFn, "KILLFOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setDragDataCallback(self: Initializer, callback: ?*const OnDragDataFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragDataFn, "DRAGDATA_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setDragDataSizeCallback(self: Initializer, callback: ?*const OnDragDataSizeFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragDataSizeFn, "DRAGDATASIZE_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// DROPFILES_CB DROPFILES_CB Action called when a file is "dropped" into the control.
        /// When several files are dropped at once, the callback is called several
        /// times, once for each file.
        /// If defined after the element is mapped then the attribute DROPFILESTARGET
        /// must be set to YES.
        /// [Windows and GTK Only] (GTK 2.6) Callback int function(Ihandle *ih, const
        /// char* filename, int num, int x, int y); [in C] ih:dropfiles_cb(filename:
        /// string; num, x, y: number) -> (ret: number) [in Lua] ih: identifier of the
        /// element that activated the event.
        /// filename: Name of the dropped file.
        /// num: Number index of the dropped file.
        /// If several files are dropped, num is the index of the dropped file starting
        /// from "total-1" to "0".
        /// x: X coordinate of the point where the user released the mouse button.
        /// y: Y coordinate of the point where the user released the mouse button.
        /// Returns: If IUP_IGNORE is returned the callback will NOT be called for the
        /// next dropped files, and the processing of dropped files will be interrupted.
        /// Affects IupDialog, IupCanvas, IupGLCanvas, IupText, IupList
        pub fn setDropFilesCallback(self: Initializer, callback: ?*const OnDropFilesFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropFilesFn, "DROPFILES_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
        /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setUnmapCallback(self: Initializer, callback: ?*const OnUnmapFn) Initializer {
            const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// CARET_CB: Action generated when the caret/cursor position is changed.
        /// int function(Ihandle *ih, int lin, int col, int pos); [in
        /// C]ih:caret_cb(lin, col, pos: number) -> (ret: number) [in Lua]
        pub fn setCaretCallback(self: Initializer, callback: ?*const OnCaretFn) Initializer {
            const Handler = CallbackHandler(Self, OnCaretFn, "CARET_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
        /// This callback is called after the KILLFOCUS_CB of the element that loosed
        /// the focus.
        /// The IupGetFocus function during the callback returns the element that
        /// loosed the focus.
        /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that received keyboard focus.
        /// Affects All elements with user interaction, except menus.
        /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
        pub fn setGetFocusCallback(self: Initializer, callback: ?*const OnGetFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnGetFocusFn, "GETFOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// BUTTON_CB BUTTON_CB Action generated when a mouse button is pressed or released.
        /// Callback int function(Ihandle* ih, int button, int pressed, int x, int y,
        /// char* status); [in C] ih:button_cb(button, pressed, x, y: number, status:
        /// string) -> (ret: number) [in Lua] ih: identifies the element that activated
        /// the event.
        /// button: identifies the activated mouse button: IUP_BUTTON1 - left mouse
        /// button (button 1); IUP_BUTTON2 - middle mouse button (button 2);
        /// IUP_BUTTON3 - right mouse button (button 3).
        /// pressed: indicates the state of the button: 0 - mouse button was released;
        /// 1 - mouse button was pressed.
        /// x, y: position in the canvas where the event has occurred, in pixels.
        /// status: status of the mouse buttons and some keyboard keys at the moment
        /// the event is generated.
        /// The following macros must be used for verification: iup_isshift(status)
        /// iup_iscontrol(status) iup_isbutton1(status) iup_isbutton2(status)
        /// iup_isbutton3(status) iup_isbutton4(status) iup_isbutton5(status)
        /// iup_isdouble(status) iup_isalt(status) iup_issys(status) They return 1 if
        /// the respective key or button is pressed, and 0 otherwise.
        /// These macros are also available in Lua, returning a boolean.
        /// Returns: IUP_CLOSE will be processed.
        /// On some controls if IUP_IGNORE is returned the action is ignored (this is
        /// system dependent).
        /// Notes This callback can be used to customize a button behavior.
        /// For a standard button behavior use the ACTION callback of the IupButton.
        /// For a single click the callback is called twice, one for pressed=1 and one
        /// for pressed=0.
        /// Only after both calls the ACTION callback is called.
        /// In Windows, if a dialog is shown or popup in any situation there could be
        /// unpredictable results because the native system still has processing to be
        /// done even after the callback is called.
        /// A double click is preceded by two single clicks, one for pressed=1 and one
        /// for pressed=0, and followed by a press=0, all three without the double
        /// click flag set.
        /// In GTK, it is preceded by an additional two single clicks sequence.
        /// For example, for one double click all the following calls are made:
        /// BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) BUTTON_CB(but=1 (0), x=154, y=83 [
        /// 1 ]) BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1
        /// (0), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1 (1), x=154, y=83 [ 1
        /// D ]) BUTTON_CB(but=1 (0), x=154, y=83 [ 1 ]) Between press and release all
        /// mouse events are redirected only to this control, even if the cursor moves
        /// outside the element.
        /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
        /// called with coordinates outside the element rectangle.
        /// Affects IupCanvas, IupButton, IupText, IupList, IupGLCanvas
        pub fn setButtonCallback(self: Initializer, callback: ?*const OnButtonFn) Initializer {
            const Handler = CallbackHandler(Self, OnButtonFn, "BUTTON_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// VALUECHANGED_CB: Called after the value was interactively changed by the user.
        /// (since 3.0) int function(Ihandle *ih); [in C]ih:valuechanged_cb() -> (ret:
        /// number) [in Lua]
        pub fn setValueChangedCallback(self: Initializer, callback: ?*const OnValueChangedFn) Initializer {
            const Handler = CallbackHandler(Self, OnValueChangedFn, "VALUECHANGED_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// SPIN_CB: Action generated when a spin button is pressed.
        /// Valid only when SPIN=YES.
        /// When this callback is called the ACTION callback is not called.
        /// The VALUE attribute can be changed during this callback only if SPINAUTO=NO.
        /// (since 3.0) int function(Ihandle *ih, int pos); [in C]ih:spin_cb(pos:
        /// number) -> (ret: number) [in Lua]
        pub fn setSpinCallback(self: Initializer, callback: ?*const OnSpinFn) Initializer {
            const Handler = CallbackHandler(Self, OnSpinFn, "SPIN_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setLDestroyCallback(self: Initializer, callback: ?*const OnLDestroyFn) Initializer {
            const Handler = CallbackHandler(Self, OnLDestroyFn, "LDESTROY_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
        /// native element.
        /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Notes When the cursor is moved from one element to another, the call order
        /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
        /// control followed by the ENTERWINDOW_CB callback of the new control.
        /// (since 3.14) If the mouse button is hold pressed and the cursor moves
        /// outside the element the behavior is system dependent.
        /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
        /// GTK the callbacks are called.
        /// Affects All controls with user interaction.
        /// See Also ENTERWINDOW_CB
        pub fn setLeaveWindowCallback(self: Initializer, callback: ?*const OnLeaveWindowFn) Initializer {
            const Handler = CallbackHandler(Self, OnLeaveWindowFn, "LEAVEWINDOW_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setPostMessageCallback(self: Initializer, callback: ?*const OnPostMessageFn) Initializer {
            const Handler = CallbackHandler(Self, OnPostMessageFn, "POSTMESSAGE_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }
    };

    pub fn setStrAttribute(self: *Self, attribute: [:0]const u8, arg: [:0]const u8) void {
        interop.setStrAttribute(self, attribute, .{}, arg);
    }

    pub fn getStrAttribute(self: *Self, attribute: [:0]const u8) [:0]const u8 {
        return interop.getStrAttribute(self, attribute, .{});
    }

    pub fn setIntAttribute(self: *Self, attribute: [:0]const u8, arg: i32) void {
        interop.setIntAttribute(self, attribute, .{}, arg);
    }

    pub fn getIntAttribute(self: *Self, attribute: [:0]const u8) i32 {
        return interop.getIntAttribute(self, attribute, .{});
    }

    pub fn setBoolAttribute(self: *Self, attribute: [:0]const u8, arg: bool) void {
        interop.setBoolAttribute(self, attribute, .{}, arg);
    }

    pub fn getBoolAttribute(self: *Self, attribute: [:0]const u8) bool {
        return interop.getBoolAttribute(self, attribute, .{});
    }

    pub fn getPtrAttribute(self: *Self, comptime T: type, attribute: [:0]const u8) ?*T {
        return interop.getPtrAttribute(T, self, attribute, .{});
    }

    pub fn setPtrAttribute(self: *Self, comptime T: type, attribute: [:0]const u8, value: ?*T) void {
        interop.setPtrAttribute(T, self, attribute, .{}, value);
    }

    pub fn setHandle(self: *Self, arg: [:0]const u8) void {
        interop.setHandle(self, arg);
    }

    pub fn fromHandleName(handle_name: [:0]const u8) ?*Self {
        return interop.fromHandleName(Self, handle_name);
    }

    pub fn postMessage(self: *Self, s: [:0]const u8, i: i32, f: f64, p: ?*anyopaque) void {
        return interop.postMessage(self, s, i, f, p);
    }

    ///
    /// Creates an interface element given its class name and parameters.
    /// After creation the element still needs to be attached to a container and mapped to the native system so it can be visible.
    pub fn init() Initializer {
        var handle = interop.create(Self);

        if (handle) |valid| {
            return .{
                .ref = @as(*Self, @ptrCast(valid)),
            };
        } else {
            return .{ .ref = undefined, .last_error = Error.NotInitialized };
        }
    }

    ///
    /// Displays a dialog in the current position, or changes a control VISIBLE attribute.
    /// For dialogs it is equivalent to call IupShowXY using IUP_CURRENT. See IupShowXY for more details.
    /// For other controls, to call IupShow is the same as setting VISIBLE=YES.
    pub fn show(self: *Self) !void {
        try interop.show(self);
    }

    ///
    /// Hides an interface element. This function has the same effect as attributing value "NO" to the interface element’s VISIBLE attribute.
    /// Once a dialog is hidden, either by means of IupHide or by changing the VISIBLE attribute or by means of a click in the window close button, the elements inside this dialog are not destroyed, so that you can show the dialog again. To destroy dialogs, the IupDestroy function must be called.
    pub fn hide(self: *Self) void {
        interop.hide(self);
    }

    ///
    /// Destroys an interface element and all its children.
    /// Only dialogs, timers, popup menus and images should be normally destroyed, but detached elements can also be destroyed.
    pub fn deinit(self: *Self) void {
        interop.destroy(self);
    }

    ///
    /// Creates (maps) the native interface objects corresponding to the given IUP interface elements.
    /// It will also called recursively to create the native element of all the children in the element's tree.
    /// The element must be already attached to a mapped container, except the dialog. A child can only be mapped if its parent is already mapped.
    /// This function is automatically called before the dialog is shown in IupShow, IupShowXY or IupPopup.
    /// If the element is a dialog then the abstract layout will be updated even if the dialog is already mapped. If the dialog is visible the elements will be immediately repositioned. Calling IupMap for an already mapped dialog is the same as only calling IupRefresh for the dialog.
    /// Calling IupMap for an already mapped element that is not a dialog does nothing.
    /// If you add new elements to an already mapped dialog you must call IupMap for that elements. And then call IupRefresh to update the dialog layout.
    /// If the WID attribute of an element is NULL, it means the element was not already mapped. Some containers do not have a native element associated, like VBOX and HBOX. In this case their WID is a fake value (void*)(-1).
    /// It is useful for the application to call IupMap when the value of the WID attribute must be known, i.e. the native element must exist, before a dialog is made visible.
    /// The MAP_CB callback is called at the end of the IupMap function, after all processing, so it can also be used to create other things that depend on the WID attribute. But notice that for non dialog elements it will be called before the dialog layout has been updated, so the element current size will still be 0x0 (since 3.14).
    pub fn map(self: *Self) !void {
        try interop.map(self);
    }

    ///
    ///
    pub fn getDialog(self: *Self) ?*iup.Dialog {
        return interop.getDialog(self);
    }

    ///
    /// Converts a (lin, col) character positioning into an absolute position. lin and col starts at 1, pos starts at 0. For single line controls pos is always "col - 1". (since 3.0)
    pub fn convertLinColToPos(self: *Self, lin: i32, col: i32) ?i32 {
        return Impl(Self).convertLinColToPos(self, lin, col);
    }

    ///
    ///
    pub fn convertPosToLinCol(self: *Self, pos: i32) ?iup.LinColPos {
        return Impl(Self).convertPosToLinCol(self, pos);
    }

    ///
    /// Returns the the child element that has the NAME attribute equals to the given value on the same dialog hierarchy.
    /// Works also for children of a menu that is associated with a dialog.
    pub fn getDialogChild(self: *Self, byName: [:0]const u8) ?Element {
        return interop.getDialogChild(self, byName);
    }

    ///
    /// Updates the size and layout of all controls in the same dialog.
    /// To be used after changing size attributes, or attributes that affect the size of the control. Can be used for any element inside a dialog, but the layout of the dialog and all controls will be updated. It can change the layout of all the controls inside the dialog because of the dynamic layout positioning.
    pub fn refresh(self: *Self) void {
        Impl(Self).refresh(self);
    }

    ///
    /// Updates the size and layout of all controls in the same dialog.
    pub fn update(self: *Self) void {
        Impl(Self).update(self);
    }

    ///
    /// Updates the size and layout of all controls in the same dialog.
    pub fn updateChildren(self: *Self) void {
        Impl(Self).updateChildren(self);
    }

    ///
    /// Force the element and its children to be redrawn immediately.
    pub fn redraw(self: *Self, redraw_children: bool) void {
        Impl(Self).redraw(self, redraw_children);
    }

    ///
    /// FGCOLOR: Text color.
    /// Default: the global attribute TXTFGCOLOR.
    pub fn getFgColor(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "FGCOLOR", .{});
    }

    ///
    /// FGCOLOR: Text color.
    /// Default: the global attribute TXTFGCOLOR.
    pub fn setFgColor(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "FGCOLOR", .{}, rgb);
    }

    ///
    /// COUNT (read-only): returns the number of characters in the text, including
    /// the line breaks.
    /// (since 3.5)
    pub fn getCount(self: *Self) i32 {
        return interop.getIntAttribute(self, "COUNT", .{});
    }

    pub fn getHandleName(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "HANDLENAME", .{});
    }

    pub fn setHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "HANDLENAME", .{}, arg);
    }

    pub fn getTipBgColor(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "TIPBGCOLOR", .{});
    }

    pub fn setTipBgColor(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "TIPBGCOLOR", .{}, rgb);
    }

    ///
    /// CARET (non inheritable): Character position of the insertion point.
    /// Its format depends in MULTILINE=YES.
    /// The first position, lin or col, is "1".
    pub fn getCaret(self: *Self) iup.LinColPos {
        var str = interop.getStrAttribute(self, "CARET", .{});
        return iup.LinColPos.parse(str, ',');
    }

    ///
    /// CARET (non inheritable): Character position of the insertion point.
    /// Its format depends in MULTILINE=YES.
    /// The first position, lin or col, is "1".
    pub fn setCaret(self: *Self, lin: i32, col: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.LinColPos.intIntToString(&buffer, lin, col, ',');
        interop.setStrAttribute(self, "CARET", .{}, value);
    }

    pub fn getMaskDecimalSymbol(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "MASKDECIMALSYMBOL", .{});
    }

    pub fn setMaskDecimalSymbol(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "MASKDECIMALSYMBOL", .{}, arg);
    }

    pub fn getTipIcon(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "TIPICON", .{});
    }

    pub fn setTipIcon(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TIPICON", .{}, arg);
    }

    ///
    /// OVERWRITE [Windows and GTK Only] (non inheritable): turns the overwrite
    /// mode ON or OFF.
    /// Works only when FORMATTING=YES.
    /// (since 3.0)
    pub fn getOverwrite(self: *Self) bool {
        return interop.getBoolAttribute(self, "OVERWRITE", .{});
    }

    ///
    /// OVERWRITE [Windows and GTK Only] (non inheritable): turns the overwrite
    /// mode ON or OFF.
    /// Works only when FORMATTING=YES.
    /// (since 3.0)
    pub fn setOverwrite(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "OVERWRITE", .{}, arg);
    }

    pub fn getAddFormatTagHandle(self: *Self) ?*iup.User {
        if (interop.getHandleAttribute(self, "ADDFORMATTAG_HANDLE", .{})) |handle| {
            return @as(*iup.User, @ptrCast(handle));
        } else {
            return null;
        }
    }

    pub fn setAddFormatTagHandle(self: *Self, arg: *iup.User) void {
        interop.setHandleAttribute(self, "ADDFORMATTAG_HANDLE", .{}, arg);
    }

    pub fn setAddFormatTagHandleHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "ADDFORMATTAG_HANDLE", .{}, arg);
    }

    pub fn getSpinInc(self: *Self) i32 {
        return interop.getIntAttribute(self, "SPININC", .{});
    }

    pub fn setSpinInc(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "SPININC", .{}, arg);
    }

    pub fn getMaxSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "MAXSIZE", .{});
        return Size.parse(str);
    }

    pub fn setMaxSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "MAXSIZE", .{}, value);
    }

    pub fn getScreenPosition(self: *Self) iup.XYPos {
        var str = interop.getStrAttribute(self, "SCREENPOSITION", .{});
        return iup.XYPos.parse(str, ',');
    }

    pub fn getPosition(self: *Self) iup.XYPos {
        var str = interop.getStrAttribute(self, "POSITION", .{});
        return iup.XYPos.parse(str, ',');
    }

    pub fn setPosition(self: *Self, x: i32, y: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
        interop.setStrAttribute(self, "POSITION", .{}, value);
    }

    pub fn getAppendNewLine(self: *Self) bool {
        return interop.getBoolAttribute(self, "APPENDNEWLINE", .{});
    }

    pub fn setAppendNewLine(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "APPENDNEWLINE", .{}, arg);
    }

    ///
    /// DROPFILESTARGET [Windows and GTK Only] (non inheritable): Enable or disable
    /// the drop of files.
    /// Default: NO, but if DROPFILES_CB is defined when the element is mapped then
    /// it will be automatically enabled.
    /// (since 3.0)
    pub fn getDropFilesTarget(self: *Self) bool {
        return interop.getBoolAttribute(self, "DROPFILESTARGET", .{});
    }

    ///
    /// DROPFILESTARGET [Windows and GTK Only] (non inheritable): Enable or disable
    /// the drop of files.
    /// Default: NO, but if DROPFILES_CB is defined when the element is mapped then
    /// it will be automatically enabled.
    /// (since 3.0)
    pub fn setDropFilesTarget(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DROPFILESTARGET", .{}, arg);
    }

    pub fn getTip(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "TIP", .{});
    }

    pub fn setTip(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TIP", .{}, arg);
    }

    pub fn getDragSourceMove(self: *Self) bool {
        return interop.getBoolAttribute(self, "DRAGSOURCEMOVE", .{});
    }

    pub fn setDragSourceMove(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DRAGSOURCEMOVE", .{}, arg);
    }

    pub fn getAddFormatTag(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "ADDFORMATTAG", .{});
    }

    pub fn setAddFormatTag(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "ADDFORMATTAG", .{}, arg);
    }

    pub fn getVisible(self: *Self) bool {
        return interop.getBoolAttribute(self, "VISIBLE", .{});
    }

    pub fn setVisible(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "VISIBLE", .{}, arg);
    }

    ///
    /// NC: Maximum number of characters allowed for keyboard input, larger text
    /// can still be set using attributes.
    /// The maximum value is the limit of the VALUE attribute.
    /// The "0" value is the same as maximum.
    /// Default: maximum.
    pub fn getNc(self: *Self) i32 {
        return interop.getIntAttribute(self, "NC", .{});
    }

    ///
    /// NC: Maximum number of characters allowed for keyboard input, larger text
    /// can still be set using attributes.
    /// The maximum value is the limit of the VALUE attribute.
    /// The "0" value is the same as maximum.
    /// Default: maximum.
    pub fn setNc(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "NC", .{}, arg);
    }

    pub fn zOrder(self: *Self, arg: ?ZOrder) void {
        if (arg) |value| switch (value) {
            .Top => interop.setStrAttribute(self, "ZORDER", .{}, "TOP"),
            .Bottom => interop.setStrAttribute(self, "ZORDER", .{}, "BOTTOM"),
        } else {
            interop.clearAttribute(self, "ZORDER", .{});
        }
    }

    pub fn getX(self: *Self) i32 {
        return interop.getIntAttribute(self, "X", .{});
    }

    pub fn getY(self: *Self) i32 {
        return interop.getIntAttribute(self, "Y", .{});
    }

    pub fn getDragDrop(self: *Self) bool {
        return interop.getBoolAttribute(self, "DRAGDROP", .{});
    }

    pub fn setDragDrop(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DRAGDROP", .{}, arg);
    }

    pub fn getTheme(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "THEME", .{});
    }

    pub fn setTheme(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "THEME", .{}, arg);
    }

    pub fn getMaskReal(self: *Self) ?MaskReal {
        var ret = interop.getStrAttribute(self, "MASKREAL", .{});

        if (std.ascii.eqlIgnoreCase("SIGNED", ret)) return .Signed;
        if (std.ascii.eqlIgnoreCase("UNSIGNED", ret)) return .Unsigned;
        return null;
    }

    pub fn setMaskReal(self: *Self, arg: ?MaskReal) void {
        if (arg) |value| switch (value) {
            .Signed => interop.setStrAttribute(self, "MASKREAL", .{}, "SIGNED"),
            .Unsigned => interop.setStrAttribute(self, "MASKREAL", .{}, "UNSIGNED"),
        } else {
            interop.clearAttribute(self, "MASKREAL", .{});
        }
    }

    ///
    /// LINEVALUE (read-only): returns the text of the line where the caret is.
    /// It does not include the "\n" character.
    /// When MULTILINE=NO returns the same as VALUE.
    /// (since 3.5)
    pub fn getLineValue(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "LINEVALUE", .{});
    }

    pub fn getExpand(self: *Self) ?Expand {
        var ret = interop.getStrAttribute(self, "EXPAND", .{});

        if (std.ascii.eqlIgnoreCase("YES", ret)) return .Yes;
        if (std.ascii.eqlIgnoreCase("HORIZONTAL", ret)) return .Horizontal;
        if (std.ascii.eqlIgnoreCase("VERTICAL", ret)) return .Vertical;
        if (std.ascii.eqlIgnoreCase("HORIZONTALFREE", ret)) return .HorizontalFree;
        if (std.ascii.eqlIgnoreCase("VERTICALFREE", ret)) return .VerticalFree;
        if (std.ascii.eqlIgnoreCase("NO", ret)) return .No;
        return null;
    }

    pub fn setExpand(self: *Self, arg: ?Expand) void {
        if (arg) |value| switch (value) {
            .Yes => interop.setStrAttribute(self, "EXPAND", .{}, "YES"),
            .Horizontal => interop.setStrAttribute(self, "EXPAND", .{}, "HORIZONTAL"),
            .Vertical => interop.setStrAttribute(self, "EXPAND", .{}, "VERTICAL"),
            .HorizontalFree => interop.setStrAttribute(self, "EXPAND", .{}, "HORIZONTALFREE"),
            .VerticalFree => interop.setStrAttribute(self, "EXPAND", .{}, "VERTICALFREE"),
            .No => interop.setStrAttribute(self, "EXPAND", .{}, "NO"),
        } else {
            interop.clearAttribute(self, "EXPAND", .{});
        }
    }

    ///
    /// VISIBLELINES: When MULTILINE=YES defines the number of visible lines for
    /// the Natural Size, this means that will act also as minimum number of
    /// visible lines.
    /// As for SIZE you can set to NULL after map to use it as an initial value.
    /// Default: 1 (since 3.0)
    pub fn getVisibleLines(self: *Self) i32 {
        return interop.getIntAttribute(self, "VISIBLELINES", .{});
    }

    ///
    /// VISIBLELINES: When MULTILINE=YES defines the number of visible lines for
    /// the Natural Size, this means that will act also as minimum number of
    /// visible lines.
    /// As for SIZE you can set to NULL after map to use it as an initial value.
    /// Default: 1 (since 3.0)
    pub fn setVisibleLines(self: *Self, arg: ?i32) void {
        if (arg == null) {
            interop.setStrAttribute(self, "VISIBLELINES", .{}, null);
        } else {
            interop.setIntAttribute(self, "VISIBLELINES", .{}, arg.?);
        }
    }

    ///
    /// SIZE (non inheritable): Since the contents can be changed by the user, the
    /// Natural Size is not affected by the text contents (since 3.0).
    /// Use VISIBLECOLUMNS and VISIBLELINES to control the Natural Size.
    pub fn getSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "SIZE", .{});
        return Size.parse(str);
    }

    ///
    /// SIZE (non inheritable): Since the contents can be changed by the user, the
    /// Natural Size is not affected by the text contents (since 3.0).
    /// Use VISIBLECOLUMNS and VISIBLELINES to control the Natural Size.
    pub fn setSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "SIZE", .{}, value);
    }

    ///
    /// PADDING: internal margin.
    /// Works just like the MARGIN attribute of the IupHbox and IupVbox containers,
    /// but uses a different name to avoid inheritance problems.
    /// Default value: "0x0".
    /// In Windows, only the horizontal value is used.
    /// (since 3.0) (GTK 2.10 for single line)
    pub fn getPadding(self: *Self) Size {
        var str = interop.getStrAttribute(self, "PADDING", .{});
        return Size.parse(str);
    }

    ///
    /// PADDING: internal margin.
    /// Works just like the MARGIN attribute of the IupHbox and IupVbox containers,
    /// but uses a different name to avoid inheritance problems.
    /// Default value: "0x0".
    /// In Windows, only the horizontal value is used.
    /// (since 3.0) (GTK 2.10 for single line)
    pub fn setPadding(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "PADDING", .{}, value);
    }

    pub fn getSpinMin(self: *Self) i32 {
        return interop.getIntAttribute(self, "SPINMIN", .{});
    }

    pub fn setSpinMin(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "SPINMIN", .{}, arg);
    }

    pub fn getWId(self: *Self) i32 {
        return interop.getIntAttribute(self, "WID", .{});
    }

    pub fn getTipMarkup(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "TIPMARKUP", .{});
    }

    pub fn setTipMarkup(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TIPMARKUP", .{}, arg);
    }

    pub fn getFontSize(self: *Self) i32 {
        return interop.getIntAttribute(self, "FONTSIZE", .{});
    }

    pub fn setFontSize(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "FONTSIZE", .{}, arg);
    }

    pub fn getNaturalSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "NATURALSIZE", .{});
        return Size.parse(str);
    }

    pub fn getDropTypes(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "DROPTYPES", .{});
    }

    pub fn setDropTypes(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "DROPTYPES", .{}, arg);
    }

    pub fn getUserSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "USERSIZE", .{});
        return Size.parse(str);
    }

    pub fn setUserSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "USERSIZE", .{}, value);
    }

    pub fn getTipDelay(self: *Self) i32 {
        return interop.getIntAttribute(self, "TIPDELAY", .{});
    }

    pub fn setTipDelay(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "TIPDELAY", .{}, arg);
    }

    ///
    /// TABSIZE [Windows and GTK Only]: Valid only when MULTILINE=YES.
    /// Controls the number of characters for a tab stop.
    /// Default: 8.
    pub fn getTabsIZe(self: *Self) i32 {
        return interop.getIntAttribute(self, "TABSIZE", .{});
    }

    ///
    /// TABSIZE [Windows and GTK Only]: Valid only when MULTILINE=YES.
    /// Controls the number of characters for a tab stop.
    /// Default: 8.
    pub fn setTabsIZe(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "TABSIZE", .{}, arg);
    }

    ///
    /// PROPAGATEFOCUS(non inheritable): enables the focus callback forwarding to
    /// the next native parent with FOCUS_CB defined.
    /// Default: NO.
    /// (since 3.23)
    pub fn getPropagateFocus(self: *Self) bool {
        return interop.getBoolAttribute(self, "PROPAGATEFOCUS", .{});
    }

    ///
    /// PROPAGATEFOCUS(non inheritable): enables the focus callback forwarding to
    /// the next native parent with FOCUS_CB defined.
    /// Default: NO.
    /// (since 3.23)
    pub fn setPropagateFocus(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "PROPAGATEFOCUS", .{}, arg);
    }

    ///
    /// BGCOLOR: Background color of the text.
    /// Default: the global attribute TXTBGCOLOR.
    /// Ignored in GTK when MULTILINE=NO.
    pub fn getBgColor(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "BGCOLOR", .{});
    }

    ///
    /// BGCOLOR: Background color of the text.
    /// Default: the global attribute TXTBGCOLOR.
    /// Ignored in GTK when MULTILINE=NO.
    pub fn setBgColor(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "BGCOLOR", .{}, rgb);
    }

    pub fn getDropTarget(self: *Self) bool {
        return interop.getBoolAttribute(self, "DROPTARGET", .{});
    }

    pub fn setDropTarget(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DROPTARGET", .{}, arg);
    }

    ///
    /// VALUEMASKED (non inheritable) (write-only): sets VALUE but first checks if
    /// it is validated by MASK.
    /// If not does nothing.
    /// (since 3.4)
    pub fn valueMasked(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "VALUEMASKED", .{}, arg);
    }

    pub fn getDragSource(self: *Self) bool {
        return interop.getBoolAttribute(self, "DRAGSOURCE", .{});
    }

    pub fn setDragSource(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DRAGSOURCE", .{}, arg);
    }

    pub fn getFloating(self: *Self) ?Floating {
        var ret = interop.getStrAttribute(self, "FLOATING", .{});

        if (std.ascii.eqlIgnoreCase("YES", ret)) return .Yes;
        if (std.ascii.eqlIgnoreCase("IGNORE", ret)) return .Ignore;
        if (std.ascii.eqlIgnoreCase("NO", ret)) return .No;
        return null;
    }

    pub fn setFloating(self: *Self, arg: ?Floating) void {
        if (arg) |value| switch (value) {
            .Yes => interop.setStrAttribute(self, "FLOATING", .{}, "YES"),
            .Ignore => interop.setStrAttribute(self, "FLOATING", .{}, "IGNORE"),
            .No => interop.setStrAttribute(self, "FLOATING", .{}, "NO"),
        } else {
            interop.clearAttribute(self, "FLOATING", .{});
        }
    }

    pub fn getNormalizerGroup(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "NORMALIZERGROUP", .{});
    }

    pub fn setNormalizerGroup(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "NORMALIZERGROUP", .{}, arg);
    }

    pub fn getRasterSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "RASTERSIZE", .{});
        return Size.parse(str);
    }

    pub fn setRasterSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "RASTERSIZE", .{}, value);
    }

    ///
    /// SCROLLTOPOS (non inheritable, write only): Scroll the text to make the
    /// given character position visible.
    /// It uses the same format and reference of the CARETPOS attribute ("pos"
    /// starting at 0).
    /// (since 3.0)
    pub fn scrollTopOs(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "SCROLLTOPOS", .{}, arg);
    }

    ///
    /// FORMATTING [Windows and GTK Only] (non inheritable): When enabled allow the
    /// use of text formatting attributes.
    /// In GTK is always enabled, but only when MULTILINE=YES.
    /// Default: NO.
    /// (since 3.0)
    pub fn getFormatting(self: *Self) bool {
        return interop.getBoolAttribute(self, "FORMATTING", .{});
    }

    ///
    /// FORMATTING [Windows and GTK Only] (non inheritable): When enabled allow the
    /// use of text formatting attributes.
    /// In GTK is always enabled, but only when MULTILINE=YES.
    /// Default: NO.
    /// (since 3.0)
    pub fn setFormatting(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "FORMATTING", .{}, arg);
    }

    ///
    /// SCROLLTO (non inheritable, write only): Scroll the text to make the given
    /// character position visible.
    /// It uses the same format and reference of the CARET attribute ("lin:col" or
    /// "col" starting at 1).
    /// In Windows, when FORMATTING=Yes "col" is ignored.
    /// (since 3.0)
    pub fn scrollTo(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "SCROLLTO", .{}, arg);
    }

    pub fn getTipFgColor(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "TIPFGCOLOR", .{});
    }

    pub fn setTipFgColor(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "TIPFGCOLOR", .{}, rgb);
    }

    ///
    /// LINECOUNT (read-only): returns the number of lines in the text.
    /// When MULTILINE=NO returns always "1".
    /// (since 3.5)
    pub fn getLineCount(self: *Self) i32 {
        return interop.getIntAttribute(self, "LINECOUNT", .{});
    }

    pub fn getSpinWrap(self: *Self) bool {
        return interop.getBoolAttribute(self, "SPINWRAP", .{});
    }

    pub fn setSpinWrap(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "SPINWRAP", .{}, arg);
    }

    pub fn getFontFace(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "FONTFACE", .{});
    }

    pub fn setFontFace(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "FONTFACE", .{}, arg);
    }

    ///
    /// VISIBLECOLUMNS: Defines the number of visible columns for the Natural Size,
    /// this means that will act also as minimum number of visible columns.
    /// It uses a wider character size than the one used for the SIZE attribute so
    /// strings will fit better without the need of extra columns.
    /// As for SIZE you can set to NULL after map to use it as an initial value.
    /// Default: 5 (since 3.0)
    pub fn getVisibleColumns(self: *Self) i32 {
        return interop.getIntAttribute(self, "VISIBLECOLUMNS", .{});
    }

    ///
    /// VISIBLECOLUMNS: Defines the number of visible columns for the Natural Size,
    /// this means that will act also as minimum number of visible columns.
    /// It uses a wider character size than the one used for the SIZE attribute so
    /// strings will fit better without the need of extra columns.
    /// As for SIZE you can set to NULL after map to use it as an initial value.
    /// Default: 5 (since 3.0)
    pub fn setVisibleColumns(self: *Self, arg: ?i32) void {
        if (arg == null) {
            interop.setStrAttribute(self, "VISIBLECOLUMNS", .{}, null);
        } else {
            interop.setIntAttribute(self, "VISIBLECOLUMNS", .{}, arg.?);
        }
    }

    pub fn getMaskInt(self: *Self) iup.Range {
        var str = interop.getStrAttribute(self, "MASKINT", .{});
        return iup.Range.parse(str, ',');
    }

    pub fn setMaskInt(self: *Self, begin: i32, end: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.Range.intIntToString(&buffer, begin, end, ',');
        interop.setStrAttribute(self, "MASKINT", .{}, value);
    }

    pub fn getSpinAlign(self: *Self) ?SpinAlign {
        var ret = interop.getStrAttribute(self, "SPINALIGN", .{});

        if (std.ascii.eqlIgnoreCase("LEFT", ret)) return .Left;
        if (std.ascii.eqlIgnoreCase("RIGHT", ret)) return .Right;
        return null;
    }

    pub fn setSpinAlign(self: *Self, arg: ?SpinAlign) void {
        if (arg) |value| switch (value) {
            .Left => interop.setStrAttribute(self, "SPINALIGN", .{}, "LEFT"),
            .Right => interop.setStrAttribute(self, "SPINALIGN", .{}, "RIGHT"),
        } else {
            interop.clearAttribute(self, "SPINALIGN", .{});
        }
    }

    pub fn getName(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "NAME", .{});
    }

    pub fn setName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "NAME", .{}, arg);
    }

    pub fn getMaskCasei(self: *Self) bool {
        return interop.getBoolAttribute(self, "MASKCASEI", .{});
    }

    pub fn setMaskCasei(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "MASKCASEI", .{}, arg);
    }

    ///
    /// SELECTIONPOS (non inheritable): Same as SELECTION but using a zero based
    /// character index "pos1:pos2".
    /// Useful for indexing the VALUE string.
    /// The values ALL and NONE are also accepted.
    /// See the Notes below if using UTF-8 strings in GTK.
    /// (since 3.0)
    pub fn getSelectionPos(self: *Self) iup.Range {
        var str = interop.getStrAttribute(self, "SELECTIONPOS", .{});
        return iup.Range.parse(str, ',');
    }

    ///
    /// SELECTIONPOS (non inheritable): Same as SELECTION but using a zero based
    /// character index "pos1:pos2".
    /// Useful for indexing the VALUE string.
    /// The values ALL and NONE are also accepted.
    /// See the Notes below if using UTF-8 strings in GTK.
    /// (since 3.0)
    pub fn setSelectionPos(self: *Self, begin: i32, end: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.Range.intIntToString(&buffer, begin, end, ',');
        interop.setStrAttribute(self, "SELECTIONPOS", .{}, value);
    }

    ///
    /// VALUE (non inheritable): Text entered by the user.
    /// The '\n' character indicates a new line, valid only when MULTILINE=YES.
    /// After the element is mapped and if there is no text will return the empty
    /// string "".
    pub fn getValue(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "VALUE", .{});
    }

    ///
    /// VALUE (non inheritable): Text entered by the user.
    /// The '\n' character indicates a new line, valid only when MULTILINE=YES.
    /// After the element is mapped and if there is no text will return the empty
    /// string "".
    pub fn setValue(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "VALUE", .{}, arg);
    }

    ///
    /// FILTER [Windows Only] (non inheritable): allows a custom filter to process
    /// the characters: Can be LOWERCASE, UPPERCASE or NUMBER (only numbers allowed).
    /// (since 3.0)
    pub fn getFilter(self: *Self) ?Filter {
        var ret = interop.getStrAttribute(self, "FILTER", .{});

        if (std.ascii.eqlIgnoreCase("LOWERCASE", ret)) return .LowerCase;
        if (std.ascii.eqlIgnoreCase("NUMBER", ret)) return .Number;
        if (std.ascii.eqlIgnoreCase("UPPERCASE", ret)) return .UpperCase;
        return null;
    }

    ///
    /// FILTER [Windows Only] (non inheritable): allows a custom filter to process
    /// the characters: Can be LOWERCASE, UPPERCASE or NUMBER (only numbers allowed).
    /// (since 3.0)
    pub fn setFilter(self: *Self, arg: ?Filter) void {
        if (arg) |value| switch (value) {
            .LowerCase => interop.setStrAttribute(self, "FILTER", .{}, "LOWERCASE"),
            .Number => interop.setStrAttribute(self, "FILTER", .{}, "NUMBER"),
            .UpperCase => interop.setStrAttribute(self, "FILTER", .{}, "UPPERCASE"),
        } else {
            interop.clearAttribute(self, "FILTER", .{});
        }
    }

    pub fn getSpinMax(self: *Self) i32 {
        return interop.getIntAttribute(self, "SPINMAX", .{});
    }

    pub fn setSpinMax(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "SPINMAX", .{}, arg);
    }

    ///
    /// MULTILINE (creation only) (non inheritable): allows the edition of multiple lines.
    /// In single line mode some characters are invalid, like "\t", "\r" and "\n".
    /// Default: NO.
    /// When set to Yes will also reset the SCROLLBAR attribute to Yes.
    /// The values ALL and NONE are also accepted independently of MULTILINE (since 3.0).
    pub fn getMultiline(self: *Self) bool {
        return interop.getBoolAttribute(self, "MULTILINE", .{});
    }

    ///
    /// MULTILINE (creation only) (non inheritable): allows the edition of multiple lines.
    /// In single line mode some characters are invalid, like "\t", "\r" and "\n".
    /// Default: NO.
    /// When set to Yes will also reset the SCROLLBAR attribute to Yes.
    /// The values ALL and NONE are also accepted independently of MULTILINE (since 3.0).
    pub fn setMultiline(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "MULTILINE", .{}, arg);
    }

    ///
    /// SELECTEDTEXT (non inheritable): Selection text.
    /// Returns NULL if there is no selection.
    /// When changed replaces the current selection.
    /// Similar to INSERT, but does nothing if there is no selection.
    pub fn getSelectedText(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "SELECTEDTEXT", .{});
    }

    ///
    /// SELECTEDTEXT (non inheritable): Selection text.
    /// Returns NULL if there is no selection.
    /// When changed replaces the current selection.
    /// Similar to INSERT, but does nothing if there is no selection.
    pub fn setSelectedText(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "SELECTEDTEXT", .{}, arg);
    }

    ///
    /// CPADDING: same as PADDING but using the units of the SIZE attribute.
    /// It will actually set the PADDING attribute.
    /// (since 3.29)
    pub fn getCPadding(self: *Self) Size {
        var str = interop.getStrAttribute(self, "CPADDING", .{});
        return Size.parse(str);
    }

    ///
    /// CPADDING: same as PADDING but using the units of the SIZE attribute.
    /// It will actually set the PADDING attribute.
    /// (since 3.29)
    pub fn setCPadding(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "CPADDING", .{}, value);
    }

    ///
    /// ACTIVE, FONT, EXPAND, SCREENPOSITION, POSITION, MINSIZE, MAXSIZE, WID, TIP,
    /// RASTERSIZE, ZORDER, VISIBLE, THEME: also accepted.
    pub fn getActive(self: *Self) bool {
        return interop.getBoolAttribute(self, "ACTIVE", .{});
    }

    ///
    /// ACTIVE, FONT, EXPAND, SCREENPOSITION, POSITION, MINSIZE, MAXSIZE, WID, TIP,
    /// RASTERSIZE, ZORDER, VISIBLE, THEME: also accepted.
    pub fn setActive(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "ACTIVE", .{}, arg);
    }

    pub fn getTipVisible(self: *Self) bool {
        return interop.getBoolAttribute(self, "TIPVISIBLE", .{});
    }

    pub fn setTipVisible(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "TIPVISIBLE", .{}, arg);
    }

    ///
    /// CHANGECASE (non inheritable): Change case according to given conversion.
    /// Can be UPPER, LOWER, TOGGLE, or TITLE.
    /// TITLE case change first letter of words separated by spaces to upper case
    /// others to lower case, but first letter is changed only if word has more
    /// than 3 characters, for instance: "Best of the World".
    /// Supports Latin-1 encoding only, even when using UTF-8.
    /// Does not depends on current locale.
    /// (since 3.28)
    pub fn changeCase(self: *Self, arg: ?ChangeCase) void {
        if (arg) |value| switch (value) {
            .Upper => interop.setStrAttribute(self, "CHANGECASE", .{}, "UPPER"),
            .Lower => interop.setStrAttribute(self, "CHANGECASE", .{}, "LOWER"),
            .Toggle => interop.setStrAttribute(self, "CHANGECASE", .{}, "TOGGLE"),
            .Title => interop.setStrAttribute(self, "CHANGECASE", .{}, "TITLE"),
        } else {
            interop.clearAttribute(self, "CHANGECASE", .{});
        }
    }

    ///
    /// CUEBANNER [Windows and GTK Only] (non inheritable): a text that is
    /// displayed when there is no text at the control.
    /// It works as a textual cue, or tip to prompt the user for input.
    /// Valid only for MULTILINE=NO, and works only when Visual Styles are enabled.
    /// (since 3.0) [GTK 3.2] (GTK support added in IUP 3.20)
    pub fn getCueBanner(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "CUEBANNER", .{});
    }

    ///
    /// CUEBANNER [Windows and GTK Only] (non inheritable): a text that is
    /// displayed when there is no text at the control.
    /// It works as a textual cue, or tip to prompt the user for input.
    /// Valid only for MULTILINE=NO, and works only when Visual Styles are enabled.
    /// (since 3.0) [GTK 3.2] (GTK support added in IUP 3.20)
    pub fn setCueBanner(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "CUEBANNER", .{}, arg);
    }

    pub fn getExpandWeight(self: *Self) f64 {
        return interop.getDoubleAttribute(self, "EXPANDWEIGHT", .{});
    }

    pub fn setExpandWeight(self: *Self, arg: f64) void {
        interop.setDoubleAttribute(self, "EXPANDWEIGHT", .{}, arg);
    }

    pub fn getMinSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "MINSIZE", .{});
        return Size.parse(str);
    }

    pub fn setMinSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "MINSIZE", .{}, value);
    }

    pub fn getNTheme(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "NTHEME", .{});
    }

    pub fn setNTheme(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "NTHEME", .{}, arg);
    }

    pub fn getCharSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "CHARSIZE", .{});
        return Size.parse(str);
    }

    ///
    /// CARETPOS (non inheritable): Also the character position of the insertion
    /// point, but using a zero based character unique index "pos".
    /// Useful for indexing the VALUE string.
    /// See the Notes below if using UTF-8 strings in GTK.
    /// (since 3.0)
    pub fn getCaretPos(self: *Self) i32 {
        return interop.getIntAttribute(self, "CARETPOS", .{});
    }

    ///
    /// CARETPOS (non inheritable): Also the character position of the insertion
    /// point, but using a zero based character unique index "pos".
    /// Useful for indexing the VALUE string.
    /// See the Notes below if using UTF-8 strings in GTK.
    /// (since 3.0)
    pub fn setCaretPos(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "CARETPOS", .{}, arg);
    }

    pub fn getSpinAuto(self: *Self) bool {
        return interop.getBoolAttribute(self, "SPINAUTO", .{});
    }

    pub fn setSpinAuto(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "SPINAUTO", .{}, arg);
    }

    ///
    /// MASK (non inheritable): Defines a mask that will filter interactive text input.
    pub fn getMask(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "MASK", .{});
    }

    ///
    /// MASK (non inheritable): Defines a mask that will filter interactive text input.
    pub fn setMask(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "MASK", .{}, arg);
    }

    pub fn getDragTypes(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "DRAGTYPES", .{});
    }

    pub fn setDragTypes(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "DRAGTYPES", .{}, arg);
    }

    pub fn getAutoHide(self: *Self) bool {
        return interop.getBoolAttribute(self, "AUTOHIDE", .{});
    }

    pub fn setAutoHide(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "AUTOHIDE", .{}, arg);
    }

    pub fn getFontStyle(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "FONTSTYLE", .{});
    }

    pub fn setFontStyle(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "FONTSTYLE", .{}, arg);
    }

    ///
    /// CLIPBOARD (write-only): clear, cut, copy or paste the selection to or from
    /// the clipboard.
    /// Values: "CLEAR", "CUT", "COPY" or "PASTE".
    /// In Windows UNDO is also available, and REDO is available when FORMATTING=YES.
    /// (since 3.0)
    pub fn getClipboard(self: *Self) ?Clipboard {
        var ret = interop.getStrAttribute(self, "CLIPBOARD", .{});

        if (std.ascii.eqlIgnoreCase("COPY", ret)) return .Copy;
        if (std.ascii.eqlIgnoreCase("CUT", ret)) return .Cut;
        if (std.ascii.eqlIgnoreCase("PASTE", ret)) return .Paste;
        if (std.ascii.eqlIgnoreCase("CLEAR", ret)) return .Clear;
        if (std.ascii.eqlIgnoreCase("UNDO", ret)) return .Undo;
        if (std.ascii.eqlIgnoreCase("REDO", ret)) return .Redo;
        return null;
    }

    ///
    /// CLIPBOARD (write-only): clear, cut, copy or paste the selection to or from
    /// the clipboard.
    /// Values: "CLEAR", "CUT", "COPY" or "PASTE".
    /// In Windows UNDO is also available, and REDO is available when FORMATTING=YES.
    /// (since 3.0)
    pub fn setClipboard(self: *Self, arg: ?Clipboard) void {
        if (arg) |value| switch (value) {
            .Copy => interop.setStrAttribute(self, "CLIPBOARD", .{}, "COPY"),
            .Cut => interop.setStrAttribute(self, "CLIPBOARD", .{}, "CUT"),
            .Paste => interop.setStrAttribute(self, "CLIPBOARD", .{}, "PASTE"),
            .Clear => interop.setStrAttribute(self, "CLIPBOARD", .{}, "CLEAR"),
            .Undo => interop.setStrAttribute(self, "CLIPBOARD", .{}, "UNDO"),
            .Redo => interop.setStrAttribute(self, "CLIPBOARD", .{}, "REDO"),
        } else {
            interop.clearAttribute(self, "CLIPBOARD", .{});
        }
    }

    pub fn removeFormatting(self: *Self, arg: ?RemoveFormatting) void {
        if (arg) |value| switch (value) {
            .All => interop.setStrAttribute(self, "REMOVEFORMATTING", .{}, "ALL"),
            .Selection => interop.setStrAttribute(self, "REMOVEFORMATTING", .{}, "SELECTION"),
        } else {
            interop.clearAttribute(self, "REMOVEFORMATTING", .{});
        }
    }

    ///
    /// READONLY: Allows the user only to read the contents, without changing it.
    /// Restricts keyboard input only, text value can still be changed using attributes.
    /// Navigation keys are still available.
    /// Possible values: "YES", "NO".
    /// Default: NO.
    pub fn getReadonly(self: *Self) bool {
        return interop.getBoolAttribute(self, "READONLY", .{});
    }

    ///
    /// READONLY: Allows the user only to read the contents, without changing it.
    /// Restricts keyboard input only, text value can still be changed using attributes.
    /// Navigation keys are still available.
    /// Possible values: "YES", "NO".
    /// Default: NO.
    pub fn setReadonly(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "READONLY", .{}, arg);
    }

    ///
    /// APPEND (write-only): Inserts a text at the end of the current text.
    /// In the Multiline, if APPENDNEWLINE=YES, a "\n" character will be
    /// automatically inserted before the appended text if the current text is not
    /// empty(APPENDNEWLINE default is YES).
    /// Ignored if set before map.
    pub fn append(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "APPEND", .{}, arg);
    }

    pub fn getMaskNoEmpty(self: *Self) bool {
        return interop.getBoolAttribute(self, "MASKNOEMPTY", .{});
    }

    pub fn setMaskNoEmpty(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "MASKNOEMPTY", .{}, arg);
    }

    pub fn getFont(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "FONT", .{});
    }

    pub fn setFont(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "FONT", .{}, arg);
    }

    ///
    /// TABIMAGEn (non inheritable): image name to be used in the respective tab.
    /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
    /// n starts at 0.
    /// See also IupImage.
    /// In Motif, the image is shown only if TABTITLEn is NULL.
    /// In Windows and Motif set the BGCOLOR attribute before setting the image.
    /// When set after map will update the TABIMAGE attribute on the respective
    /// child (since 3.10).
    /// (since 3.0).
    /// TABIMAGE (non inheritable) (at children only): Same as TABIMAGEn but set in
    /// each child.
    /// Works only if set before the child is added to the tabs.
    pub fn getTabImage(self: *Self, index: i32) ?iup.Element {
        if (interop.getHandleAttribute(self, "TABIMAGE", .{index})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    ///
    /// TABIMAGEn (non inheritable): image name to be used in the respective tab.
    /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
    /// n starts at 0.
    /// See also IupImage.
    /// In Motif, the image is shown only if TABTITLEn is NULL.
    /// In Windows and Motif set the BGCOLOR attribute before setting the image.
    /// When set after map will update the TABIMAGE attribute on the respective
    /// child (since 3.10).
    /// (since 3.0).
    /// TABIMAGE (non inheritable) (at children only): Same as TABIMAGEn but set in
    /// each child.
    /// Works only if set before the child is added to the tabs.
    pub fn setTabImage(self: *Self, index: i32, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "TABIMAGE", .{index}, arg);
    }

    pub fn setTabImageHandleName(self: *Self, index: i32, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TABIMAGE", .{index}, arg);
    }

    ///
    /// TABTITLEn (non inheritable): Contains the text to be shown in the
    /// respective tab title.
    /// n starts at 0.
    /// If this value is NULL, it will remain empty.
    /// The "&" character can be used to define a mnemonic, the next character will
    /// be used as key.
    /// Use "&&" to show the "&" character instead on defining a mnemonic.
    /// The button can be activated from any control in the dialog using the
    /// "Alt+key" combination.
    /// (mnemonic support since 3.3).
    /// When set after map will update the TABTITLE attribute on the respective
    /// child (since 3.10).
    /// (since 3.0).
    /// TABTITLE (non inheritable) (at children only): Same as TABTITLEn but set in
    /// each child.
    /// Works only if set before the child is added to the tabs.
    pub fn getTabTitle(self: *Self, index: i32) [:0]const u8 {
        return interop.getStrAttribute(self, "TABTITLE", .{index});
    }

    ///
    /// TABTITLEn (non inheritable): Contains the text to be shown in the
    /// respective tab title.
    /// n starts at 0.
    /// If this value is NULL, it will remain empty.
    /// The "&" character can be used to define a mnemonic, the next character will
    /// be used as key.
    /// Use "&&" to show the "&" character instead on defining a mnemonic.
    /// The button can be activated from any control in the dialog using the
    /// "Alt+key" combination.
    /// (mnemonic support since 3.3).
    /// When set after map will update the TABTITLE attribute on the respective
    /// child (since 3.10).
    /// (since 3.0).
    /// TABTITLE (non inheritable) (at children only): Same as TABTITLEn but set in
    /// each child.
    /// Works only if set before the child is added to the tabs.
    pub fn setTabTitle(self: *Self, index: i32, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TABTITLE", .{index}, arg);
    }

    ///
    /// K_ANY K_ANY Action generated when a keyboard event occurs.
    /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
    /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
    /// c: identifier of typed key.
    /// Please refer to the Keyboard Codes table for a list of possible values.
    /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
    /// the control and not propagated.
    /// If returns IUP_CONTINUE, the key will be processed and the event will be
    /// propagated to the parent of the element receiving it, this is the default behavior.
    /// If returns IUP_DEFAULT the key is processed but it is not propagated.
    /// IUP_CLOSE will be processed.
    /// Notes Keyboard callbacks depend on the keyboard usage of the control with
    /// the focus.
    /// So if you return IUP_IGNORE the control will usually not process the key.
    /// But be aware that sometimes the control process the key in another event so
    /// even returning IUP_IGNORE the key can get processed.
    /// Although it will not be propagated.
    /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
    /// the IUP_CONTINUE return value to work while the control is in focus.
    /// If the callback does not exists it is automatically propagated to the
    /// parent of the element.
    /// K_* callbacks All defined keys are also callbacks of any element, called
    /// when the respective key is activated.
    /// For example: "K_cC" is also a callback activated when the user press
    /// Ctrl+C, when the focus is at the element or at a children with focus.
    /// This is the way an application can create shortcut keys, also called hot keys.
    /// These callbacks are not available in IupLua.
    /// Affects All elements with keyboard interaction.
    pub fn setKAnyCallback(self: *Self, callback: ?*const OnKAnyFn) void {
        const Handler = CallbackHandler(Self, OnKAnyFn, "K_ANY");
        Handler.setCallback(self, callback);
    }

    ///
    /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
    /// In Motif is also activated by the Help button in some workstations keyboard.
    /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Returns: IUP_CLOSE will be processed.
    /// Affects All elements with user interaction.
    pub fn setHelpCallback(self: *Self, callback: ?*const OnHelpFn) void {
        const Handler = CallbackHandler(Self, OnHelpFn, "HELP_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDropMotionCallback(self: *Self, callback: ?*const OnDropMotionFn) void {
        const Handler = CallbackHandler(Self, OnDropMotionFn, "DROPMOTION_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragEndCallback(self: *Self, callback: ?*const OnDragEndFn) void {
        const Handler = CallbackHandler(Self, OnDragEndFn, "DRAGEND_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragBeginCallback(self: *Self, callback: ?*const OnDragBeginFn) void {
        const Handler = CallbackHandler(Self, OnDragBeginFn, "DRAGBEGIN_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// ACTION ACTION Action generated when the element is activated.
    /// Affects each element differently.
    /// Callback int function(Ihandle *ih); [in C] ih:action() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// In some elements, this callback may receive more parameters, apart from ih.
    /// Please refer to each element's documentation.
    /// Affects IupButton, IupItem, IupList, IupText, IupCanvas, IupMultiline,
    /// IupToggle
    pub fn setActionCallback(self: *Self, callback: ?*const OnActionFn) void {
        const Handler = CallbackHandler(Self, OnActionFn, "ACTION");
        Handler.setCallback(self, callback);
    }

    ///
    /// MOTION_CB MOTION_CB Action generated when the mouse moves.
    /// Callback int function(Ihandle *ih, int x, int y, char *status); [in C]
    /// ih:motion_cb(x, y: number, status: string) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of mouse buttons and certain keyboard keys at the moment the
    /// event was generated.
    /// The same macros used for BUTTON_CB can be used for this status.
    /// Notes Between press and release all mouse events are redirected only to
    /// this control, even if the cursor moves outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupGLCanvas
    pub fn setMotionCallback(self: *Self, callback: ?*const OnMotionFn) void {
        const Handler = CallbackHandler(Self, OnMotionFn, "MOTION_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setMapCallback(self: *Self, callback: ?*const OnMapFn) void {
        const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also LEAVEWINDOW_CB
    pub fn setEnterWindowCallback(self: *Self, callback: ?*const OnEnterWindowFn) void {
        const Handler = CallbackHandler(Self, OnEnterWindowFn, "ENTERWINDOW_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
    /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Notes If the dialog is visible then it is hidden before it is destroyed.
    /// The callback will be called right after it is hidden.
    /// The callback will be called before all other destroy procedures.
    /// For instance, if the element has children then it is called before the
    /// children are destroyed.
    /// For language binding implementations use the callback name "LDESTROY_CB" to
    /// release memory allocated by the binding for the element.
    /// Also the callback will be called before the language callback.
    /// Affects All.
    pub fn setDestroyCallback(self: *Self, callback: ?*const OnDestroyFn) void {
        const Handler = CallbackHandler(Self, OnDestroyFn, "DESTROY_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDropDataCallback(self: *Self, callback: ?*const OnDropDataFn) void {
        const Handler = CallbackHandler(Self, OnDropDataFn, "DROPDATA_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
    /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Affects All elements with user interaction, except menus.
    /// In Windows, there are restrictions when using this callback.
    /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
    /// function calls that display or activate a window.
    /// This causes the thread to yield control and can cause the application to
    /// stop responding to messages.
    /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
    pub fn setKillFocusCallback(self: *Self, callback: ?*const OnKillFocusFn) void {
        const Handler = CallbackHandler(Self, OnKillFocusFn, "KILLFOCUS_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragDataCallback(self: *Self, callback: ?*const OnDragDataFn) void {
        const Handler = CallbackHandler(Self, OnDragDataFn, "DRAGDATA_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragDataSizeCallback(self: *Self, callback: ?*const OnDragDataSizeFn) void {
        const Handler = CallbackHandler(Self, OnDragDataSizeFn, "DRAGDATASIZE_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// DROPFILES_CB DROPFILES_CB Action called when a file is "dropped" into the control.
    /// When several files are dropped at once, the callback is called several
    /// times, once for each file.
    /// If defined after the element is mapped then the attribute DROPFILESTARGET
    /// must be set to YES.
    /// [Windows and GTK Only] (GTK 2.6) Callback int function(Ihandle *ih, const
    /// char* filename, int num, int x, int y); [in C] ih:dropfiles_cb(filename:
    /// string; num, x, y: number) -> (ret: number) [in Lua] ih: identifier of the
    /// element that activated the event.
    /// filename: Name of the dropped file.
    /// num: Number index of the dropped file.
    /// If several files are dropped, num is the index of the dropped file starting
    /// from "total-1" to "0".
    /// x: X coordinate of the point where the user released the mouse button.
    /// y: Y coordinate of the point where the user released the mouse button.
    /// Returns: If IUP_IGNORE is returned the callback will NOT be called for the
    /// next dropped files, and the processing of dropped files will be interrupted.
    /// Affects IupDialog, IupCanvas, IupGLCanvas, IupText, IupList
    pub fn setDropFilesCallback(self: *Self, callback: ?*const OnDropFilesFn) void {
        const Handler = CallbackHandler(Self, OnDropFilesFn, "DROPFILES_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setUnmapCallback(self: *Self, callback: ?*const OnUnmapFn) void {
        const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// CARET_CB: Action generated when the caret/cursor position is changed.
    /// int function(Ihandle *ih, int lin, int col, int pos); [in
    /// C]ih:caret_cb(lin, col, pos: number) -> (ret: number) [in Lua]
    pub fn setCaretCallback(self: *Self, callback: ?*const OnCaretFn) void {
        const Handler = CallbackHandler(Self, OnCaretFn, "CARET_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
    /// This callback is called after the KILLFOCUS_CB of the element that loosed
    /// the focus.
    /// The IupGetFocus function during the callback returns the element that
    /// loosed the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that received keyboard focus.
    /// Affects All elements with user interaction, except menus.
    /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
    pub fn setGetFocusCallback(self: *Self, callback: ?*const OnGetFocusFn) void {
        const Handler = CallbackHandler(Self, OnGetFocusFn, "GETFOCUS_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// BUTTON_CB BUTTON_CB Action generated when a mouse button is pressed or released.
    /// Callback int function(Ihandle* ih, int button, int pressed, int x, int y,
    /// char* status); [in C] ih:button_cb(button, pressed, x, y: number, status:
    /// string) -> (ret: number) [in Lua] ih: identifies the element that activated
    /// the event.
    /// button: identifies the activated mouse button: IUP_BUTTON1 - left mouse
    /// button (button 1); IUP_BUTTON2 - middle mouse button (button 2);
    /// IUP_BUTTON3 - right mouse button (button 3).
    /// pressed: indicates the state of the button: 0 - mouse button was released;
    /// 1 - mouse button was pressed.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of the mouse buttons and some keyboard keys at the moment
    /// the event is generated.
    /// The following macros must be used for verification: iup_isshift(status)
    /// iup_iscontrol(status) iup_isbutton1(status) iup_isbutton2(status)
    /// iup_isbutton3(status) iup_isbutton4(status) iup_isbutton5(status)
    /// iup_isdouble(status) iup_isalt(status) iup_issys(status) They return 1 if
    /// the respective key or button is pressed, and 0 otherwise.
    /// These macros are also available in Lua, returning a boolean.
    /// Returns: IUP_CLOSE will be processed.
    /// On some controls if IUP_IGNORE is returned the action is ignored (this is
    /// system dependent).
    /// Notes This callback can be used to customize a button behavior.
    /// For a standard button behavior use the ACTION callback of the IupButton.
    /// For a single click the callback is called twice, one for pressed=1 and one
    /// for pressed=0.
    /// Only after both calls the ACTION callback is called.
    /// In Windows, if a dialog is shown or popup in any situation there could be
    /// unpredictable results because the native system still has processing to be
    /// done even after the callback is called.
    /// A double click is preceded by two single clicks, one for pressed=1 and one
    /// for pressed=0, and followed by a press=0, all three without the double
    /// click flag set.
    /// In GTK, it is preceded by an additional two single clicks sequence.
    /// For example, for one double click all the following calls are made:
    /// BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) BUTTON_CB(but=1 (0), x=154, y=83 [
    /// 1 ]) BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1
    /// (0), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1 (1), x=154, y=83 [ 1
    /// D ]) BUTTON_CB(but=1 (0), x=154, y=83 [ 1 ]) Between press and release all
    /// mouse events are redirected only to this control, even if the cursor moves
    /// outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupButton, IupText, IupList, IupGLCanvas
    pub fn setButtonCallback(self: *Self, callback: ?*const OnButtonFn) void {
        const Handler = CallbackHandler(Self, OnButtonFn, "BUTTON_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// VALUECHANGED_CB: Called after the value was interactively changed by the user.
    /// (since 3.0) int function(Ihandle *ih); [in C]ih:valuechanged_cb() -> (ret:
    /// number) [in Lua]
    pub fn setValueChangedCallback(self: *Self, callback: ?*const OnValueChangedFn) void {
        const Handler = CallbackHandler(Self, OnValueChangedFn, "VALUECHANGED_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// SPIN_CB: Action generated when a spin button is pressed.
    /// Valid only when SPIN=YES.
    /// When this callback is called the ACTION callback is not called.
    /// The VALUE attribute can be changed during this callback only if SPINAUTO=NO.
    /// (since 3.0) int function(Ihandle *ih, int pos); [in C]ih:spin_cb(pos:
    /// number) -> (ret: number) [in Lua]
    pub fn setSpinCallback(self: *Self, callback: ?*const OnSpinFn) void {
        const Handler = CallbackHandler(Self, OnSpinFn, "SPIN_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setLDestroyCallback(self: *Self, callback: ?*const OnLDestroyFn) void {
        const Handler = CallbackHandler(Self, OnLDestroyFn, "LDESTROY_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also ENTERWINDOW_CB
    pub fn setLeaveWindowCallback(self: *Self, callback: ?*const OnLeaveWindowFn) void {
        const Handler = CallbackHandler(Self, OnLeaveWindowFn, "LEAVEWINDOW_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setPostMessageCallback(self: *Self, callback: ?*const OnPostMessageFn) void {
        const Handler = CallbackHandler(Self, OnPostMessageFn, "POSTMESSAGE_CB");
        Handler.setCallback(self, callback);
    }
};

test "Text FgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setFgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getFgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "Text HandleName" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setHandleName("Hello").unwrap());
    defer item.deinit();

    var ret = item.getHandleName();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Text TipBgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setTipBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTipBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "Text Caret" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setCaret(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getCaret();

    try std.testing.expect(ret.lin == 9 and ret.col == 10);
}

test "Text MaskDecimalSymbol" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setMaskDecimalSymbol("Hello").unwrap());
    defer item.deinit();

    var ret = item.getMaskDecimalSymbol();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Text TipIcon" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setTipIcon("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTipIcon();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Text Overwrite" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setOverwrite(true).unwrap());
    defer item.deinit();

    var ret = item.getOverwrite();

    try std.testing.expect(ret == true);
}

test "Text SpinInc" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setSpinInc(42).unwrap());
    defer item.deinit();

    var ret = item.getSpinInc();

    try std.testing.expect(ret == 42);
}

test "Text MaxSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setMaxSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMaxSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Text Position" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setPosition(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getPosition();

    try std.testing.expect(ret.x == 9 and ret.y == 10);
}

test "Text AppendNewLine" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setAppendNewLine(true).unwrap());
    defer item.deinit();

    var ret = item.getAppendNewLine();

    try std.testing.expect(ret == true);
}

test "Text DropFilesTarget" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setDropFilesTarget(true).unwrap());
    defer item.deinit();

    var ret = item.getDropFilesTarget();

    try std.testing.expect(ret == true);
}

test "Text Tip" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setTip("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTip();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Text DragSourceMove" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setDragSourceMove(true).unwrap());
    defer item.deinit();

    var ret = item.getDragSourceMove();

    try std.testing.expect(ret == true);
}

test "Text AddFormatTag" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setAddFormatTag("Hello").unwrap());
    defer item.deinit();

    var ret = item.getAddFormatTag();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Text Visible" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setVisible(true).unwrap());
    defer item.deinit();

    var ret = item.getVisible();

    try std.testing.expect(ret == true);
}

test "Text Nc" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setNc(42).unwrap());
    defer item.deinit();

    var ret = item.getNc();

    try std.testing.expect(ret == 42);
}

test "Text DragDrop" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setDragDrop(true).unwrap());
    defer item.deinit();

    var ret = item.getDragDrop();

    try std.testing.expect(ret == true);
}

test "Text Theme" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setTheme("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTheme();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Text MaskReal" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setMaskReal(.Signed).unwrap());
    defer item.deinit();

    var ret = item.getMaskReal();

    try std.testing.expect(ret != null and ret.? == .Signed);
}

test "Text Expand" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setExpand(.Yes).unwrap());
    defer item.deinit();

    var ret = item.getExpand();

    try std.testing.expect(ret != null and ret.? == .Yes);
}

test "Text VisibleLines" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setVisibleLines(42).unwrap());
    defer item.deinit();

    var ret = item.getVisibleLines();

    try std.testing.expect(ret == 42);
}

test "Text Size" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Text Padding" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setPadding(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getPadding();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Text SpinMin" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setSpinMin(42).unwrap());
    defer item.deinit();

    var ret = item.getSpinMin();

    try std.testing.expect(ret == 42);
}

test "Text TipMarkup" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setTipMarkup("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTipMarkup();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Text FontSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setFontSize(42).unwrap());
    defer item.deinit();

    var ret = item.getFontSize();

    try std.testing.expect(ret == 42);
}

test "Text DropTypes" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setDropTypes("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDropTypes();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Text UserSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setUserSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getUserSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Text TipDelay" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setTipDelay(42).unwrap());
    defer item.deinit();

    var ret = item.getTipDelay();

    try std.testing.expect(ret == 42);
}

test "Text TabsIZe" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setTabsIZe(42).unwrap());
    defer item.deinit();

    var ret = item.getTabsIZe();

    try std.testing.expect(ret == 42);
}

test "Text PropagateFocus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setPropagateFocus(true).unwrap());
    defer item.deinit();

    var ret = item.getPropagateFocus();

    try std.testing.expect(ret == true);
}

test "Text BgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "Text DropTarget" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setDropTarget(true).unwrap());
    defer item.deinit();

    var ret = item.getDropTarget();

    try std.testing.expect(ret == true);
}

test "Text DragSource" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setDragSource(true).unwrap());
    defer item.deinit();

    var ret = item.getDragSource();

    try std.testing.expect(ret == true);
}

test "Text Floating" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setFloating(.Yes).unwrap());
    defer item.deinit();

    var ret = item.getFloating();

    try std.testing.expect(ret != null and ret.? == .Yes);
}

test "Text NormalizerGroup" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setNormalizerGroup("Hello").unwrap());
    defer item.deinit();

    var ret = item.getNormalizerGroup();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Text RasterSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setRasterSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getRasterSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Text Formatting" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setFormatting(true).unwrap());
    defer item.deinit();

    var ret = item.getFormatting();

    try std.testing.expect(ret == true);
}

test "Text TipFgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setTipFgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTipFgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "Text SpinWrap" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setSpinWrap(true).unwrap());
    defer item.deinit();

    var ret = item.getSpinWrap();

    try std.testing.expect(ret == true);
}

test "Text FontFace" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setFontFace("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFontFace();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Text VisibleColumns" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setVisibleColumns(42).unwrap());
    defer item.deinit();

    var ret = item.getVisibleColumns();

    try std.testing.expect(ret == 42);
}

test "Text MaskInt" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setMaskInt(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMaskInt();

    try std.testing.expect(ret.begin == 9 and ret.end == 10);
}

test "Text SpinAlign" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setSpinAlign(.Left).unwrap());
    defer item.deinit();

    var ret = item.getSpinAlign();

    try std.testing.expect(ret != null and ret.? == .Left);
}

test "Text Name" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setName("Hello").unwrap());
    defer item.deinit();

    var ret = item.getName();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Text MaskCasei" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setMaskCasei(true).unwrap());
    defer item.deinit();

    var ret = item.getMaskCasei();

    try std.testing.expect(ret == true);
}

test "Text SelectionPos" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setSelectionPos(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getSelectionPos();

    try std.testing.expect(ret.begin == 9 and ret.end == 10);
}

test "Text Value" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setValue("Hello").unwrap());
    defer item.deinit();

    var ret = item.getValue();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Text Filter" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setFilter(.LowerCase).unwrap());
    defer item.deinit();

    var ret = item.getFilter();

    try std.testing.expect(ret != null and ret.? == .LowerCase);
}

test "Text SpinMax" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setSpinMax(42).unwrap());
    defer item.deinit();

    var ret = item.getSpinMax();

    try std.testing.expect(ret == 42);
}

test "Text Multiline" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setMultiline(true).unwrap());
    defer item.deinit();

    var ret = item.getMultiline();

    try std.testing.expect(ret == true);
}

test "Text SelectedText" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setSelectedText("Hello").unwrap());
    defer item.deinit();

    var ret = item.getSelectedText();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Text CPadding" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setCPadding(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getCPadding();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Text Active" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setActive(true).unwrap());
    defer item.deinit();

    var ret = item.getActive();

    try std.testing.expect(ret == true);
}

test "Text TipVisible" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setTipVisible(true).unwrap());
    defer item.deinit();

    var ret = item.getTipVisible();

    try std.testing.expect(ret == true);
}

test "Text CueBanner" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setCueBanner("Hello").unwrap());
    defer item.deinit();

    var ret = item.getCueBanner();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Text ExpandWeight" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setExpandWeight(3.14).unwrap());
    defer item.deinit();

    var ret = item.getExpandWeight();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "Text MinSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setMinSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMinSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Text NTheme" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setNTheme("Hello").unwrap());
    defer item.deinit();

    var ret = item.getNTheme();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Text CaretPos" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setCaretPos(42).unwrap());
    defer item.deinit();

    var ret = item.getCaretPos();

    try std.testing.expect(ret == 42);
}

test "Text SpinAuto" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setSpinAuto(true).unwrap());
    defer item.deinit();

    var ret = item.getSpinAuto();

    try std.testing.expect(ret == true);
}

test "Text Mask" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setMask("Hello").unwrap());
    defer item.deinit();

    var ret = item.getMask();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Text DragTypes" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setDragTypes("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDragTypes();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Text AutoHide" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setAutoHide(true).unwrap());
    defer item.deinit();

    var ret = item.getAutoHide();

    try std.testing.expect(ret == true);
}

test "Text FontStyle" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setFontStyle("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFontStyle();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Text Clipboard" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setClipboard(.Copy).unwrap());
    defer item.deinit();

    var ret = item.getClipboard();

    try std.testing.expect(ret != null and ret.? == .Copy);
}

test "Text Readonly" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setReadonly(true).unwrap());
    defer item.deinit();

    var ret = item.getReadonly();

    try std.testing.expect(ret == true);
}

test "Text MaskNoEmpty" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setMaskNoEmpty(true).unwrap());
    defer item.deinit();

    var ret = item.getMaskNoEmpty();

    try std.testing.expect(ret == true);
}

test "Text Font" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Text.init().setFont("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFont();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}
