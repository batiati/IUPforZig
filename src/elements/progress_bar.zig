// This code was generated by a tool.
// IUP Metadata Code Generator
// https://github.com/batiati/IUPMetadata
//
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.

const std = @import("std");

const c = @import("../c.zig");
const iup = @import("../iup.zig");

const Impl = @import("../impl.zig").Impl;
const CallbackHandler = @import("../callback_handler.zig").CallbackHandler;

const debug = std.debug;
const trait = std.meta.trait;

const Element = iup.Element;
const Handle = iup.Handle;
const Error = iup.Error;
const ChildrenIterator = iup.ChildrenIterator;
const Size = iup.Size;
const Margin = iup.Margin;

/// 
/// Creates a progress bar control.
/// Shows a percent value that can be updated to simulate a progression.
/// It is similar of IupGauge, but uses native controls internally.
/// Also does not have support for text inside the bar.
pub const ProgressBar = opaque {
    pub const CLASS_NAME = "progressbar";
    const Self = @This();

    pub const OnTouchFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: i32, arg3: [:0]const u8) anyerror!void;

    pub const OnMultiTouchFn = fn (self: *Self, arg0: i32, arg1: *i32, arg2: *i32, arg3: *i32) anyerror!void;

    /// 
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnMapFn = fn (self: *Self) anyerror!void;

    /// 
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnUnmapFn = fn (self: *Self) anyerror!void;

    pub const ZOrder = enum {
        Top,
        Bottom,
    };

    pub const Expand = enum {
        Yes,
        Horizontal,
        Vertical,
        HorizontalFree,
        VerticalFree,
        No,
    };
    /// 
    /// ORIENTATION (creation only): can be "VERTICAL" or "HORIZONTAL".
    /// Default: "HORIZONTAL".
    /// Horizontal goes from left to right, and vertical from bottom to top.
    pub const Orientation = enum {
        Horizontal,
        Vertical,
    };

    pub const Floating = enum {
        Yes,
        Ignore,
        No,
    };

    pub const Initializer = struct {
        last_error: ?anyerror = null,
        ref: *Self,

        ///
        /// Returns a pointer to IUP element or an error.
        /// Only top-level or detached elements needs to be unwraped,
        pub fn unwrap(self: Initializer) !*Self {
            if (self.last_error) |e| {
                return e;
            } else {
                return self.ref;
            }
        }

        ///
        /// Captures a reference into a external variable
        /// Allows to capture some references even using full declarative API
        pub fn capture(self: *Initializer, ref: **Self) Initializer {
            ref.* = self.ref;
            return self.*;
        }

        pub fn setStrAttribute(self: *Initializer, attributeName: [:0]const u8, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setStrAttribute(self.ref, attributeName, arg);
            return self.*;
        }

        pub fn setIntAttribute(self: *Initializer, attributeName: [:0]const u8, arg: i32) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setIntAttribute(self.ref, attributeName, arg);
            return self.*;
        }

        pub fn setBoolAttribute(self: *Initializer, attributeName: [:0]const u8, arg: bool) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setBoolAttribute(self.ref, attributeName, bool);
            return self.*;
        }

        pub fn setPtrAttribute(self: *Initializer, comptime T: type, attributeName: [:0]const u8, value: ?*T) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setPtrAttribute(self.ref, T, attributeName, value);
            return self.*;
        }


        /// 
        /// FGCOLOR [Windows Classic and Motif only]: Controls the bar color.
        /// Default: the global attribute DLGFGCOLOR.
        pub fn setFgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "FGCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setTipBalloon(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TIPBALLOON", void, void, arg);
            return self.*;
        }

        pub fn setHandleName(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "HANDLENAME", void, void, arg);
            return self.*;
        }

        pub fn setTipBgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "TIPBGCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setMaxSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "MAXSIZE", void, void, value);
            return self.*;
        }

        pub fn setPosition(self: *Initializer, x: i32, y: i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
            c.setStrAttribute(self.ref, "POSITION", void, void, value);
            return self.*;
        }

        pub fn setTip(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "TIP", void, void, arg);
            return self.*;
        }

        pub fn setCanFocus(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "CANFOCUS", void, void, arg);
            return self.*;
        }

        pub fn setVisible(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "VISIBLE", void, void, arg);
            return self.*;
        }

        pub fn zOrder(self: *Initializer, arg: ?ZOrder) Initializer {
            if (arg) |value| switch (value) {
                .Top => c.setStrAttribute(self.ref, "ZORDER", void, void, "TOP"),
                .Bottom => c.setStrAttribute(self.ref, "ZORDER", void, void, "BOTTOM"),
            } else {
                c.clearAttribute(self.ref, "ZORDER", void, void);
            }
            return self.*;
        }

        pub fn setTheme(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "THEME", void, void, arg);
            return self.*;
        }

        pub fn setExpand(self: *Initializer, arg: ?Expand) Initializer {
            if (arg) |value| switch (value) {
                .Yes => c.setStrAttribute(self.ref, "EXPAND", void, void, "YES"),
                .Horizontal => c.setStrAttribute(self.ref, "EXPAND", void, void, "HORIZONTAL"),
                .Vertical => c.setStrAttribute(self.ref, "EXPAND", void, void, "VERTICAL"),
                .HorizontalFree => c.setStrAttribute(self.ref, "EXPAND", void, void, "HORIZONTALFREE"),
                .VerticalFree => c.setStrAttribute(self.ref, "EXPAND", void, void, "VERTICALFREE"),
                .No => c.setStrAttribute(self.ref, "EXPAND", void, void, "NO"),
            } else {
                c.clearAttribute(self.ref, "EXPAND", void, void);
            }
            return self.*;
        }

        pub fn setSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "SIZE", void, void, value);
            return self.*;
        }


        /// 
        /// ORIENTATION (creation only): can be "VERTICAL" or "HORIZONTAL".
        /// Default: "HORIZONTAL".
        /// Horizontal goes from left to right, and vertical from bottom to top.
        pub fn setOrientation(self: *Initializer, arg: ?Orientation) Initializer {
            if (arg) |value| switch (value) {
                .Horizontal => c.setStrAttribute(self.ref, "ORIENTATION", void, void, "HORIZONTAL"),
                .Vertical => c.setStrAttribute(self.ref, "ORIENTATION", void, void, "VERTICAL"),
            } else {
                c.clearAttribute(self.ref, "ORIENTATION", void, void);
            }
            return self.*;
        }

        pub fn setFontSize(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "FONTSIZE", void, void, arg);
            return self.*;
        }


        /// 
        /// MIN (non inheritable): Contains the minimum value.
        /// Default is "0".
        /// The control display is not updated, must set VALUE attribute to update.
        pub fn setMin(self: *Initializer, arg: f64) Initializer {
            c.setDoubleAttribute(self.ref, "MIN", void, void, arg);
            return self.*;
        }

        pub fn setUserSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "USERSIZE", void, void, value);
            return self.*;
        }

        pub fn setTipDelay(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "TIPDELAY", void, void, arg);
            return self.*;
        }

        pub fn setPropagateFocus(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "PROPAGATEFOCUS", void, void, arg);
            return self.*;
        }


        /// 
        /// BGCOLOR [Windows Classic and Motif only]: controls the background color.
        /// Default: the global attribute DLGBGCOLOR.
        pub fn setBgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "BGCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setTipBalloonTitle(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "TIPBALLOONTITLE", void, void, arg);
            return self.*;
        }

        pub fn setFloating(self: *Initializer, arg: ?Floating) Initializer {
            if (arg) |value| switch (value) {
                .Yes => c.setStrAttribute(self.ref, "FLOATING", void, void, "YES"),
                .Ignore => c.setStrAttribute(self.ref, "FLOATING", void, void, "IGNORE"),
                .No => c.setStrAttribute(self.ref, "FLOATING", void, void, "NO"),
            } else {
                c.clearAttribute(self.ref, "FLOATING", void, void);
            }
            return self.*;
        }

        pub fn setNormalizerGroup(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "NORMALIZERGROUP", void, void, arg);
            return self.*;
        }


        /// 
        /// RASTERSIZE: The initial size is defined as "200x30".
        /// Set to NULL to allow the use of smaller values in the layout computation.
        pub fn setRasterSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "RASTERSIZE", void, void, value);
            return self.*;
        }

        pub fn setTipFgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "TIPFGCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setControlId(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "CONTROLID", void, void, arg);
            return self.*;
        }

        pub fn setFontFace(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FONTFACE", void, void, arg);
            return self.*;
        }

        pub fn setName(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "NAME", void, void, arg);
            return self.*;
        }

        pub fn setTipBalloonTitleIcon(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TIPBALLOONTITLEICON", void, void, arg);
            return self.*;
        }


        /// 
        /// VALUE (non inheritable): Contains a number between "MIN" and "MAX",
        /// controlling the current position.
        pub fn setValue(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "VALUE", void, void, arg);
            return self.*;
        }


        /// 
        /// ACTIVE, EXPAND, FONT, SCREENPOSITION, POSITION, MINSIZE, MAXSIZE, WID, TIP,
        /// SIZE, ZORDER, VISIBLE, THEME: also accepted.
        pub fn setActive(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "ACTIVE", void, void, arg);
            return self.*;
        }

        pub fn setTipVisible(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TIPVISIBLE", void, void, arg);
            return self.*;
        }

        pub fn setExpandWeight(self: *Initializer, arg: f64) Initializer {
            c.setDoubleAttribute(self.ref, "EXPANDWEIGHT", void, void, arg);
            return self.*;
        }

        pub fn setMinSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "MINSIZE", void, void, value);
            return self.*;
        }


        /// 
        /// MAX (non inheritable): Contains the maximum value.
        /// Default is "1".
        /// The control display is not updated, must set VALUE attribute to update.
        pub fn setMax(self: *Initializer, arg: f64) Initializer {
            c.setDoubleAttribute(self.ref, "MAX", void, void, arg);
            return self.*;
        }

        pub fn setNTheme(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "NTHEME", void, void, arg);
            return self.*;
        }

        pub fn setFontStyle(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FONTSTYLE", void, void, arg);
            return self.*;
        }

        pub fn setTouch(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TOUCH", void, void, arg);
            return self.*;
        }

        pub fn setFont(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FONT", void, void, arg);
            return self.*;
        }

        pub fn setTouchCallback(self: *Initializer, callback: ?OnTouchFn) Initializer {
            const Handler = CallbackHandler(Self, OnTouchFn, "TOUCH_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setMultiTouchCallback(self: *Initializer, callback: ?OnMultiTouchFn) Initializer {
            const Handler = CallbackHandler(Self, OnMultiTouchFn, "MULTITOUCH_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
        /// updated in IupMap.
        /// When the element is a dialog, it is called after the layout is updated.
        /// For all other elements is called before the layout is updated, so the
        /// element current size will still be 0x0 during MAP_CB (since 3.14).
        /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
        /// Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setMapCallback(self: *Initializer, callback: ?OnMapFn) Initializer {
            const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
        /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setUnmapCallback(self: *Initializer, callback: ?OnUnmapFn) Initializer {
            const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }
    };

    ///
    /// Creates an interface element given its class name and parameters.
    /// After creation the element still needs to be attached to a container and mapped to the native system so it can be visible.
    pub fn init() Initializer {
        var handle = c.IupCreate(Self.CLASS_NAME);

        if (handle) |valid| {
            return .{
                .ref = @ptrCast(*Self, valid),
            };
        } else {
            return .{ .ref = undefined, .last_error = Error.NotInitialized };
        }
    }

    /// 
    /// Destroys an interface element and all its children.
    /// Only dialogs, timers, popup menus and images should be normally destroyed, but detached elements can also be destroyed.        
    pub fn deinit(self: *Self) void {
        c.IupDestroy(c.getHandle(self));
    }

    pub fn setStrAttribute(self: *Self, attributeName: [:0]const u8, arg: [:0]const u8) void {
        c.setStrAttribute(self, attributeName, void, void, arg);
    }

    pub fn getStrAttribute(self: *Self, attributeName: [:0]const u8) [:0]const u8 {
        return c.getStrAttribute(self, attributeName, void, void);
    }

    pub fn setIntAttribute(self: *Self, attributeName: [:0]const u8, arg: i32) void {
        c.setIntAttribute(self, attributeName, void, void, arg);
    }

    pub fn getIntAttribute(self: *Self, attributeName: [:0]const u8) i32 {
        return c.getIntAttribute(self, attributeName, void, void);
    }

    pub fn setBoolAttribute(self: *Self, attributeName: [:0]const u8, arg: bool) void {
        c.setBoolAttribute(self, attributeName, void, void, arg);
    }

    pub fn getBoolAttribute(self: *Self, attributeName: [:0]const u8) bool {
        return c.getBoolAttribute(self, attributeName, void, void);
    }

    pub fn getPtrAttribute(handle: *Self, comptime T: type, attributeName: [:0]const u8) ?*T {
        return c.getPtrAttribute(T, handle, attributeName, void, void);
    }

    pub fn setPtrAttribute(handle: *Self, comptime T: type, attributeName: [:0]const u8, value: ?*T) void {
        c.setPtrAttribute(T, handle, attributeName, void, void, value);
    }

    ///
    ///
    pub fn getDialog(self: *Self) ?*iup.Dialog {
        if (c.IupGetDialog(c.getHandle(self))) |handle| {
            return c.fromHandle(iup.Dialog, handle);
        } else {
            return null;
        }
    }

    ///
    /// Returns the the child element that has the NAME attribute equals to the given value on the same dialog hierarchy.
    /// Works also for children of a menu that is associated with a dialog.
    pub fn getDialogChild(self: *Self, byName: [:0]const u8) ?Element {
        var child = c.IupGetDialogChild(c.getHandle(self), c.toCStr(byName)) orelse return null;
        var className = c.fromCStr(c.IupGetClassName(child));

        return Element.fromClassName(className, child);
    }

    ///
    /// Updates the size and layout of all controls in the same dialog.
    /// To be used after changing size attributes, or attributes that affect the size of the control. Can be used for any element inside a dialog, but the layout of the dialog and all controls will be updated. It can change the layout of all the controls inside the dialog because of the dynamic layout positioning.
    pub fn refresh(self: *Self) void {
        try Impl(Self).refresh(self);
    }


    /// 
    /// FGCOLOR [Windows Classic and Motif only]: Controls the bar color.
    /// Default: the global attribute DLGFGCOLOR.
    pub fn getFgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "FGCOLOR", void, void);
    }


    /// 
    /// FGCOLOR [Windows Classic and Motif only]: Controls the bar color.
    /// Default: the global attribute DLGFGCOLOR.
    pub fn setFgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "FGCOLOR", void, void, rgb);
    }

    pub fn getTipBalloon(self: *Self) bool {
        return c.getBoolAttribute(self, "TIPBALLOON", void, void);
    }

    pub fn setTipBalloon(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TIPBALLOON", void, void, arg);
    }

    pub fn getHandleName(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "HANDLENAME", void, void);
    }

    pub fn setHandleName(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "HANDLENAME", void, void, arg);
    }

    pub fn getTipBgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "TIPBGCOLOR", void, void);
    }

    pub fn setTipBgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "TIPBGCOLOR", void, void, rgb);
    }

    pub fn getMaxSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "MAXSIZE", void, void);
        return Size.parse(str);
    }

    pub fn setMaxSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "MAXSIZE", void, void, value);
    }

    pub fn getScreenPosition(self: *Self) iup.XYPos {
        var str = c.getStrAttribute(self, "SCREENPOSITION", void, void);
        return iup.XYPos.parse(str, ',');
    }

    pub fn getPosition(self: *Self) iup.XYPos {
        var str = c.getStrAttribute(self, "POSITION", void, void);
        return iup.XYPos.parse(str, ',');
    }

    pub fn setPosition(self: *Self, x: i32, y: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
        c.setStrAttribute(self, "POSITION", void, void, value);
    }

    pub fn getTip(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "TIP", void, void);
    }

    pub fn setTip(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "TIP", void, void, arg);
    }

    pub fn getCanFocus(self: *Self) bool {
        return c.getBoolAttribute(self, "CANFOCUS", void, void);
    }

    pub fn setCanFocus(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "CANFOCUS", void, void, arg);
    }

    pub fn getVisible(self: *Self) bool {
        return c.getBoolAttribute(self, "VISIBLE", void, void);
    }

    pub fn setVisible(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "VISIBLE", void, void, arg);
    }

    pub fn zOrder(self: *Self, arg: ?ZOrder) void {
        if (arg) |value| switch (value) {
            .Top => c.setStrAttribute(self, "ZORDER", void, void, "TOP"),
            .Bottom => c.setStrAttribute(self, "ZORDER", void, void, "BOTTOM"),
        } else {
            c.clearAttribute(self, "ZORDER", void, void);
        }
    }

    pub fn getX(self: *Self) i32 {
        return c.getIntAttribute(self, "X", void, void);
    }

    pub fn getY(self: *Self) i32 {
        return c.getIntAttribute(self, "Y", void, void);
    }

    pub fn getTheme(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "THEME", void, void);
    }

    pub fn setTheme(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "THEME", void, void, arg);
    }

    pub fn getExpand(self: *Self) ?Expand {
        var ret = c.getStrAttribute(self, "EXPAND", void, void);

        if (std.ascii.eqlIgnoreCase("YES", ret)) return .Yes;
        if (std.ascii.eqlIgnoreCase("HORIZONTAL", ret)) return .Horizontal;
        if (std.ascii.eqlIgnoreCase("VERTICAL", ret)) return .Vertical;
        if (std.ascii.eqlIgnoreCase("HORIZONTALFREE", ret)) return .HorizontalFree;
        if (std.ascii.eqlIgnoreCase("VERTICALFREE", ret)) return .VerticalFree;
        if (std.ascii.eqlIgnoreCase("NO", ret)) return .No;
        return null;
    }

    pub fn setExpand(self: *Self, arg: ?Expand) void {
        if (arg) |value| switch (value) {
            .Yes => c.setStrAttribute(self, "EXPAND", void, void, "YES"),
            .Horizontal => c.setStrAttribute(self, "EXPAND", void, void, "HORIZONTAL"),
            .Vertical => c.setStrAttribute(self, "EXPAND", void, void, "VERTICAL"),
            .HorizontalFree => c.setStrAttribute(self, "EXPAND", void, void, "HORIZONTALFREE"),
            .VerticalFree => c.setStrAttribute(self, "EXPAND", void, void, "VERTICALFREE"),
            .No => c.setStrAttribute(self, "EXPAND", void, void, "NO"),
        } else {
            c.clearAttribute(self, "EXPAND", void, void);
        }
    }

    pub fn getSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "SIZE", void, void);
        return Size.parse(str);
    }

    pub fn setSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "SIZE", void, void, value);
    }

    pub fn getWId(self: *Self) i32 {
        return c.getIntAttribute(self, "WID", void, void);
    }

    pub fn getFontSize(self: *Self) i32 {
        return c.getIntAttribute(self, "FONTSIZE", void, void);
    }

    pub fn setFontSize(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "FONTSIZE", void, void, arg);
    }


    /// 
    /// MIN (non inheritable): Contains the minimum value.
    /// Default is "0".
    /// The control display is not updated, must set VALUE attribute to update.
    pub fn getMin(self: *Self) f64 {
        return c.getDoubleAttribute(self, "MIN", void, void);
    }


    /// 
    /// MIN (non inheritable): Contains the minimum value.
    /// Default is "0".
    /// The control display is not updated, must set VALUE attribute to update.
    pub fn setMin(self: *Self, arg: f64) void {
        c.setDoubleAttribute(self, "MIN", void, void, arg);
    }

    pub fn getNaturalSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "NATURALSIZE", void, void);
        return Size.parse(str);
    }

    pub fn getUserSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "USERSIZE", void, void);
        return Size.parse(str);
    }

    pub fn setUserSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "USERSIZE", void, void, value);
    }

    pub fn getTipDelay(self: *Self) i32 {
        return c.getIntAttribute(self, "TIPDELAY", void, void);
    }

    pub fn setTipDelay(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "TIPDELAY", void, void, arg);
    }

    pub fn getPropagateFocus(self: *Self) bool {
        return c.getBoolAttribute(self, "PROPAGATEFOCUS", void, void);
    }

    pub fn setPropagateFocus(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "PROPAGATEFOCUS", void, void, arg);
    }


    /// 
    /// BGCOLOR [Windows Classic and Motif only]: controls the background color.
    /// Default: the global attribute DLGBGCOLOR.
    pub fn getBgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "BGCOLOR", void, void);
    }


    /// 
    /// BGCOLOR [Windows Classic and Motif only]: controls the background color.
    /// Default: the global attribute DLGBGCOLOR.
    pub fn setBgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "BGCOLOR", void, void, rgb);
    }

    pub fn getTipBalloonTitle(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "TIPBALLOONTITLE", void, void);
    }

    pub fn setTipBalloonTitle(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "TIPBALLOONTITLE", void, void, arg);
    }

    pub fn getFloating(self: *Self) ?Floating {
        var ret = c.getStrAttribute(self, "FLOATING", void, void);

        if (std.ascii.eqlIgnoreCase("YES", ret)) return .Yes;
        if (std.ascii.eqlIgnoreCase("IGNORE", ret)) return .Ignore;
        if (std.ascii.eqlIgnoreCase("NO", ret)) return .No;
        return null;
    }

    pub fn setFloating(self: *Self, arg: ?Floating) void {
        if (arg) |value| switch (value) {
            .Yes => c.setStrAttribute(self, "FLOATING", void, void, "YES"),
            .Ignore => c.setStrAttribute(self, "FLOATING", void, void, "IGNORE"),
            .No => c.setStrAttribute(self, "FLOATING", void, void, "NO"),
        } else {
            c.clearAttribute(self, "FLOATING", void, void);
        }
    }

    pub fn getNormalizerGroup(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "NORMALIZERGROUP", void, void);
    }

    pub fn setNormalizerGroup(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "NORMALIZERGROUP", void, void, arg);
    }


    /// 
    /// RASTERSIZE: The initial size is defined as "200x30".
    /// Set to NULL to allow the use of smaller values in the layout computation.
    pub fn getRasterSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "RASTERSIZE", void, void);
        return Size.parse(str);
    }


    /// 
    /// RASTERSIZE: The initial size is defined as "200x30".
    /// Set to NULL to allow the use of smaller values in the layout computation.
    pub fn setRasterSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "RASTERSIZE", void, void, value);
    }

    pub fn getTipFgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "TIPFGCOLOR", void, void);
    }

    pub fn setTipFgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "TIPFGCOLOR", void, void, rgb);
    }

    pub fn getControlId(self: *Self) i32 {
        return c.getIntAttribute(self, "CONTROLID", void, void);
    }

    pub fn setControlId(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "CONTROLID", void, void, arg);
    }

    pub fn getFontFace(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FONTFACE", void, void);
    }

    pub fn setFontFace(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FONTFACE", void, void, arg);
    }

    pub fn getName(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "NAME", void, void);
    }

    pub fn setName(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "NAME", void, void, arg);
    }

    pub fn getTipBalloonTitleIcon(self: *Self) bool {
        return c.getBoolAttribute(self, "TIPBALLOONTITLEICON", void, void);
    }

    pub fn setTipBalloonTitleIcon(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TIPBALLOONTITLEICON", void, void, arg);
    }


    /// 
    /// VALUE (non inheritable): Contains a number between "MIN" and "MAX",
    /// controlling the current position.
    pub fn getValue(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "VALUE", void, void);
    }


    /// 
    /// VALUE (non inheritable): Contains a number between "MIN" and "MAX",
    /// controlling the current position.
    pub fn setValue(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "VALUE", void, void, arg);
    }


    /// 
    /// ACTIVE, EXPAND, FONT, SCREENPOSITION, POSITION, MINSIZE, MAXSIZE, WID, TIP,
    /// SIZE, ZORDER, VISIBLE, THEME: also accepted.
    pub fn getActive(self: *Self) bool {
        return c.getBoolAttribute(self, "ACTIVE", void, void);
    }


    /// 
    /// ACTIVE, EXPAND, FONT, SCREENPOSITION, POSITION, MINSIZE, MAXSIZE, WID, TIP,
    /// SIZE, ZORDER, VISIBLE, THEME: also accepted.
    pub fn setActive(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "ACTIVE", void, void, arg);
    }

    pub fn getTipVisible(self: *Self) bool {
        return c.getBoolAttribute(self, "TIPVISIBLE", void, void);
    }

    pub fn setTipVisible(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TIPVISIBLE", void, void, arg);
    }

    pub fn getExpandWeight(self: *Self) f64 {
        return c.getDoubleAttribute(self, "EXPANDWEIGHT", void, void);
    }

    pub fn setExpandWeight(self: *Self, arg: f64) void {
        c.setDoubleAttribute(self, "EXPANDWEIGHT", void, void, arg);
    }

    pub fn getMinSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "MINSIZE", void, void);
        return Size.parse(str);
    }

    pub fn setMinSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "MINSIZE", void, void, value);
    }


    /// 
    /// MAX (non inheritable): Contains the maximum value.
    /// Default is "1".
    /// The control display is not updated, must set VALUE attribute to update.
    pub fn getMax(self: *Self) f64 {
        return c.getDoubleAttribute(self, "MAX", void, void);
    }


    /// 
    /// MAX (non inheritable): Contains the maximum value.
    /// Default is "1".
    /// The control display is not updated, must set VALUE attribute to update.
    pub fn setMax(self: *Self, arg: f64) void {
        c.setDoubleAttribute(self, "MAX", void, void, arg);
    }

    pub fn getNTheme(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "NTHEME", void, void);
    }

    pub fn setNTheme(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "NTHEME", void, void, arg);
    }

    pub fn getCharSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "CHARSIZE", void, void);
        return Size.parse(str);
    }

    pub fn getFontStyle(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FONTSTYLE", void, void);
    }

    pub fn setFontStyle(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FONTSTYLE", void, void, arg);
    }

    pub fn getTouch(self: *Self) bool {
        return c.getBoolAttribute(self, "TOUCH", void, void);
    }

    pub fn setTouch(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TOUCH", void, void, arg);
    }

    pub fn getFont(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FONT", void, void);
    }

    pub fn setFont(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FONT", void, void, arg);
    }

    pub fn setTouchCallback(self: *Self, callback: ?OnTouchFn) void {
        const Handler = CallbackHandler(Self, OnTouchFn, "TOUCH_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setMultiTouchCallback(self: *Self, callback: ?OnMultiTouchFn) void {
        const Handler = CallbackHandler(Self, OnMultiTouchFn, "MULTITOUCH_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setMapCallback(self: *Self, callback: ?OnMapFn) void {
        const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setUnmapCallback(self: *Self, callback: ?OnUnmapFn) void {
        const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
        Handler.setCallback(self, callback);
    }
};

test "ProgressBar FgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setFgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getFgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "ProgressBar TipBalloon" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setTipBalloon(true).unwrap());
    defer item.deinit();

    var ret = item.getTipBalloon();

    try std.testing.expect(ret == true);
}

test "ProgressBar HandleName" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setHandleName("Hello").unwrap());
    defer item.deinit();

    var ret = item.getHandleName();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "ProgressBar TipBgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setTipBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTipBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "ProgressBar MaxSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setMaxSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMaxSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "ProgressBar Position" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setPosition(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getPosition();

    try std.testing.expect(ret.x == 9 and ret.y == 10);
}

test "ProgressBar Tip" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setTip("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTip();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "ProgressBar CanFocus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setCanFocus(true).unwrap());
    defer item.deinit();

    var ret = item.getCanFocus();

    try std.testing.expect(ret == true);
}

test "ProgressBar Visible" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setVisible(true).unwrap());
    defer item.deinit();

    var ret = item.getVisible();

    try std.testing.expect(ret == true);
}

test "ProgressBar Theme" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setTheme("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTheme();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "ProgressBar Expand" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setExpand(.Yes).unwrap());
    defer item.deinit();

    var ret = item.getExpand();

    try std.testing.expect(ret != null and ret.? == .Yes);
}

test "ProgressBar Size" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "ProgressBar FontSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setFontSize(42).unwrap());
    defer item.deinit();

    var ret = item.getFontSize();

    try std.testing.expect(ret == 42);
}

test "ProgressBar Min" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setMin(3.14).unwrap());
    defer item.deinit();

    var ret = item.getMin();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "ProgressBar UserSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setUserSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getUserSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "ProgressBar TipDelay" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setTipDelay(42).unwrap());
    defer item.deinit();

    var ret = item.getTipDelay();

    try std.testing.expect(ret == 42);
}

test "ProgressBar PropagateFocus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setPropagateFocus(true).unwrap());
    defer item.deinit();

    var ret = item.getPropagateFocus();

    try std.testing.expect(ret == true);
}

test "ProgressBar BgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "ProgressBar TipBalloonTitle" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setTipBalloonTitle("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTipBalloonTitle();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "ProgressBar Floating" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setFloating(.Yes).unwrap());
    defer item.deinit();

    var ret = item.getFloating();

    try std.testing.expect(ret != null and ret.? == .Yes);
}

test "ProgressBar NormalizerGroup" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setNormalizerGroup("Hello").unwrap());
    defer item.deinit();

    var ret = item.getNormalizerGroup();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "ProgressBar RasterSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setRasterSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getRasterSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "ProgressBar TipFgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setTipFgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTipFgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "ProgressBar ControlId" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setControlId(42).unwrap());
    defer item.deinit();

    var ret = item.getControlId();

    try std.testing.expect(ret == 42);
}

test "ProgressBar FontFace" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setFontFace("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFontFace();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "ProgressBar Name" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setName("Hello").unwrap());
    defer item.deinit();

    var ret = item.getName();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "ProgressBar TipBalloonTitleIcon" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setTipBalloonTitleIcon(true).unwrap());
    defer item.deinit();

    var ret = item.getTipBalloonTitleIcon();

    try std.testing.expect(ret == true);
}

test "ProgressBar Value" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setValue("Hello").unwrap());
    defer item.deinit();

    var ret = item.getValue();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "ProgressBar Active" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setActive(true).unwrap());
    defer item.deinit();

    var ret = item.getActive();

    try std.testing.expect(ret == true);
}

test "ProgressBar TipVisible" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setTipVisible(true).unwrap());
    defer item.deinit();

    var ret = item.getTipVisible();

    try std.testing.expect(ret == true);
}

test "ProgressBar ExpandWeight" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setExpandWeight(3.14).unwrap());
    defer item.deinit();

    var ret = item.getExpandWeight();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "ProgressBar MinSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setMinSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMinSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "ProgressBar Max" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setMax(3.14).unwrap());
    defer item.deinit();

    var ret = item.getMax();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "ProgressBar NTheme" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setNTheme("Hello").unwrap());
    defer item.deinit();

    var ret = item.getNTheme();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "ProgressBar FontStyle" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setFontStyle("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFontStyle();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "ProgressBar Touch" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setTouch(true).unwrap());
    defer item.deinit();

    var ret = item.getTouch();

    try std.testing.expect(ret == true);
}

test "ProgressBar Font" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.ProgressBar.init().setFont("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFont();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}
