// This code was generated by a tool.
// IUP Metadata Code Generator
// https://github.com/batiati/IUPMetadata
//
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.

const std = @import("std");

const c = @import("../c.zig");
const iup = @import("../iup.zig");

const Impl = @import("../impl.zig").Impl;
const CallbackHandler = @import("../callback_handler.zig").CallbackHandler;

const debug = std.debug;
const trait = std.meta.trait;

const Element = iup.Element;
const Handle = iup.Handle;
const Error = iup.Error;
const ChildrenIterator = iup.ChildrenIterator;
const Size = iup.Size;
const Margin = iup.Margin;

/// 
/// Creates an interface element that is a toggle, but it does not have native decorations.
/// When selected, this element activates a function in the application.
/// Its visual presentation can contain a text and/or an image.
/// It behaves just like an IupToggle, but since it is not a native control it
/// has more flexibility for additional options.
/// It inherits from IupCanvas.
pub const FlatToggle = opaque {
    pub const CLASS_NAME = "flattoggle";
    const Self = @This();

    pub const OnTouchFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: i32, arg3: [:0]const u8) anyerror!void;

    /// 
    /// SCROLL_CB SCROLL_CB Called when some manipulation is made to the scrollbar.
    /// The canvas is automatically redrawn only if this callback is NOT defined.
    /// (GTK 2.8) Also the POSX and POSY values will not be correctly updated for
    /// older GTK versions.
    /// In Ubuntu, when liboverlay-scrollbar is enabled (the new tiny auto-hide
    /// scrollbar) only the IUP_SBPOSV and IUP_SBPOSH codes are used.
    /// Callback int function(Ihandle *ih, int op, float posx, float posy); [in C]
    /// ih:scroll_cb(op, posx, posy: number) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// op: indicates the operation performed on the scrollbar.
    /// If the manipulation was made on the vertical scrollbar, it can have the
    /// following values: IUP_SBUP - line up IUP_SBDN - line down IUP_SBPGUP - page
    /// up IUP_SBPGDN - page down IUP_SBPOSV - vertical positioning IUP_SBDRAGV -
    /// vertical drag If it was on the horizontal scrollbar, the following values
    /// are valid: IUP_SBLEFT - column left IUP_SBRIGHT - column right IUP_SBPGLEFT
    /// - page left IUP_SBPGRIGHT - page right IUP_SBPOSH - horizontal positioning
    /// IUP_SBDRAGH - horizontal drag posx, posy: the same as the ACTION canvas
    /// callback (corresponding to the values of attributes POSX and POSY).
    /// Notes IUP_SBDRAGH and IUP_SBDRAGV are not supported in GTK.
    /// During drag IUP_SBPOSH and IUP_SBPOSV are used.
    /// In Windows, after a drag when mouse is released IUP_SBPOSH or IUP_SBPOSV
    /// are called.
    /// Affects IupCanvas, IupGLCanvas, SCROLLBAR
    pub const OnScrollFn = fn (self: *Self, arg0: i32, arg1: f32, arg2: f32) anyerror!void;

    pub const OnFocusFn = fn (self: *Self, arg0: i32) anyerror!void;

    /// 
    /// WOM_CB WOM_CB Action generated when an audio device receives an event.
    /// [Windows Only] Callback int function(Ihandle *ih, int state); [in C]
    /// ih:wom_cb(state: number) -> (ret: number) [in Lua] ih: identifies the
    /// element that activated the event.
    /// state: can be opening=1, done=0, or closing=-1.
    /// Notes This callback is used to syncronize video playback with audio.
    /// It is sent when the audio device: Message Description opening is opened by
    /// using the waveOutOpen function.
    /// done is finished with a data block sent by using the waveOutWrite function.
    /// closing is closed by using the waveOutClose function.
    /// You must use the HWND attribute when calling waveOutOpen in the dwCallback
    /// parameter and set fdwOpen to CALLBACK_WINDOW.
    /// Affects IupDialog, IupCanvas, IupGLCanvas
    pub const OnWomFn = fn (self: *Self, arg0: i32) anyerror!void;

    /// 
    /// K_ANY K_ANY Action generated when a keyboard event occurs.
    /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
    /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
    /// c: identifier of typed key.
    /// Please refer to the Keyboard Codes table for a list of possible values.
    /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
    /// the control and not propagated.
    /// If returns IUP_CONTINUE, the key will be processed and the event will be
    /// propagated to the parent of the element receiving it, this is the default behavior.
    /// If returns IUP_DEFAULT the key is processed but it is not propagated.
    /// IUP_CLOSE will be processed.
    /// Notes Keyboard callbacks depend on the keyboard usage of the control with
    /// the focus.
    /// So if you return IUP_IGNORE the control will usually not process the key.
    /// But be aware that sometimes the control process the key in another event so
    /// even returning IUP_IGNORE the key can get processed.
    /// Although it will not be propagated.
    /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
    /// the IUP_CONTINUE return value to work while the control is in focus.
    /// If the callback does not exists it is automatically propagated to the
    /// parent of the element.
    /// K_* callbacks All defined keys are also callbacks of any element, called
    /// when the respective key is activated.
    /// For example: "K_cC" is also a callback activated when the user press
    /// Ctrl+C, when the focus is at the element or at a children with focus.
    /// This is the way an application can create shortcut keys, also called hot keys.
    /// These callbacks are not available in IupLua.
    /// Affects All elements with keyboard interaction.
    pub const OnKAnyFn = fn (self: *Self, arg0: i32) anyerror!void;

    pub const OnFlatFocusFn = fn (self: *Self, arg0: i32) anyerror!void;

    /// 
    /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
    /// In Motif is also activated by the Help button in some workstations keyboard.
    /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Returns: IUP_CLOSE will be processed.
    /// Affects All elements with user interaction.
    pub const OnHelpFn = fn (self: *Self) anyerror!void;

    pub const OnDropMotionFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: [:0]const u8) anyerror!void;

    pub const OnFlatLeaveWindowFn = fn (self: *Self) anyerror!void;

    /// 
    /// KEYPRESS_CB KEYPRESS_CB Action generated when a key is pressed or released.
    /// If the key is pressed and held several calls will occur.
    /// It is called after the callback K_ANY is processed.
    /// Callback int function(Ihandle *ih, int c, int press); [in C]
    /// ih:keypress_cb(c, press: number) -> (ret: number) [in Lua] ih: identifier
    /// of the element that activated the event.
    /// c: identifier of typed key.
    /// Please refer to the Keyboard Codes table for a list of possible values.
    /// press: 1 is the user pressed the key or 0 otherwise.
    /// Returns: If IUP_IGNORE is returned the key is ignored by the system.
    /// IUP_CLOSE will be processed.
    /// Affects IupCanvas
    pub const OnKeyPressFn = fn (self: *Self, arg0: i32, arg1: i32) anyerror!void;

    pub const OnDragEndFn = fn (self: *Self, arg0: i32) anyerror!void;

    pub const OnDragBeginFn = fn (self: *Self, arg0: i32, arg1: i32) anyerror!void;

    /// 
    /// ACTION ACTION Action generated when the element is activated.
    /// Affects each element differently.
    /// Callback int function(Ihandle *ih); [in C] ih:action() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// In some elements, this callback may receive more parameters, apart from ih.
    /// Please refer to each element's documentation.
    /// Affects IupButton, IupItem, IupList, IupText, IupCanvas, IupMultiline,
    /// IupToggle
    pub const OnActionFn = fn (self: *Self, arg0: f32, arg1: f32) anyerror!void;

    pub const OnMultiTouchFn = fn (self: *Self, arg0: i32, arg1: *i32, arg2: *i32, arg3: *i32) anyerror!void;

    /// 
    /// MOTION_CB MOTION_CB Action generated when the mouse moves.
    /// Callback int function(Ihandle *ih, int x, int y, char *status); [in C]
    /// ih:motion_cb(x, y: number, status: string) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of mouse buttons and certain keyboard keys at the moment the
    /// event was generated.
    /// The same macros used for BUTTON_CB can be used for this status.
    /// Notes Between press and release all mouse events are redirected only to
    /// this control, even if the cursor moves outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupGLCanvas
    pub const OnMotionFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: [:0]const u8) anyerror!void;

    pub const OnFlatEnterWindowFn = fn (self: *Self, arg0: i32, arg1: i32) anyerror!void;

    /// 
    /// WHEEL_CB WHEEL_CB Action generated when the mouse wheel is rotated.
    /// If this callback is not defined the wheel will automatically scroll the
    /// canvas in the vertical direction by some lines, the SCROLL_CB callback if
    /// defined will be called with the IUP_SBDRAGV operation.
    /// Callback int function(Ihandle *ih, float delta, int x, int y, char
    /// *status); [in C] ih:wheel_cb(delta, x, y: number, status: string) -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// delta: the amount the wheel was rotated in notches.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of mouse buttons and certain keyboard keys at the moment the
    /// event was generated.
    /// The same macros used for BUTTON_CB can be used for this status.
    /// Notes In Motif and GTK delta is always 1 or -1.
    /// In Windows is some situations delta can reach the value of two.
    /// In the future with more precise wheels this increment can be changed.
    /// Affects IupCanvas, IupGLCanvas
    pub const OnWheelFn = fn (self: *Self, arg0: f32, arg1: i32, arg2: i32, arg3: [:0]const u8) anyerror!void;

    /// 
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnMapFn = fn (self: *Self) anyerror!void;

    pub const OnFlatButtonFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: [:0]const u8) anyerror!void;

    /// 
    /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also LEAVEWINDOW_CB
    pub const OnEnterWindowFn = fn (self: *Self) anyerror!void;

    /// 
    /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
    /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Notes If the dialog is visible then it is hidden before it is destroyed.
    /// The callback will be called right after it is hidden.
    /// The callback will be called before all other destroy procedures.
    /// For instance, if the element has children then it is called before the
    /// children are destroyed.
    /// For language binding implementations use the callback name "LDESTROY_CB" to
    /// release memory allocated by the binding for the element.
    /// Also the callback will be called before the language callback.
    /// Affects All.
    pub const OnDestroyFn = fn (self: *Self) anyerror!void;

    pub const OnDropDataFn = fn (self: *Self, arg0: [:0]const u8, arg1: *iup.Unknow, arg2: i32, arg3: i32, arg4: i32) anyerror!void;

    /// 
    /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
    /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Affects All elements with user interaction, except menus.
    /// In Windows, there are restrictions when using this callback.
    /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
    /// function calls that display or activate a window.
    /// This causes the thread to yield control and can cause the application to
    /// stop responding to messages.
    /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
    pub const OnKillFocusFn = fn (self: *Self) anyerror!void;

    pub const OnDragDataFn = fn (self: *Self, arg0: [:0]const u8, arg1: *iup.Unknow, arg2: i32) anyerror!void;

    pub const OnDragDataSizeFn = fn (self: *Self, arg0: [:0]const u8) anyerror!void;

    /// 
    /// DROPFILES_CB DROPFILES_CB Action called when a file is "dropped" into the control.
    /// When several files are dropped at once, the callback is called several
    /// times, once for each file.
    /// If defined after the element is mapped then the attribute DROPFILESTARGET
    /// must be set to YES.
    /// [Windows and GTK Only] (GTK 2.6) Callback int function(Ihandle *ih, const
    /// char* filename, int num, int x, int y); [in C] ih:dropfiles_cb(filename:
    /// string; num, x, y: number) -> (ret: number) [in Lua] ih: identifier of the
    /// element that activated the event.
    /// filename: Name of the dropped file.
    /// num: Number index of the dropped file.
    /// If several files are dropped, num is the index of the dropped file starting
    /// from "total-1" to "0".
    /// x: X coordinate of the point where the user released the mouse button.
    /// y: Y coordinate of the point where the user released the mouse button.
    /// Returns: If IUP_IGNORE is returned the callback will NOT be called for the
    /// next dropped files, and the processing of dropped files will be interrupted.
    /// Affects IupDialog, IupCanvas, IupGLCanvas, IupText, IupList
    pub const OnDropFilesFn = fn (self: *Self, arg0: [:0]const u8, arg1: i32, arg2: i32, arg3: i32) anyerror!void;

    /// 
    /// RESIZE_CB RESIZE_CB Action generated when the canvas or dialog size is changed.
    /// Callback int function(Ihandle *ih, int width, int height); [in C]
    /// ih:resize_cb(width, height: number) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// width: the width of the internal element size in pixels not considering the
    /// decorations (client size) height: the height of the internal element size
    /// in pixels not considering the decorations (client size) Notes For the
    /// dialog, this action is also generated when the dialog is mapped, after the
    /// map and before the show.
    /// When XAUTOHIDE=Yes or YAUTOHIDE=Yes, if the canvas scrollbar is
    /// hidden/shown after changing the DX or DY attributes from inside the
    /// callback, the size of the drawing area will immediately change, so the
    /// parameters with and height will be invalid.
    /// To update the parameters consult the DRAWSIZE attribute.
    /// Also activate the drawing toolkit only after updating the DX or DY attributes.
    /// Affects IupCanvas, IupGLCanvas, IupDialog
    pub const OnResizeFn = fn (self: *Self, arg0: i32, arg1: i32) anyerror!void;

    /// 
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnUnmapFn = fn (self: *Self) anyerror!void;

    /// 
    /// FLAT_ACTION: Action generated when the button 1 (usually left) is selected.
    /// This callback is called only after the mouse is released and when it is
    /// released inside the button area.
    /// int function(Ihandle* ih, int state); [in C]ih:action(state: number) ->
    /// (ret: number) [in Lua]
    pub const OnFlatActionFn = fn (self: *Self, arg0: i32) anyerror!void;

    /// 
    /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
    /// This callback is called after the KILLFOCUS_CB of the element that loosed
    /// the focus.
    /// The IupGetFocus function during the callback returns the element that
    /// loosed the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that received keyboard focus.
    /// Affects All elements with user interaction, except menus.
    /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
    pub const OnGetFocusFn = fn (self: *Self) anyerror!void;

    /// 
    /// BUTTON_CB BUTTON_CB Action generated when a mouse button is pressed or released.
    /// Callback int function(Ihandle* ih, int button, int pressed, int x, int y,
    /// char* status); [in C] ih:button_cb(button, pressed, x, y: number, status:
    /// string) -> (ret: number) [in Lua] ih: identifies the element that activated
    /// the event.
    /// button: identifies the activated mouse button: IUP_BUTTON1 - left mouse
    /// button (button 1); IUP_BUTTON2 - middle mouse button (button 2);
    /// IUP_BUTTON3 - right mouse button (button 3).
    /// pressed: indicates the state of the button: 0 - mouse button was released;
    /// 1 - mouse button was pressed.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of the mouse buttons and some keyboard keys at the moment
    /// the event is generated.
    /// The following macros must be used for verification: iup_isshift(status)
    /// iup_iscontrol(status) iup_isbutton1(status) iup_isbutton2(status)
    /// iup_isbutton3(status) iup_isbutton4(status) iup_isbutton5(status)
    /// iup_isdouble(status) iup_isalt(status) iup_issys(status) They return 1 if
    /// the respective key or button is pressed, and 0 otherwise.
    /// These macros are also available in Lua, returning a boolean.
    /// Returns: IUP_CLOSE will be processed.
    /// On some controls if IUP_IGNORE is returned the action is ignored (this is
    /// system dependent).
    /// Notes This callback can be used to customize a button behavior.
    /// For a standard button behavior use the ACTION callback of the IupButton.
    /// For a single click the callback is called twice, one for pressed=1 and one
    /// for pressed=0.
    /// Only after both calls the ACTION callback is called.
    /// In Windows, if a dialog is shown or popup in any situation there could be
    /// unpredictable results because the native system still has processing to be
    /// done even after the callback is called.
    /// A double click is preceded by two single clicks, one for pressed=1 and one
    /// for pressed=0, and followed by a press=0, all three without the double
    /// click flag set.
    /// In GTK, it is preceded by an additional two single clicks sequence.
    /// For example, for one double click all the following calls are made:
    /// BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) BUTTON_CB(but=1 (0), x=154, y=83 [
    /// 1 ]) BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1
    /// (0), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1 (1), x=154, y=83 [ 1
    /// D ]) BUTTON_CB(but=1 (0), x=154, y=83 [ 1 ]) Between press and release all
    /// mouse events are redirected only to this control, even if the cursor moves
    /// outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupButton, IupText, IupList, IupGLCanvas
    pub const OnButtonFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: [:0]const u8) anyerror!void;

    pub const OnFlatMotionFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: [:0]const u8) anyerror!void;

    /// 
    /// VALUECHANGED_CB: Called after the value was interactively changed by the user.
    /// Called after the ACTION callback, but under the same context.
    /// int function(Ihandle *ih); [in C]ih:valuechanged_cb() -> (ret: number) [in
    /// Lua]
    pub const OnValueChangedFn = fn (self: *Self) anyerror!void;

    pub const OnLDestroyFn = fn (self: *Self) anyerror!void;

    /// 
    /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also ENTERWINDOW_CB
    pub const OnLeaveWindowFn = fn (self: *Self) anyerror!void;

    pub const OnPostMessageFn = fn (self: *Self, arg0: [:0]const u8, arg1: i32, arg2: f64, arg3: *iup.Unknow) anyerror!void;

    pub const DrawTextAlignment = enum {
        ACenter,
        ARight,
        ALeft,
    };

    pub const ZOrder = enum {
        Top,
        Bottom,
    };
    /// 
    /// EXPAND (non inheritable): The default value is "NO".
    pub const Expand = enum {
        Yes,
        Horizontal,
        Vertical,
        HorizontalFree,
        VerticalFree,
        No,
    };

    pub const Floating = enum {
        Yes,
        Ignore,
        No,
    };

    pub const DrawStyle = enum {
        Fill,
        StrokeDash,
        StrokeDot,
        StrokeDashDot,
        StrokeDashDotdot,
        DrawStroke,
    };
    /// 
    /// IMAGEPOSITION (non inheritable): Position of the image relative to the text
    /// when both are displayed.
    /// Can be: LEFT, RIGHT, TOP, BOTTOM.
    /// Default: LEFT.
    pub const ImagePosition = enum {
        Left,
        Right,
        Bottom,
        Top,
    };
    /// 
    /// TEXTALIGNMENT (non inheritable): Horizontal text alignment for multiple lines.
    /// Can be: ALEFT, ARIGHT or ACENTER.
    /// Default: ALEFT.
    pub const TextAlignment = enum {
        ARight,
        ALeft,
        ACenter,
    };

    pub const Initializer = struct {
        last_error: ?anyerror = null,
        ref: *Self,

        ///
        /// Returns a pointer to IUP element or an error.
        /// Only top-level or detached elements needs to be unwraped,
        pub fn unwrap(self: Initializer) !*Self {
            if (self.last_error) |e| {
                return e;
            } else {
                return self.ref;
            }
        }

        ///
        /// Captures a reference into a external variable
        /// Allows to capture some references even using full declarative API
        pub fn capture(self: *Initializer, ref: **Self) Initializer {
            ref.* = self.ref;
            return self.*;
        }

        pub fn setStrAttribute(self: *Initializer, attributeName: [:0]const u8, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setStrAttribute(self.ref, attributeName, arg);
            return self.*;
        }

        pub fn setIntAttribute(self: *Initializer, attributeName: [:0]const u8, arg: i32) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setIntAttribute(self.ref, attributeName, arg);
            return self.*;
        }

        pub fn setBoolAttribute(self: *Initializer, attributeName: [:0]const u8, arg: bool) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setBoolAttribute(self.ref, attributeName, bool);
            return self.*;
        }

        pub fn setPtrAttribute(self: *Initializer, comptime T: type, attributeName: [:0]const u8, value: ?*T) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setPtrAttribute(self.ref, T, attributeName, value);
            return self.*;
        }


        /// 
        /// FGCOLOR: Text color.
        /// Default: the global attribute DLGFGCOLOR.
        pub fn setFgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "FGCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setTipBalloon(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TIPBALLOON", void, void, arg);
            return self.*;
        }

        pub fn setHandleName(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "HANDLENAME", void, void, arg);
            return self.*;
        }

        pub fn setTipBgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "TIPBGCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setXMin(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "XMIN", void, void, arg);
            return self.*;
        }

        pub fn setMaxSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "MAXSIZE", void, void, value);
            return self.*;
        }

        pub fn setDrawTextWrap(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DRAWTEXTWRAP", void, void, arg);
            return self.*;
        }

        pub fn setDrawUsedIRect2d(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DRAWUSEDIRECT2D", void, void, arg);
            return self.*;
        }


        /// 
        /// FOCUSFEEDBACK (non inheritable): draw the focus feedback.
        /// Can be Yes or No.
        /// Default: Yes.
        /// (since 3.26)
        pub fn setFocusFeedback(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "FOCUSFEEDBACK", void, void, arg);
            return self.*;
        }

        pub fn setPosition(self: *Initializer, x: i32, y: i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
            c.setStrAttribute(self.ref, "POSITION", void, void, value);
            return self.*;
        }

        pub fn setDropFilesTarget(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DROPFILESTARGET", void, void, arg);
            return self.*;
        }

        pub fn setDrawTextAlignment(self: *Initializer, arg: ?DrawTextAlignment) Initializer {
            if (arg) |value| switch (value) {
                .ACenter => c.setStrAttribute(self.ref, "DRAWTEXTALIGNMENT", void, void, "ACENTER"),
                .ARight => c.setStrAttribute(self.ref, "DRAWTEXTALIGNMENT", void, void, "ARIGHT"),
                .ALeft => c.setStrAttribute(self.ref, "DRAWTEXTALIGNMENT", void, void, "ALEFT"),
            } else {
                c.clearAttribute(self.ref, "DRAWTEXTALIGNMENT", void, void);
            }
            return self.*;
        }

        pub fn setTip(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "TIP", void, void, arg);
            return self.*;
        }

        pub fn setDrawTextLayoutCenter(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DRAWTEXTLAYOUTCENTER", void, void, arg);
            return self.*;
        }


        /// 
        /// CANFOCUS (creation only) (non inheritable): enables the focus traversal of
        /// the control.
        /// In Windows the button will respect CANFOCUS in opposite to the other controls.
        /// Default: YES.
        pub fn setCanFocus(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "CANFOCUS", void, void, arg);
            return self.*;
        }

        pub fn setDragSourceMove(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DRAGSOURCEMOVE", void, void, arg);
            return self.*;
        }


        /// 
        /// PSCOLOR: background color used to indicate a press state.
        /// Pre-defined to "150 200 235".
        /// Can be set to NULL.
        /// If NULL BGCOLOR will be used instead.
        pub fn setPsColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "PSCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setVisible(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "VISIBLE", void, void, arg);
            return self.*;
        }


        /// 
        /// IMAGE (non inheritable): Image name.
        /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
        /// See also IupImage.
        pub fn setImage(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "IMAGE", void, void, arg);
            return self.*;
        }

        pub fn setLineX(self: *Initializer, arg: f64) Initializer {
            c.setDoubleAttribute(self.ref, "LINEX", void, void, arg);
            return self.*;
        }

        pub fn setCursor(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "CURSOR", void, void, arg);
            return self.*;
        }

        pub fn setLineY(self: *Initializer, arg: f64) Initializer {
            c.setDoubleAttribute(self.ref, "LINEY", void, void, arg);
            return self.*;
        }

        pub fn zOrder(self: *Initializer, arg: ?ZOrder) Initializer {
            if (arg) |value| switch (value) {
                .Top => c.setStrAttribute(self.ref, "ZORDER", void, void, "TOP"),
                .Bottom => c.setStrAttribute(self.ref, "ZORDER", void, void, "BOTTOM"),
            } else {
                c.clearAttribute(self.ref, "ZORDER", void, void);
            }
            return self.*;
        }

        pub fn setDrawLineWidth(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "DRAWLINEWIDTH", void, void, arg);
            return self.*;
        }

        pub fn setDragDrop(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DRAGDROP", void, void, arg);
            return self.*;
        }

        pub fn setDrawAntialias(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "DRAWANTIALIAS", void, void, arg);
            return self.*;
        }

        pub fn setTheme(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "THEME", void, void, arg);
            return self.*;
        }

        pub fn setDragCursorCopy(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "DRAGCURSORCOPY", void, void, arg);
            return self.*;
        }

        pub fn setHtTransparent(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "HTTRANSPARENT", void, void, arg);
            return self.*;
        }


        /// 
        /// EXPAND (non inheritable): The default value is "NO".
        pub fn setExpand(self: *Initializer, arg: ?Expand) Initializer {
            if (arg) |value| switch (value) {
                .Yes => c.setStrAttribute(self.ref, "EXPAND", void, void, "YES"),
                .Horizontal => c.setStrAttribute(self.ref, "EXPAND", void, void, "HORIZONTAL"),
                .Vertical => c.setStrAttribute(self.ref, "EXPAND", void, void, "VERTICAL"),
                .HorizontalFree => c.setStrAttribute(self.ref, "EXPAND", void, void, "HORIZONTALFREE"),
                .VerticalFree => c.setStrAttribute(self.ref, "EXPAND", void, void, "VERTICALFREE"),
                .No => c.setStrAttribute(self.ref, "EXPAND", void, void, "NO"),
            } else {
                c.clearAttribute(self.ref, "EXPAND", void, void);
            }
            return self.*;
        }

        pub fn setDrawFont(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "DRAWFONT", void, void, arg);
            return self.*;
        }

        pub fn setSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "SIZE", void, void, value);
            return self.*;
        }


        /// 
        /// PADDING: internal margin.
        /// Works just like the MARGIN attribute of the IupHbox and IupVbox containers,
        /// but uses a different name to avoid inheritance problems.
        /// Alignment does not includes the padding area.
        /// Default value: "0x0".
        /// Value can be DEFAULTBUTTONPADDING, so the global attribute of this name
        /// will be used instead (since 3.29).
        /// The natural size will be a combination of the size of the image and the
        /// title, if any, plus PADDING and SPACING (if both image and title are
        /// present), and the check box if visible.
        pub fn setPadding(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "PADDING", void, void, value);
            return self.*;
        }

        pub fn setPosX(self: *Initializer, arg: f64) Initializer {
            c.setDoubleAttribute(self.ref, "POSX", void, void, arg);
            return self.*;
        }

        pub fn setPosY(self: *Initializer, arg: f64) Initializer {
            c.setDoubleAttribute(self.ref, "POSY", void, void, arg);
            return self.*;
        }


        /// 
        /// BORDERHLCOLOR: color used for borders when highlighted.
        /// Default use BORDERCOLOR.
        pub fn setBorderHlColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "BORDERHLCOLOR", void, void, rgb);
            return self.*;
        }


        /// 
        /// TEXTHLCOLOR: text color used to indicate a highlight state.
        /// If not defined FGCOLOR will be used instead.
        /// (since 3.26)
        pub fn setTextHlColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "TEXTHLCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setYMin(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "YMIN", void, void, arg);
            return self.*;
        }


        /// 
        /// TEXTELLIPSIS (non inheritable): If the text is larger that its box, an
        /// ellipsis ("...") will be placed near the last visible part of the text and
        /// replace the invisible part.
        /// It will be ignored when TEXTWRAP=Yes.
        /// (since 3.25)
        pub fn setTextEllipsis(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TEXTELLIPSIS", void, void, arg);
            return self.*;
        }

        pub fn setDrawMakeInactive(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DRAWMAKEINACTIVE", void, void, arg);
            return self.*;
        }

        pub fn setFontSize(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "FONTSIZE", void, void, arg);
            return self.*;
        }

        pub fn setDropTypes(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "DROPTYPES", void, void, arg);
            return self.*;
        }

        pub fn setUserSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "USERSIZE", void, void, value);
            return self.*;
        }

        pub fn setTipDelay(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "TIPDELAY", void, void, arg);
            return self.*;
        }

        pub fn setScrollBar(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "SCROLLBAR", void, void, arg);
            return self.*;
        }

        pub fn setDragStart(self: *Initializer, x: i32, y: i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
            c.setStrAttribute(self.ref, "DRAGSTART", void, void, value);
            return self.*;
        }


        /// 
        /// TITLE (non inheritable): toggle text.
        /// The '\n' character is accepted for line change.
        pub fn setTitle(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "TITLE", void, void, arg);
            return self.*;
        }

        pub fn setXAutoHide(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "XAUTOHIDE", void, void, arg);
            return self.*;
        }


        /// 
        /// PROPAGATEFOCUS (non inheritable): enables the focus callback forwarding to
        /// the next native parent with FOCUS_CB defined.
        /// Default: NO.
        pub fn setPropagateFocus(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "PROPAGATEFOCUS", void, void, arg);
            return self.*;
        }

        pub fn setXMax(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "XMAX", void, void, arg);
            return self.*;
        }


        /// 
        /// BGCOLOR: Background color.
        /// If text and image are not defined, the button is configured to simply show
        /// a color, in this case set the button size because the natural size will be
        /// very small.
        /// If not defined it will use the background color of the native parent.
        pub fn setBgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "BGCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setTipBalloonTitle(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "TIPBALLOONTITLE", void, void, arg);
            return self.*;
        }

        pub fn setDropTarget(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DROPTARGET", void, void, arg);
            return self.*;
        }

        pub fn setDX(self: *Initializer, arg: f64) Initializer {
            c.setDoubleAttribute(self.ref, "DX", void, void, arg);
            return self.*;
        }

        pub fn setDY(self: *Initializer, arg: f64) Initializer {
            c.setDoubleAttribute(self.ref, "DY", void, void, arg);
            return self.*;
        }

        pub fn setDrawTextEllipsis(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DRAWTEXTELLIPSIS", void, void, arg);
            return self.*;
        }

        pub fn setDragSource(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DRAGSOURCE", void, void, arg);
            return self.*;
        }

        pub fn setDrawTextClip(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DRAWTEXTCLIP", void, void, arg);
            return self.*;
        }

        pub fn setFloating(self: *Initializer, arg: ?Floating) Initializer {
            if (arg) |value| switch (value) {
                .Yes => c.setStrAttribute(self.ref, "FLOATING", void, void, "YES"),
                .Ignore => c.setStrAttribute(self.ref, "FLOATING", void, void, "IGNORE"),
                .No => c.setStrAttribute(self.ref, "FLOATING", void, void, "NO"),
            } else {
                c.clearAttribute(self.ref, "FLOATING", void, void);
            }
            return self.*;
        }

        pub fn setNormalizerGroup(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "NORMALIZERGROUP", void, void, arg);
            return self.*;
        }


        /// 
        /// SPACING (non inheritable): spacing between the image and the text.
        /// Default: "2".
        /// The natural size will be a combination of the size of the image and the
        /// title, if any, plus PADDING and SPACING (if both image and title are
        /// present), and the check box if visible.
        pub fn setSpacing(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "SPACING", void, void, arg);
            return self.*;
        }


        /// 
        /// BORDERPSCOLOR: color used for borders when pressed or selected.
        /// Default use BORDERCOLOR.
        pub fn setBorderPsColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "BORDERPSCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setRasterSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "RASTERSIZE", void, void, value);
            return self.*;
        }


        /// 
        /// TEXTPSCOLOR: text color used to indicate a press state.
        /// If not defined FGCOLOR will be used instead.
        /// (since 3.26)
        pub fn setTextPsColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "TEXTPSCOLOR", void, void, rgb);
            return self.*;
        }


        /// 
        /// BORDERCOLOR: color used for borders.
        /// Default: "50 150 255".
        /// This is for the IupFlatToggle drawn border.
        pub fn setBorderColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "BORDERCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setTipFgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "TIPFGCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setControlId(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "CONTROLID", void, void, arg);
            return self.*;
        }


        /// 
        /// CSPACING: same as SPACING but using the units of the vertical part of the
        /// SIZE attribute.
        /// It will actually set the SPACING attribute.
        /// (since 3.29)
        pub fn setCSpacing(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "CSPACING", void, void, arg);
            return self.*;
        }


        /// 
        /// HLCOLOR: background color used to indicate a highlight state.
        /// Pre-defined to "200 225 245".
        /// Can be set to NULL.
        /// If NULL BGCOLOR will be used instead.
        pub fn setHlColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "HLCOLOR", void, void, rgb);
            return self.*;
        }


        /// 
        /// FRONTIMAGE (non inheritable): image name to be used as foreground.
        /// The foreground image is drawn in the same position as the background, but
        /// it is drawn at last.
        /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
        /// See also IupImage.
        pub fn setFrontImage(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FRONTIMAGE", void, void, arg);
            return self.*;
        }

        pub fn setFontFace(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FONTFACE", void, void, arg);
            return self.*;
        }

        pub fn setDrawColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "DRAWCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setDrawTextOrientation(self: *Initializer, arg: f64) Initializer {
            c.setDoubleAttribute(self.ref, "DRAWTEXTORIENTATION", void, void, arg);
            return self.*;
        }

        pub fn setDrawBgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "DRAWBGCOLOR", void, void, rgb);
            return self.*;
        }

        pub fn setName(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "NAME", void, void, arg);
            return self.*;
        }

        pub fn setBackingStore(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "BACKINGSTORE", void, void, arg);
            return self.*;
        }

        pub fn setTipBalloonTitleIcon(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TIPBALLOONTITLEICON", void, void, arg);
            return self.*;
        }

        pub fn setYAutoHide(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "YAUTOHIDE", void, void, arg);
            return self.*;
        }

        pub fn setDrawStyle(self: *Initializer, arg: ?DrawStyle) Initializer {
            if (arg) |value| switch (value) {
                .Fill => c.setStrAttribute(self.ref, "DRAWSTYLE", void, void, "FILL"),
                .StrokeDash => c.setStrAttribute(self.ref, "DRAWSTYLE", void, void, "STROKE_DASH"),
                .StrokeDot => c.setStrAttribute(self.ref, "DRAWSTYLE", void, void, "STROKE_DOT"),
                .StrokeDashDot => c.setStrAttribute(self.ref, "DRAWSTYLE", void, void, "STROKE_DASH_DOT"),
                .StrokeDashDotdot => c.setStrAttribute(self.ref, "DRAWSTYLE", void, void, "STROKE_DASH_DOT_DOT"),
                .DrawStroke => c.setStrAttribute(self.ref, "DRAWSTYLE", void, void, "DRAW_STROKE"),
            } else {
                c.clearAttribute(self.ref, "DRAWSTYLE", void, void);
            }
            return self.*;
        }


        /// 
        /// VALUE (non inheritable): Toggle's state.
        /// Values can be "ON", "OFF" or "TOGGLE".
        /// If 3STATE=YES then can also be "NOTDEF".
        /// Default: "OFF".
        /// The TOGGLE option will invert the current state.
        /// Can only be set to ON if the toggle is inside a radio, it will
        /// automatically set to OFF the previous toggle that was ON in the radio.
        pub fn setValue(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "VALUE", void, void, arg);
            return self.*;
        }


        /// 
        /// BACKIMAGEZOOM (non inheritable): if set the back image will be zoomed to
        /// occupy the full background.
        /// Aspect ratio is NOT preserved.
        /// Can be Yes or No.
        /// Default: No.
        /// (since 3.25)
        pub fn setBackImageZoom(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "BACKIMAGEZOOM", void, void, arg);
            return self.*;
        }


        /// 
        /// CPADDING: same as PADDING but using the units of the SIZE attribute.
        /// It will actually set the PADDING attribute.
        /// (since 3.29)
        pub fn setCPadding(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "CPADDING", void, void, value);
            return self.*;
        }


        /// 
        /// TEXTORIENTATION (non inheritable): text angle in degrees and counterclockwise.
        /// The text size will adapt to include the rotated space.
        /// (since 3.25)
        pub fn setTextOrientation(self: *Initializer, arg: f64) Initializer {
            c.setDoubleAttribute(self.ref, "TEXTORIENTATION", void, void, arg);
            return self.*;
        }


        /// 
        /// FITTOBACKIMAGE (non inheritable): enable the natural size to be computed
        /// from the BACKIMAGE.
        /// If BACKIMAGE is not defined will be ignored.
        /// Can be Yes or No.
        /// Default: No.
        pub fn setFitToBackImage(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "FITTOBACKIMAGE", void, void, arg);
            return self.*;
        }


        /// 
        /// ACTIVE, FONT, EXPAND, SCREENPOSITION, POSITION, MINSIZE, MAXSIZE, WID, TIP,
        /// SIZE, RASTERSIZE, ZORDER, VISIBLE, THEME: also accepted.
        pub fn setActive(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "ACTIVE", void, void, arg);
            return self.*;
        }

        pub fn setTipVisible(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TIPVISIBLE", void, void, arg);
            return self.*;
        }


        /// 
        /// IMAGEHIGHLIGHT (non inheritable): Image name of the element in highlight state.
        /// If it is not defined then the IMAGE is used.
        pub fn setImageHighlight(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "IMAGEHIGHLIGHT", void, void, arg);
            return self.*;
        }

        pub fn setYMax(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "YMAX", void, void, arg);
            return self.*;
        }


        /// 
        /// BACKIMAGE (non inheritable): image name to be used as background.
        /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
        /// See also IupImage.
        pub fn setBackImage(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "BACKIMAGE", void, void, arg);
            return self.*;
        }

        pub fn setExpandWeight(self: *Initializer, arg: f64) Initializer {
            c.setDoubleAttribute(self.ref, "EXPANDWEIGHT", void, void, arg);
            return self.*;
        }

        pub fn setMinSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "MINSIZE", void, void, value);
            return self.*;
        }


        /// 
        /// SHOWBORDER: by default borders are drawn only when the button is
        /// highlighted, if SHOWBORDER=Yes borders are always show.
        /// When SHOWBORDER=Yes and BGCOLOR is not defined, the actual BGCOLOR will be
        /// a darker version of the background color of the native parent.
        pub fn setShowBorder(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "SHOWBORDER", void, void, arg);
            return self.*;
        }

        pub fn setNTheme(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "NTHEME", void, void, arg);
            return self.*;
        }


        /// 
        /// BORDER (creation only): the default value is "NO".
        /// This is the IupCanvas border.
        pub fn setBorder(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "BORDER", void, void, arg);
            return self.*;
        }


        /// 
        /// IGNORERADIO (non inheritable): when set the toggle will not behave as a
        /// radio when inside an IupRadio hierarchy.
        pub fn setIgnoreRadio(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "IGNORERADIO", void, void, arg);
            return self.*;
        }


        /// 
        /// IMAGEPOSITION (non inheritable): Position of the image relative to the text
        /// when both are displayed.
        /// Can be: LEFT, RIGHT, TOP, BOTTOM.
        /// Default: LEFT.
        pub fn setImagePosition(self: *Initializer, arg: ?ImagePosition) Initializer {
            if (arg) |value| switch (value) {
                .Left => c.setStrAttribute(self.ref, "IMAGEPOSITION", void, void, "LEFT"),
                .Right => c.setStrAttribute(self.ref, "IMAGEPOSITION", void, void, "RIGHT"),
                .Bottom => c.setStrAttribute(self.ref, "IMAGEPOSITION", void, void, "BOTTOM"),
                .Top => c.setStrAttribute(self.ref, "IMAGEPOSITION", void, void, "TOP"),
            } else {
                c.clearAttribute(self.ref, "IMAGEPOSITION", void, void);
            }
            return self.*;
        }

        pub fn setDragTypes(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "DRAGTYPES", void, void, arg);
            return self.*;
        }

        pub fn setWheelDropFocus(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "WHEELDROPFOCUS", void, void, arg);
            return self.*;
        }


        /// 
        /// BORDERWIDTH: line width used for borders.
        /// Default: "1".
        /// Any borders can be hidden by simply setting this value to 0.
        /// This is for the IupFlatToggle drawn border.
        /// When the check box is shown the borders are not shown, and the background
        /// is not highlighted.
        pub fn setBorderWidth(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "BORDERWIDTH", void, void, arg);
            return self.*;
        }

        pub fn setFontStyle(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FONTSTYLE", void, void, arg);
            return self.*;
        }


        /// 
        /// TEXTALIGNMENT (non inheritable): Horizontal text alignment for multiple lines.
        /// Can be: ALEFT, ARIGHT or ACENTER.
        /// Default: ALEFT.
        pub fn setTextAlignment(self: *Initializer, arg: ?TextAlignment) Initializer {
            if (arg) |value| switch (value) {
                .ARight => c.setStrAttribute(self.ref, "TEXTALIGNMENT", void, void, "ARIGHT"),
                .ALeft => c.setStrAttribute(self.ref, "TEXTALIGNMENT", void, void, "ALEFT"),
                .ACenter => c.setStrAttribute(self.ref, "TEXTALIGNMENT", void, void, "ACENTER"),
            } else {
                c.clearAttribute(self.ref, "TEXTALIGNMENT", void, void);
            }
            return self.*;
        }

        pub fn setTouch(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TOUCH", void, void, arg);
            return self.*;
        }


        /// 
        /// TEXTWRAP (non inheritable): For single line texts if the text is larger
        /// than its box the line will be automatically broken in multiple lines.
        /// Notice that this is done internally by the system, the element natural size
        /// will still use only a single line.
        /// For the remaining lines to be visible the element should use
        /// EXPAND=VERTICAL or set a SIZE/RASTERSIZE with enough height for the wrapped lines.
        /// (since 3.25)
        pub fn setTextWrap(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TEXTWRAP", void, void, arg);
            return self.*;
        }

        pub fn setDragCursor(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "DRAGCURSOR", void, void, arg);
            return self.*;
        }

        pub fn setFont(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FONT", void, void, arg);
            return self.*;
        }

        pub fn setTouchCallback(self: *Initializer, callback: ?OnTouchFn) Initializer {
            const Handler = CallbackHandler(Self, OnTouchFn, "TOUCH_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// SCROLL_CB SCROLL_CB Called when some manipulation is made to the scrollbar.
        /// The canvas is automatically redrawn only if this callback is NOT defined.
        /// (GTK 2.8) Also the POSX and POSY values will not be correctly updated for
        /// older GTK versions.
        /// In Ubuntu, when liboverlay-scrollbar is enabled (the new tiny auto-hide
        /// scrollbar) only the IUP_SBPOSV and IUP_SBPOSH codes are used.
        /// Callback int function(Ihandle *ih, int op, float posx, float posy); [in C]
        /// ih:scroll_cb(op, posx, posy: number) -> (ret: number) [in Lua] ih:
        /// identifier of the element that activated the event.
        /// op: indicates the operation performed on the scrollbar.
        /// If the manipulation was made on the vertical scrollbar, it can have the
        /// following values: IUP_SBUP - line up IUP_SBDN - line down IUP_SBPGUP - page
        /// up IUP_SBPGDN - page down IUP_SBPOSV - vertical positioning IUP_SBDRAGV -
        /// vertical drag If it was on the horizontal scrollbar, the following values
        /// are valid: IUP_SBLEFT - column left IUP_SBRIGHT - column right IUP_SBPGLEFT
        /// - page left IUP_SBPGRIGHT - page right IUP_SBPOSH - horizontal positioning
        /// IUP_SBDRAGH - horizontal drag posx, posy: the same as the ACTION canvas
        /// callback (corresponding to the values of attributes POSX and POSY).
        /// Notes IUP_SBDRAGH and IUP_SBDRAGV are not supported in GTK.
        /// During drag IUP_SBPOSH and IUP_SBPOSV are used.
        /// In Windows, after a drag when mouse is released IUP_SBPOSH or IUP_SBPOSV
        /// are called.
        /// Affects IupCanvas, IupGLCanvas, SCROLLBAR
        pub fn setScrollCallback(self: *Initializer, callback: ?OnScrollFn) Initializer {
            const Handler = CallbackHandler(Self, OnScrollFn, "SCROLL_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setFocusCallback(self: *Initializer, callback: ?OnFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnFocusFn, "FOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// WOM_CB WOM_CB Action generated when an audio device receives an event.
        /// [Windows Only] Callback int function(Ihandle *ih, int state); [in C]
        /// ih:wom_cb(state: number) -> (ret: number) [in Lua] ih: identifies the
        /// element that activated the event.
        /// state: can be opening=1, done=0, or closing=-1.
        /// Notes This callback is used to syncronize video playback with audio.
        /// It is sent when the audio device: Message Description opening is opened by
        /// using the waveOutOpen function.
        /// done is finished with a data block sent by using the waveOutWrite function.
        /// closing is closed by using the waveOutClose function.
        /// You must use the HWND attribute when calling waveOutOpen in the dwCallback
        /// parameter and set fdwOpen to CALLBACK_WINDOW.
        /// Affects IupDialog, IupCanvas, IupGLCanvas
        pub fn setWomCallback(self: *Initializer, callback: ?OnWomFn) Initializer {
            const Handler = CallbackHandler(Self, OnWomFn, "WOM_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// K_ANY K_ANY Action generated when a keyboard event occurs.
        /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
        /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
        /// c: identifier of typed key.
        /// Please refer to the Keyboard Codes table for a list of possible values.
        /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
        /// the control and not propagated.
        /// If returns IUP_CONTINUE, the key will be processed and the event will be
        /// propagated to the parent of the element receiving it, this is the default behavior.
        /// If returns IUP_DEFAULT the key is processed but it is not propagated.
        /// IUP_CLOSE will be processed.
        /// Notes Keyboard callbacks depend on the keyboard usage of the control with
        /// the focus.
        /// So if you return IUP_IGNORE the control will usually not process the key.
        /// But be aware that sometimes the control process the key in another event so
        /// even returning IUP_IGNORE the key can get processed.
        /// Although it will not be propagated.
        /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
        /// the IUP_CONTINUE return value to work while the control is in focus.
        /// If the callback does not exists it is automatically propagated to the
        /// parent of the element.
        /// K_* callbacks All defined keys are also callbacks of any element, called
        /// when the respective key is activated.
        /// For example: "K_cC" is also a callback activated when the user press
        /// Ctrl+C, when the focus is at the element or at a children with focus.
        /// This is the way an application can create shortcut keys, also called hot keys.
        /// These callbacks are not available in IupLua.
        /// Affects All elements with keyboard interaction.
        pub fn setKAnyCallback(self: *Initializer, callback: ?OnKAnyFn) Initializer {
            const Handler = CallbackHandler(Self, OnKAnyFn, "K_ANY");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setFlatFocusCallback(self: *Initializer, callback: ?OnFlatFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnFlatFocusFn, "FLAT_FOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
        /// In Motif is also activated by the Help button in some workstations keyboard.
        /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Returns: IUP_CLOSE will be processed.
        /// Affects All elements with user interaction.
        pub fn setHelpCallback(self: *Initializer, callback: ?OnHelpFn) Initializer {
            const Handler = CallbackHandler(Self, OnHelpFn, "HELP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDropMotionCallback(self: *Initializer, callback: ?OnDropMotionFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropMotionFn, "DROPMOTION_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setFlatLeaveWindowCallback(self: *Initializer, callback: ?OnFlatLeaveWindowFn) Initializer {
            const Handler = CallbackHandler(Self, OnFlatLeaveWindowFn, "FLAT_LEAVEWINDOW_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// KEYPRESS_CB KEYPRESS_CB Action generated when a key is pressed or released.
        /// If the key is pressed and held several calls will occur.
        /// It is called after the callback K_ANY is processed.
        /// Callback int function(Ihandle *ih, int c, int press); [in C]
        /// ih:keypress_cb(c, press: number) -> (ret: number) [in Lua] ih: identifier
        /// of the element that activated the event.
        /// c: identifier of typed key.
        /// Please refer to the Keyboard Codes table for a list of possible values.
        /// press: 1 is the user pressed the key or 0 otherwise.
        /// Returns: If IUP_IGNORE is returned the key is ignored by the system.
        /// IUP_CLOSE will be processed.
        /// Affects IupCanvas
        pub fn setKeyPressCallback(self: *Initializer, callback: ?OnKeyPressFn) Initializer {
            const Handler = CallbackHandler(Self, OnKeyPressFn, "KEYPRESS_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDragEndCallback(self: *Initializer, callback: ?OnDragEndFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragEndFn, "DRAGEND_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDragBeginCallback(self: *Initializer, callback: ?OnDragBeginFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragBeginFn, "DRAGBEGIN_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// ACTION ACTION Action generated when the element is activated.
        /// Affects each element differently.
        /// Callback int function(Ihandle *ih); [in C] ih:action() -> (ret: number) [in
        /// Lua] ih: identifier of the element that activated the event.
        /// In some elements, this callback may receive more parameters, apart from ih.
        /// Please refer to each element's documentation.
        /// Affects IupButton, IupItem, IupList, IupText, IupCanvas, IupMultiline,
        /// IupToggle
        pub fn setActionCallback(self: *Initializer, callback: ?OnActionFn) Initializer {
            const Handler = CallbackHandler(Self, OnActionFn, "ACTION");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setMultiTouchCallback(self: *Initializer, callback: ?OnMultiTouchFn) Initializer {
            const Handler = CallbackHandler(Self, OnMultiTouchFn, "MULTITOUCH_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// MOTION_CB MOTION_CB Action generated when the mouse moves.
        /// Callback int function(Ihandle *ih, int x, int y, char *status); [in C]
        /// ih:motion_cb(x, y: number, status: string) -> (ret: number) [in Lua] ih:
        /// identifier of the element that activated the event.
        /// x, y: position in the canvas where the event has occurred, in pixels.
        /// status: status of mouse buttons and certain keyboard keys at the moment the
        /// event was generated.
        /// The same macros used for BUTTON_CB can be used for this status.
        /// Notes Between press and release all mouse events are redirected only to
        /// this control, even if the cursor moves outside the element.
        /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
        /// called with coordinates outside the element rectangle.
        /// Affects IupCanvas, IupGLCanvas
        pub fn setMotionCallback(self: *Initializer, callback: ?OnMotionFn) Initializer {
            const Handler = CallbackHandler(Self, OnMotionFn, "MOTION_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setFlatEnterWindowCallback(self: *Initializer, callback: ?OnFlatEnterWindowFn) Initializer {
            const Handler = CallbackHandler(Self, OnFlatEnterWindowFn, "FLAT_ENTERWINDOW_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// WHEEL_CB WHEEL_CB Action generated when the mouse wheel is rotated.
        /// If this callback is not defined the wheel will automatically scroll the
        /// canvas in the vertical direction by some lines, the SCROLL_CB callback if
        /// defined will be called with the IUP_SBDRAGV operation.
        /// Callback int function(Ihandle *ih, float delta, int x, int y, char
        /// *status); [in C] ih:wheel_cb(delta, x, y: number, status: string) -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// delta: the amount the wheel was rotated in notches.
        /// x, y: position in the canvas where the event has occurred, in pixels.
        /// status: status of mouse buttons and certain keyboard keys at the moment the
        /// event was generated.
        /// The same macros used for BUTTON_CB can be used for this status.
        /// Notes In Motif and GTK delta is always 1 or -1.
        /// In Windows is some situations delta can reach the value of two.
        /// In the future with more precise wheels this increment can be changed.
        /// Affects IupCanvas, IupGLCanvas
        pub fn setWheelCallback(self: *Initializer, callback: ?OnWheelFn) Initializer {
            const Handler = CallbackHandler(Self, OnWheelFn, "WHEEL_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
        /// updated in IupMap.
        /// When the element is a dialog, it is called after the layout is updated.
        /// For all other elements is called before the layout is updated, so the
        /// element current size will still be 0x0 during MAP_CB (since 3.14).
        /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
        /// Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setMapCallback(self: *Initializer, callback: ?OnMapFn) Initializer {
            const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setFlatButtonCallback(self: *Initializer, callback: ?OnFlatButtonFn) Initializer {
            const Handler = CallbackHandler(Self, OnFlatButtonFn, "FLAT_BUTTON_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
        /// native element.
        /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Notes When the cursor is moved from one element to another, the call order
        /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
        /// control followed by the ENTERWINDOW_CB callback of the new control.
        /// (since 3.14) If the mouse button is hold pressed and the cursor moves
        /// outside the element the behavior is system dependent.
        /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
        /// GTK the callbacks are called.
        /// Affects All controls with user interaction.
        /// See Also LEAVEWINDOW_CB
        pub fn setEnterWindowCallback(self: *Initializer, callback: ?OnEnterWindowFn) Initializer {
            const Handler = CallbackHandler(Self, OnEnterWindowFn, "ENTERWINDOW_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
        /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Notes If the dialog is visible then it is hidden before it is destroyed.
        /// The callback will be called right after it is hidden.
        /// The callback will be called before all other destroy procedures.
        /// For instance, if the element has children then it is called before the
        /// children are destroyed.
        /// For language binding implementations use the callback name "LDESTROY_CB" to
        /// release memory allocated by the binding for the element.
        /// Also the callback will be called before the language callback.
        /// Affects All.
        pub fn setDestroyCallback(self: *Initializer, callback: ?OnDestroyFn) Initializer {
            const Handler = CallbackHandler(Self, OnDestroyFn, "DESTROY_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDropDataCallback(self: *Initializer, callback: ?OnDropDataFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropDataFn, "DROPDATA_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
        /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
        /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Affects All elements with user interaction, except menus.
        /// In Windows, there are restrictions when using this callback.
        /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
        /// function calls that display or activate a window.
        /// This causes the thread to yield control and can cause the application to
        /// stop responding to messages.
        /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
        pub fn setKillFocusCallback(self: *Initializer, callback: ?OnKillFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnKillFocusFn, "KILLFOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDragDataCallback(self: *Initializer, callback: ?OnDragDataFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragDataFn, "DRAGDATA_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDragDataSizeCallback(self: *Initializer, callback: ?OnDragDataSizeFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragDataSizeFn, "DRAGDATASIZE_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// DROPFILES_CB DROPFILES_CB Action called when a file is "dropped" into the control.
        /// When several files are dropped at once, the callback is called several
        /// times, once for each file.
        /// If defined after the element is mapped then the attribute DROPFILESTARGET
        /// must be set to YES.
        /// [Windows and GTK Only] (GTK 2.6) Callback int function(Ihandle *ih, const
        /// char* filename, int num, int x, int y); [in C] ih:dropfiles_cb(filename:
        /// string; num, x, y: number) -> (ret: number) [in Lua] ih: identifier of the
        /// element that activated the event.
        /// filename: Name of the dropped file.
        /// num: Number index of the dropped file.
        /// If several files are dropped, num is the index of the dropped file starting
        /// from "total-1" to "0".
        /// x: X coordinate of the point where the user released the mouse button.
        /// y: Y coordinate of the point where the user released the mouse button.
        /// Returns: If IUP_IGNORE is returned the callback will NOT be called for the
        /// next dropped files, and the processing of dropped files will be interrupted.
        /// Affects IupDialog, IupCanvas, IupGLCanvas, IupText, IupList
        pub fn setDropFilesCallback(self: *Initializer, callback: ?OnDropFilesFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropFilesFn, "DROPFILES_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// RESIZE_CB RESIZE_CB Action generated when the canvas or dialog size is changed.
        /// Callback int function(Ihandle *ih, int width, int height); [in C]
        /// ih:resize_cb(width, height: number) -> (ret: number) [in Lua] ih:
        /// identifier of the element that activated the event.
        /// width: the width of the internal element size in pixels not considering the
        /// decorations (client size) height: the height of the internal element size
        /// in pixels not considering the decorations (client size) Notes For the
        /// dialog, this action is also generated when the dialog is mapped, after the
        /// map and before the show.
        /// When XAUTOHIDE=Yes or YAUTOHIDE=Yes, if the canvas scrollbar is
        /// hidden/shown after changing the DX or DY attributes from inside the
        /// callback, the size of the drawing area will immediately change, so the
        /// parameters with and height will be invalid.
        /// To update the parameters consult the DRAWSIZE attribute.
        /// Also activate the drawing toolkit only after updating the DX or DY attributes.
        /// Affects IupCanvas, IupGLCanvas, IupDialog
        pub fn setResizeCallback(self: *Initializer, callback: ?OnResizeFn) Initializer {
            const Handler = CallbackHandler(Self, OnResizeFn, "RESIZE_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
        /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setUnmapCallback(self: *Initializer, callback: ?OnUnmapFn) Initializer {
            const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// FLAT_ACTION: Action generated when the button 1 (usually left) is selected.
        /// This callback is called only after the mouse is released and when it is
        /// released inside the button area.
        /// int function(Ihandle* ih, int state); [in C]ih:action(state: number) ->
        /// (ret: number) [in Lua]
        pub fn setFlatActionCallback(self: *Initializer, callback: ?OnFlatActionFn) Initializer {
            const Handler = CallbackHandler(Self, OnFlatActionFn, "FLAT_ACTION");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
        /// This callback is called after the KILLFOCUS_CB of the element that loosed
        /// the focus.
        /// The IupGetFocus function during the callback returns the element that
        /// loosed the focus.
        /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that received keyboard focus.
        /// Affects All elements with user interaction, except menus.
        /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
        pub fn setGetFocusCallback(self: *Initializer, callback: ?OnGetFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnGetFocusFn, "GETFOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// BUTTON_CB BUTTON_CB Action generated when a mouse button is pressed or released.
        /// Callback int function(Ihandle* ih, int button, int pressed, int x, int y,
        /// char* status); [in C] ih:button_cb(button, pressed, x, y: number, status:
        /// string) -> (ret: number) [in Lua] ih: identifies the element that activated
        /// the event.
        /// button: identifies the activated mouse button: IUP_BUTTON1 - left mouse
        /// button (button 1); IUP_BUTTON2 - middle mouse button (button 2);
        /// IUP_BUTTON3 - right mouse button (button 3).
        /// pressed: indicates the state of the button: 0 - mouse button was released;
        /// 1 - mouse button was pressed.
        /// x, y: position in the canvas where the event has occurred, in pixels.
        /// status: status of the mouse buttons and some keyboard keys at the moment
        /// the event is generated.
        /// The following macros must be used for verification: iup_isshift(status)
        /// iup_iscontrol(status) iup_isbutton1(status) iup_isbutton2(status)
        /// iup_isbutton3(status) iup_isbutton4(status) iup_isbutton5(status)
        /// iup_isdouble(status) iup_isalt(status) iup_issys(status) They return 1 if
        /// the respective key or button is pressed, and 0 otherwise.
        /// These macros are also available in Lua, returning a boolean.
        /// Returns: IUP_CLOSE will be processed.
        /// On some controls if IUP_IGNORE is returned the action is ignored (this is
        /// system dependent).
        /// Notes This callback can be used to customize a button behavior.
        /// For a standard button behavior use the ACTION callback of the IupButton.
        /// For a single click the callback is called twice, one for pressed=1 and one
        /// for pressed=0.
        /// Only after both calls the ACTION callback is called.
        /// In Windows, if a dialog is shown or popup in any situation there could be
        /// unpredictable results because the native system still has processing to be
        /// done even after the callback is called.
        /// A double click is preceded by two single clicks, one for pressed=1 and one
        /// for pressed=0, and followed by a press=0, all three without the double
        /// click flag set.
        /// In GTK, it is preceded by an additional two single clicks sequence.
        /// For example, for one double click all the following calls are made:
        /// BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) BUTTON_CB(but=1 (0), x=154, y=83 [
        /// 1 ]) BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1
        /// (0), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1 (1), x=154, y=83 [ 1
        /// D ]) BUTTON_CB(but=1 (0), x=154, y=83 [ 1 ]) Between press and release all
        /// mouse events are redirected only to this control, even if the cursor moves
        /// outside the element.
        /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
        /// called with coordinates outside the element rectangle.
        /// Affects IupCanvas, IupButton, IupText, IupList, IupGLCanvas
        pub fn setButtonCallback(self: *Initializer, callback: ?OnButtonFn) Initializer {
            const Handler = CallbackHandler(Self, OnButtonFn, "BUTTON_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setFlatMotionCallback(self: *Initializer, callback: ?OnFlatMotionFn) Initializer {
            const Handler = CallbackHandler(Self, OnFlatMotionFn, "FLAT_MOTION_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// VALUECHANGED_CB: Called after the value was interactively changed by the user.
        /// Called after the ACTION callback, but under the same context.
        /// int function(Ihandle *ih); [in C]ih:valuechanged_cb() -> (ret: number) [in
        /// Lua]
        pub fn setValueChangedCallback(self: *Initializer, callback: ?OnValueChangedFn) Initializer {
            const Handler = CallbackHandler(Self, OnValueChangedFn, "VALUECHANGED_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setLDestroyCallback(self: *Initializer, callback: ?OnLDestroyFn) Initializer {
            const Handler = CallbackHandler(Self, OnLDestroyFn, "LDESTROY_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
        /// native element.
        /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Notes When the cursor is moved from one element to another, the call order
        /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
        /// control followed by the ENTERWINDOW_CB callback of the new control.
        /// (since 3.14) If the mouse button is hold pressed and the cursor moves
        /// outside the element the behavior is system dependent.
        /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
        /// GTK the callbacks are called.
        /// Affects All controls with user interaction.
        /// See Also ENTERWINDOW_CB
        pub fn setLeaveWindowCallback(self: *Initializer, callback: ?OnLeaveWindowFn) Initializer {
            const Handler = CallbackHandler(Self, OnLeaveWindowFn, "LEAVEWINDOW_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setPostMessageCallback(self: *Initializer, callback: ?OnPostMessageFn) Initializer {
            const Handler = CallbackHandler(Self, OnPostMessageFn, "POSTMESSAGE_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }
    };

    ///
    /// Creates an interface element given its class name and parameters.
    /// After creation the element still needs to be attached to a container and mapped to the native system so it can be visible.
    pub fn init() Initializer {
        var handle = c.IupCreate(Self.CLASS_NAME);

        if (handle) |valid| {
            return .{
                .ref = @ptrCast(*Self, valid),
            };
        } else {
            return .{ .ref = undefined, .last_error = Error.NotInitialized };
        }
    }

    /// 
    /// Destroys an interface element and all its children.
    /// Only dialogs, timers, popup menus and images should be normally destroyed, but detached elements can also be destroyed.        
    pub fn deinit(self: *Self) void {
        c.IupDestroy(c.getHandle(self));
    }

    pub fn setStrAttribute(self: *Self, attributeName: [:0]const u8, arg: [:0]const u8) void {
        c.setStrAttribute(self, attributeName, void, void, arg);
    }

    pub fn getStrAttribute(self: *Self, attributeName: [:0]const u8) [:0]const u8 {
        return c.getStrAttribute(self, attributeName, void, void);
    }

    pub fn setIntAttribute(self: *Self, attributeName: [:0]const u8, arg: i32) void {
        c.setIntAttribute(self, attributeName, void, void, arg);
    }

    pub fn getIntAttribute(self: *Self, attributeName: [:0]const u8) i32 {
        return c.getIntAttribute(self, attributeName, void, void);
    }

    pub fn setBoolAttribute(self: *Self, attributeName: [:0]const u8, arg: bool) void {
        c.setBoolAttribute(self, attributeName, void, void, arg);
    }

    pub fn getBoolAttribute(self: *Self, attributeName: [:0]const u8) bool {
        return c.getBoolAttribute(self, attributeName, void, void);
    }

    pub fn getPtrAttribute(handle: *Self, comptime T: type, attributeName: [:0]const u8) ?*T {
        return c.getPtrAttribute(T, handle, attributeName, void, void);
    }

    pub fn setPtrAttribute(handle: *Self, comptime T: type, attributeName: [:0]const u8, value: ?*T) void {
        c.setPtrAttribute(T, handle, attributeName, void, void, value);
    }

    ///
    ///
    pub fn getDialog(self: *Self) ?*iup.Dialog {
        if (c.IupGetDialog(c.getHandle(self))) |handle| {
            return c.fromHandle(iup.Dialog, handle);
        } else {
            return null;
        }
    }

    ///
    /// Returns the the child element that has the NAME attribute equals to the given value on the same dialog hierarchy.
    /// Works also for children of a menu that is associated with a dialog.
    pub fn getDialogChild(self: *Self, byName: [:0]const u8) ?Element {
        var child = c.IupGetDialogChild(c.getHandle(self), c.toCStr(byName)) orelse return null;
        var className = c.fromCStr(c.IupGetClassName(child));

        return Element.fromClassName(className, child);
    }

    ///
    /// Updates the size and layout of all controls in the same dialog.
    /// To be used after changing size attributes, or attributes that affect the size of the control. Can be used for any element inside a dialog, but the layout of the dialog and all controls will be updated. It can change the layout of all the controls inside the dialog because of the dynamic layout positioning.
    pub fn refresh(self: *Self) void {
        try Impl(Self).refresh(self);
    }


    /// 
    /// FGCOLOR: Text color.
    /// Default: the global attribute DLGFGCOLOR.
    pub fn getFgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "FGCOLOR", void, void);
    }


    /// 
    /// FGCOLOR: Text color.
    /// Default: the global attribute DLGFGCOLOR.
    pub fn setFgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "FGCOLOR", void, void, rgb);
    }

    pub fn getTipBalloon(self: *Self) bool {
        return c.getBoolAttribute(self, "TIPBALLOON", void, void);
    }

    pub fn setTipBalloon(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TIPBALLOON", void, void, arg);
    }

    pub fn getHandleName(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "HANDLENAME", void, void);
    }

    pub fn setHandleName(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "HANDLENAME", void, void, arg);
    }

    pub fn getTipBgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "TIPBGCOLOR", void, void);
    }

    pub fn setTipBgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "TIPBGCOLOR", void, void, rgb);
    }


    /// 
    /// HASFOCUS (read-only): returns the button state if has focus.
    /// Can be Yes or No.
    pub fn getHasFocus(self: *Self) bool {
        return c.getBoolAttribute(self, "HASFOCUS", void, void);
    }

    pub fn getXMin(self: *Self) i32 {
        return c.getIntAttribute(self, "XMIN", void, void);
    }

    pub fn setXMin(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "XMIN", void, void, arg);
    }

    pub fn getMaxSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "MAXSIZE", void, void);
        return Size.parse(str);
    }

    pub fn setMaxSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "MAXSIZE", void, void, value);
    }

    pub fn getDrawTextWrap(self: *Self) bool {
        return c.getBoolAttribute(self, "DRAWTEXTWRAP", void, void);
    }

    pub fn setDrawTextWrap(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DRAWTEXTWRAP", void, void, arg);
    }

    pub fn getDrawUsedIRect2d(self: *Self) bool {
        return c.getBoolAttribute(self, "DRAWUSEDIRECT2D", void, void);
    }

    pub fn setDrawUsedIRect2d(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DRAWUSEDIRECT2D", void, void, arg);
    }

    pub fn getScreenPosition(self: *Self) iup.XYPos {
        var str = c.getStrAttribute(self, "SCREENPOSITION", void, void);
        return iup.XYPos.parse(str, ',');
    }


    /// 
    /// FOCUSFEEDBACK (non inheritable): draw the focus feedback.
    /// Can be Yes or No.
    /// Default: Yes.
    /// (since 3.26)
    pub fn getFocusFeedback(self: *Self) bool {
        return c.getBoolAttribute(self, "FOCUSFEEDBACK", void, void);
    }


    /// 
    /// FOCUSFEEDBACK (non inheritable): draw the focus feedback.
    /// Can be Yes or No.
    /// Default: Yes.
    /// (since 3.26)
    pub fn setFocusFeedback(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "FOCUSFEEDBACK", void, void, arg);
    }

    pub fn getPosition(self: *Self) iup.XYPos {
        var str = c.getStrAttribute(self, "POSITION", void, void);
        return iup.XYPos.parse(str, ',');
    }

    pub fn setPosition(self: *Self, x: i32, y: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
        c.setStrAttribute(self, "POSITION", void, void, value);
    }

    pub fn getDropFilesTarget(self: *Self) bool {
        return c.getBoolAttribute(self, "DROPFILESTARGET", void, void);
    }

    pub fn setDropFilesTarget(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DROPFILESTARGET", void, void, arg);
    }

    pub fn getDrawTextAlignment(self: *Self) ?DrawTextAlignment {
        var ret = c.getStrAttribute(self, "DRAWTEXTALIGNMENT", void, void);

        if (std.ascii.eqlIgnoreCase("ACENTER", ret)) return .ACenter;
        if (std.ascii.eqlIgnoreCase("ARIGHT", ret)) return .ARight;
        if (std.ascii.eqlIgnoreCase("ALEFT", ret)) return .ALeft;
        return null;
    }

    pub fn setDrawTextAlignment(self: *Self, arg: ?DrawTextAlignment) void {
        if (arg) |value| switch (value) {
            .ACenter => c.setStrAttribute(self, "DRAWTEXTALIGNMENT", void, void, "ACENTER"),
            .ARight => c.setStrAttribute(self, "DRAWTEXTALIGNMENT", void, void, "ARIGHT"),
            .ALeft => c.setStrAttribute(self, "DRAWTEXTALIGNMENT", void, void, "ALEFT"),
        } else {
            c.clearAttribute(self, "DRAWTEXTALIGNMENT", void, void);
        }
    }

    pub fn getTip(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "TIP", void, void);
    }

    pub fn setTip(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "TIP", void, void, arg);
    }

    pub fn getDrawTextLayoutCenter(self: *Self) bool {
        return c.getBoolAttribute(self, "DRAWTEXTLAYOUTCENTER", void, void);
    }

    pub fn setDrawTextLayoutCenter(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DRAWTEXTLAYOUTCENTER", void, void, arg);
    }

    pub fn getDragSourceMove(self: *Self) bool {
        return c.getBoolAttribute(self, "DRAGSOURCEMOVE", void, void);
    }

    pub fn setDragSourceMove(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DRAGSOURCEMOVE", void, void, arg);
    }


    /// 
    /// PSCOLOR: background color used to indicate a press state.
    /// Pre-defined to "150 200 235".
    /// Can be set to NULL.
    /// If NULL BGCOLOR will be used instead.
    pub fn getPsColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "PSCOLOR", void, void);
    }


    /// 
    /// PSCOLOR: background color used to indicate a press state.
    /// Pre-defined to "150 200 235".
    /// Can be set to NULL.
    /// If NULL BGCOLOR will be used instead.
    pub fn setPsColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "PSCOLOR", void, void, rgb);
    }

    pub fn getVisible(self: *Self) bool {
        return c.getBoolAttribute(self, "VISIBLE", void, void);
    }

    pub fn setVisible(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "VISIBLE", void, void, arg);
    }


    /// 
    /// IMAGE (non inheritable): Image name.
    /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
    /// See also IupImage.
    pub fn getImage(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "IMAGE", void, void);
    }


    /// 
    /// IMAGE (non inheritable): Image name.
    /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
    /// See also IupImage.
    pub fn setImage(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "IMAGE", void, void, arg);
    }

    pub fn getLineX(self: *Self) f64 {
        return c.getDoubleAttribute(self, "LINEX", void, void);
    }

    pub fn setLineX(self: *Self, arg: f64) void {
        c.setDoubleAttribute(self, "LINEX", void, void, arg);
    }

    pub fn getCursor(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "CURSOR", void, void);
    }

    pub fn setCursor(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "CURSOR", void, void, arg);
    }

    pub fn getLineY(self: *Self) f64 {
        return c.getDoubleAttribute(self, "LINEY", void, void);
    }

    pub fn setLineY(self: *Self, arg: f64) void {
        c.setDoubleAttribute(self, "LINEY", void, void, arg);
    }

    pub fn zOrder(self: *Self, arg: ?ZOrder) void {
        if (arg) |value| switch (value) {
            .Top => c.setStrAttribute(self, "ZORDER", void, void, "TOP"),
            .Bottom => c.setStrAttribute(self, "ZORDER", void, void, "BOTTOM"),
        } else {
            c.clearAttribute(self, "ZORDER", void, void);
        }
    }

    pub fn getDrawLineWidth(self: *Self) i32 {
        return c.getIntAttribute(self, "DRAWLINEWIDTH", void, void);
    }

    pub fn setDrawLineWidth(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "DRAWLINEWIDTH", void, void, arg);
    }

    pub fn getX(self: *Self) i32 {
        return c.getIntAttribute(self, "X", void, void);
    }

    pub fn getY(self: *Self) i32 {
        return c.getIntAttribute(self, "Y", void, void);
    }

    pub fn getDragDrop(self: *Self) bool {
        return c.getBoolAttribute(self, "DRAGDROP", void, void);
    }

    pub fn setDragDrop(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DRAGDROP", void, void, arg);
    }

    pub fn getDrawAntialias(self: *Self) i32 {
        return c.getIntAttribute(self, "DRAWANTIALIAS", void, void);
    }

    pub fn setDrawAntialias(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "DRAWANTIALIAS", void, void, arg);
    }

    pub fn getTheme(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "THEME", void, void);
    }

    pub fn setTheme(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "THEME", void, void, arg);
    }

    pub fn getDragCursorCopy(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "DRAGCURSORCOPY", void, void);
    }

    pub fn setDragCursorCopy(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "DRAGCURSORCOPY", void, void, arg);
    }

    pub fn getHtTransparent(self: *Self) bool {
        return c.getBoolAttribute(self, "HTTRANSPARENT", void, void);
    }

    pub fn setHtTransparent(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "HTTRANSPARENT", void, void, arg);
    }


    /// 
    /// EXPAND (non inheritable): The default value is "NO".
    pub fn getExpand(self: *Self) ?Expand {
        var ret = c.getStrAttribute(self, "EXPAND", void, void);

        if (std.ascii.eqlIgnoreCase("YES", ret)) return .Yes;
        if (std.ascii.eqlIgnoreCase("HORIZONTAL", ret)) return .Horizontal;
        if (std.ascii.eqlIgnoreCase("VERTICAL", ret)) return .Vertical;
        if (std.ascii.eqlIgnoreCase("HORIZONTALFREE", ret)) return .HorizontalFree;
        if (std.ascii.eqlIgnoreCase("VERTICALFREE", ret)) return .VerticalFree;
        if (std.ascii.eqlIgnoreCase("NO", ret)) return .No;
        return null;
    }


    /// 
    /// EXPAND (non inheritable): The default value is "NO".
    pub fn setExpand(self: *Self, arg: ?Expand) void {
        if (arg) |value| switch (value) {
            .Yes => c.setStrAttribute(self, "EXPAND", void, void, "YES"),
            .Horizontal => c.setStrAttribute(self, "EXPAND", void, void, "HORIZONTAL"),
            .Vertical => c.setStrAttribute(self, "EXPAND", void, void, "VERTICAL"),
            .HorizontalFree => c.setStrAttribute(self, "EXPAND", void, void, "HORIZONTALFREE"),
            .VerticalFree => c.setStrAttribute(self, "EXPAND", void, void, "VERTICALFREE"),
            .No => c.setStrAttribute(self, "EXPAND", void, void, "NO"),
        } else {
            c.clearAttribute(self, "EXPAND", void, void);
        }
    }

    pub fn getDrawFont(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "DRAWFONT", void, void);
    }

    pub fn setDrawFont(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "DRAWFONT", void, void, arg);
    }

    pub fn getSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "SIZE", void, void);
        return Size.parse(str);
    }

    pub fn setSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "SIZE", void, void, value);
    }


    /// 
    /// PADDING: internal margin.
    /// Works just like the MARGIN attribute of the IupHbox and IupVbox containers,
    /// but uses a different name to avoid inheritance problems.
    /// Alignment does not includes the padding area.
    /// Default value: "0x0".
    /// Value can be DEFAULTBUTTONPADDING, so the global attribute of this name
    /// will be used instead (since 3.29).
    /// The natural size will be a combination of the size of the image and the
    /// title, if any, plus PADDING and SPACING (if both image and title are
    /// present), and the check box if visible.
    pub fn getPadding(self: *Self) Size {
        var str = c.getStrAttribute(self, "PADDING", void, void);
        return Size.parse(str);
    }


    /// 
    /// PADDING: internal margin.
    /// Works just like the MARGIN attribute of the IupHbox and IupVbox containers,
    /// but uses a different name to avoid inheritance problems.
    /// Alignment does not includes the padding area.
    /// Default value: "0x0".
    /// Value can be DEFAULTBUTTONPADDING, so the global attribute of this name
    /// will be used instead (since 3.29).
    /// The natural size will be a combination of the size of the image and the
    /// title, if any, plus PADDING and SPACING (if both image and title are
    /// present), and the check box if visible.
    pub fn setPadding(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "PADDING", void, void, value);
    }

    pub fn getPosX(self: *Self) f64 {
        return c.getDoubleAttribute(self, "POSX", void, void);
    }

    pub fn setPosX(self: *Self, arg: f64) void {
        c.setDoubleAttribute(self, "POSX", void, void, arg);
    }

    pub fn getPosY(self: *Self) f64 {
        return c.getDoubleAttribute(self, "POSY", void, void);
    }

    pub fn setPosY(self: *Self, arg: f64) void {
        c.setDoubleAttribute(self, "POSY", void, void, arg);
    }

    pub fn getWId(self: *Self) i32 {
        return c.getIntAttribute(self, "WID", void, void);
    }


    /// 
    /// BORDERHLCOLOR: color used for borders when highlighted.
    /// Default use BORDERCOLOR.
    pub fn getBorderHlColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "BORDERHLCOLOR", void, void);
    }


    /// 
    /// BORDERHLCOLOR: color used for borders when highlighted.
    /// Default use BORDERCOLOR.
    pub fn setBorderHlColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "BORDERHLCOLOR", void, void, rgb);
    }


    /// 
    /// TEXTHLCOLOR: text color used to indicate a highlight state.
    /// If not defined FGCOLOR will be used instead.
    /// (since 3.26)
    pub fn getTextHlColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "TEXTHLCOLOR", void, void);
    }


    /// 
    /// TEXTHLCOLOR: text color used to indicate a highlight state.
    /// If not defined FGCOLOR will be used instead.
    /// (since 3.26)
    pub fn setTextHlColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "TEXTHLCOLOR", void, void, rgb);
    }

    pub fn getYMin(self: *Self) i32 {
        return c.getIntAttribute(self, "YMIN", void, void);
    }

    pub fn setYMin(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "YMIN", void, void, arg);
    }


    /// 
    /// TEXTELLIPSIS (non inheritable): If the text is larger that its box, an
    /// ellipsis ("...") will be placed near the last visible part of the text and
    /// replace the invisible part.
    /// It will be ignored when TEXTWRAP=Yes.
    /// (since 3.25)
    pub fn getTextEllipsis(self: *Self) bool {
        return c.getBoolAttribute(self, "TEXTELLIPSIS", void, void);
    }


    /// 
    /// TEXTELLIPSIS (non inheritable): If the text is larger that its box, an
    /// ellipsis ("...") will be placed near the last visible part of the text and
    /// replace the invisible part.
    /// It will be ignored when TEXTWRAP=Yes.
    /// (since 3.25)
    pub fn setTextEllipsis(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TEXTELLIPSIS", void, void, arg);
    }

    pub fn getDrawMakeInactive(self: *Self) bool {
        return c.getBoolAttribute(self, "DRAWMAKEINACTIVE", void, void);
    }

    pub fn setDrawMakeInactive(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DRAWMAKEINACTIVE", void, void, arg);
    }

    pub fn getFontSize(self: *Self) i32 {
        return c.getIntAttribute(self, "FONTSIZE", void, void);
    }

    pub fn setFontSize(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "FONTSIZE", void, void, arg);
    }

    pub fn getNaturalSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "NATURALSIZE", void, void);
        return Size.parse(str);
    }

    pub fn getDropTypes(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "DROPTYPES", void, void);
    }

    pub fn setDropTypes(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "DROPTYPES", void, void, arg);
    }

    pub fn getUserSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "USERSIZE", void, void);
        return Size.parse(str);
    }

    pub fn setUserSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "USERSIZE", void, void, value);
    }

    pub fn getTipDelay(self: *Self) i32 {
        return c.getIntAttribute(self, "TIPDELAY", void, void);
    }

    pub fn setTipDelay(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "TIPDELAY", void, void, arg);
    }

    pub fn getScrollBar(self: *Self) bool {
        return c.getBoolAttribute(self, "SCROLLBAR", void, void);
    }

    pub fn setScrollBar(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "SCROLLBAR", void, void, arg);
    }

    pub fn getDragStart(self: *Self) iup.XYPos {
        var str = c.getStrAttribute(self, "DRAGSTART", void, void);
        return iup.XYPos.parse(str, ',');
    }

    pub fn setDragStart(self: *Self, x: i32, y: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
        c.setStrAttribute(self, "DRAGSTART", void, void, value);
    }

    pub fn getXHidden(self: *Self) bool {
        return c.getBoolAttribute(self, "XHIDDEN", void, void);
    }


    /// 
    /// TITLE (non inheritable): toggle text.
    /// The '\n' character is accepted for line change.
    pub fn getTitle(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "TITLE", void, void);
    }


    /// 
    /// TITLE (non inheritable): toggle text.
    /// The '\n' character is accepted for line change.
    pub fn setTitle(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "TITLE", void, void, arg);
    }

    pub fn getXAutoHide(self: *Self) bool {
        return c.getBoolAttribute(self, "XAUTOHIDE", void, void);
    }

    pub fn setXAutoHide(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "XAUTOHIDE", void, void, arg);
    }


    /// 
    /// RADIO (read-only): returns if the toggle is inside a radio.
    /// Can be "YES" or "NO".
    pub fn getRadio(self: *Self) bool {
        return c.getBoolAttribute(self, "RADIO", void, void);
    }


    /// 
    /// PROPAGATEFOCUS (non inheritable): enables the focus callback forwarding to
    /// the next native parent with FOCUS_CB defined.
    /// Default: NO.
    pub fn getPropagateFocus(self: *Self) bool {
        return c.getBoolAttribute(self, "PROPAGATEFOCUS", void, void);
    }


    /// 
    /// PROPAGATEFOCUS (non inheritable): enables the focus callback forwarding to
    /// the next native parent with FOCUS_CB defined.
    /// Default: NO.
    pub fn setPropagateFocus(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "PROPAGATEFOCUS", void, void, arg);
    }

    pub fn getXMax(self: *Self) i32 {
        return c.getIntAttribute(self, "XMAX", void, void);
    }

    pub fn setXMax(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "XMAX", void, void, arg);
    }


    /// 
    /// BGCOLOR: Background color.
    /// If text and image are not defined, the button is configured to simply show
    /// a color, in this case set the button size because the natural size will be
    /// very small.
    /// If not defined it will use the background color of the native parent.
    pub fn getBgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "BGCOLOR", void, void);
    }


    /// 
    /// BGCOLOR: Background color.
    /// If text and image are not defined, the button is configured to simply show
    /// a color, in this case set the button size because the natural size will be
    /// very small.
    /// If not defined it will use the background color of the native parent.
    pub fn setBgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "BGCOLOR", void, void, rgb);
    }

    pub fn getTipBalloonTitle(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "TIPBALLOONTITLE", void, void);
    }

    pub fn setTipBalloonTitle(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "TIPBALLOONTITLE", void, void, arg);
    }

    pub fn getDropTarget(self: *Self) bool {
        return c.getBoolAttribute(self, "DROPTARGET", void, void);
    }

    pub fn setDropTarget(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DROPTARGET", void, void, arg);
    }


    /// 
    /// HIGHLIGHTED (read-only): returns the button state if highlighted.
    /// Can be Yes or No.
    pub fn getHighlightEd(self: *Self) bool {
        return c.getBoolAttribute(self, "HIGHLIGHTED", void, void);
    }

    pub fn getDX(self: *Self) f64 {
        return c.getDoubleAttribute(self, "DX", void, void);
    }

    pub fn setDX(self: *Self, arg: f64) void {
        c.setDoubleAttribute(self, "DX", void, void, arg);
    }

    pub fn getDY(self: *Self) f64 {
        return c.getDoubleAttribute(self, "DY", void, void);
    }

    pub fn setDY(self: *Self, arg: f64) void {
        c.setDoubleAttribute(self, "DY", void, void, arg);
    }

    pub fn getDrawTextEllipsis(self: *Self) bool {
        return c.getBoolAttribute(self, "DRAWTEXTELLIPSIS", void, void);
    }

    pub fn setDrawTextEllipsis(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DRAWTEXTELLIPSIS", void, void, arg);
    }

    pub fn getDragSource(self: *Self) bool {
        return c.getBoolAttribute(self, "DRAGSOURCE", void, void);
    }

    pub fn setDragSource(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DRAGSOURCE", void, void, arg);
    }

    pub fn getDrawTextClip(self: *Self) bool {
        return c.getBoolAttribute(self, "DRAWTEXTCLIP", void, void);
    }

    pub fn setDrawTextClip(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DRAWTEXTCLIP", void, void, arg);
    }

    pub fn getFloating(self: *Self) ?Floating {
        var ret = c.getStrAttribute(self, "FLOATING", void, void);

        if (std.ascii.eqlIgnoreCase("YES", ret)) return .Yes;
        if (std.ascii.eqlIgnoreCase("IGNORE", ret)) return .Ignore;
        if (std.ascii.eqlIgnoreCase("NO", ret)) return .No;
        return null;
    }

    pub fn setFloating(self: *Self, arg: ?Floating) void {
        if (arg) |value| switch (value) {
            .Yes => c.setStrAttribute(self, "FLOATING", void, void, "YES"),
            .Ignore => c.setStrAttribute(self, "FLOATING", void, void, "IGNORE"),
            .No => c.setStrAttribute(self, "FLOATING", void, void, "NO"),
        } else {
            c.clearAttribute(self, "FLOATING", void, void);
        }
    }

    pub fn getNormalizerGroup(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "NORMALIZERGROUP", void, void);
    }

    pub fn setNormalizerGroup(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "NORMALIZERGROUP", void, void, arg);
    }


    /// 
    /// SPACING (non inheritable): spacing between the image and the text.
    /// Default: "2".
    /// The natural size will be a combination of the size of the image and the
    /// title, if any, plus PADDING and SPACING (if both image and title are
    /// present), and the check box if visible.
    pub fn getSpacing(self: *Self) i32 {
        return c.getIntAttribute(self, "SPACING", void, void);
    }


    /// 
    /// SPACING (non inheritable): spacing between the image and the text.
    /// Default: "2".
    /// The natural size will be a combination of the size of the image and the
    /// title, if any, plus PADDING and SPACING (if both image and title are
    /// present), and the check box if visible.
    pub fn setSpacing(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "SPACING", void, void, arg);
    }


    /// 
    /// BORDERPSCOLOR: color used for borders when pressed or selected.
    /// Default use BORDERCOLOR.
    pub fn getBorderPsColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "BORDERPSCOLOR", void, void);
    }


    /// 
    /// BORDERPSCOLOR: color used for borders when pressed or selected.
    /// Default use BORDERCOLOR.
    pub fn setBorderPsColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "BORDERPSCOLOR", void, void, rgb);
    }

    pub fn getRasterSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "RASTERSIZE", void, void);
        return Size.parse(str);
    }

    pub fn setRasterSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "RASTERSIZE", void, void, value);
    }


    /// 
    /// TEXTPSCOLOR: text color used to indicate a press state.
    /// If not defined FGCOLOR will be used instead.
    /// (since 3.26)
    pub fn getTextPsColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "TEXTPSCOLOR", void, void);
    }


    /// 
    /// TEXTPSCOLOR: text color used to indicate a press state.
    /// If not defined FGCOLOR will be used instead.
    /// (since 3.26)
    pub fn setTextPsColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "TEXTPSCOLOR", void, void, rgb);
    }


    /// 
    /// BORDERCOLOR: color used for borders.
    /// Default: "50 150 255".
    /// This is for the IupFlatToggle drawn border.
    pub fn getBorderColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "BORDERCOLOR", void, void);
    }


    /// 
    /// BORDERCOLOR: color used for borders.
    /// Default: "50 150 255".
    /// This is for the IupFlatToggle drawn border.
    pub fn setBorderColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "BORDERCOLOR", void, void, rgb);
    }

    pub fn getTipFgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "TIPFGCOLOR", void, void);
    }

    pub fn setTipFgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "TIPFGCOLOR", void, void, rgb);
    }

    pub fn getYHidden(self: *Self) bool {
        return c.getBoolAttribute(self, "YHIDDEN", void, void);
    }

    pub fn getControlId(self: *Self) i32 {
        return c.getIntAttribute(self, "CONTROLID", void, void);
    }

    pub fn setControlId(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "CONTROLID", void, void, arg);
    }


    /// 
    /// CSPACING: same as SPACING but using the units of the vertical part of the
    /// SIZE attribute.
    /// It will actually set the SPACING attribute.
    /// (since 3.29)
    pub fn getCSpacing(self: *Self) i32 {
        return c.getIntAttribute(self, "CSPACING", void, void);
    }


    /// 
    /// CSPACING: same as SPACING but using the units of the vertical part of the
    /// SIZE attribute.
    /// It will actually set the SPACING attribute.
    /// (since 3.29)
    pub fn setCSpacing(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "CSPACING", void, void, arg);
    }

    pub fn getDrawSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "DRAWSIZE", void, void);
        return Size.parse(str);
    }


    /// 
    /// HLCOLOR: background color used to indicate a highlight state.
    /// Pre-defined to "200 225 245".
    /// Can be set to NULL.
    /// If NULL BGCOLOR will be used instead.
    pub fn getHlColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "HLCOLOR", void, void);
    }


    /// 
    /// HLCOLOR: background color used to indicate a highlight state.
    /// Pre-defined to "200 225 245".
    /// Can be set to NULL.
    /// If NULL BGCOLOR will be used instead.
    pub fn setHlColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "HLCOLOR", void, void, rgb);
    }


    /// 
    /// FRONTIMAGE (non inheritable): image name to be used as foreground.
    /// The foreground image is drawn in the same position as the background, but
    /// it is drawn at last.
    /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
    /// See also IupImage.
    pub fn getFrontImage(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FRONTIMAGE", void, void);
    }


    /// 
    /// FRONTIMAGE (non inheritable): image name to be used as foreground.
    /// The foreground image is drawn in the same position as the background, but
    /// it is drawn at last.
    /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
    /// See also IupImage.
    pub fn setFrontImage(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FRONTIMAGE", void, void, arg);
    }

    pub fn getFontFace(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FONTFACE", void, void);
    }

    pub fn setFontFace(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FONTFACE", void, void, arg);
    }

    pub fn getDrawColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "DRAWCOLOR", void, void);
    }

    pub fn setDrawColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "DRAWCOLOR", void, void, rgb);
    }

    pub fn getDrawTextOrientation(self: *Self) f64 {
        return c.getDoubleAttribute(self, "DRAWTEXTORIENTATION", void, void);
    }

    pub fn setDrawTextOrientation(self: *Self, arg: f64) void {
        c.setDoubleAttribute(self, "DRAWTEXTORIENTATION", void, void, arg);
    }

    pub fn getDrawBgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "DRAWBGCOLOR", void, void);
    }

    pub fn setDrawBgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "DRAWBGCOLOR", void, void, rgb);
    }

    pub fn getName(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "NAME", void, void);
    }

    pub fn setName(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "NAME", void, void, arg);
    }

    pub fn getBackingStore(self: *Self) bool {
        return c.getBoolAttribute(self, "BACKINGSTORE", void, void);
    }

    pub fn setBackingStore(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "BACKINGSTORE", void, void, arg);
    }

    pub fn getDrawDriver(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "DRAWDRIVER", void, void);
    }

    pub fn getTipBalloonTitleIcon(self: *Self) bool {
        return c.getBoolAttribute(self, "TIPBALLOONTITLEICON", void, void);
    }

    pub fn setTipBalloonTitleIcon(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TIPBALLOONTITLEICON", void, void, arg);
    }

    pub fn getYAutoHide(self: *Self) bool {
        return c.getBoolAttribute(self, "YAUTOHIDE", void, void);
    }

    pub fn setYAutoHide(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "YAUTOHIDE", void, void, arg);
    }

    pub fn getDrawStyle(self: *Self) ?DrawStyle {
        var ret = c.getStrAttribute(self, "DRAWSTYLE", void, void);

        if (std.ascii.eqlIgnoreCase("FILL", ret)) return .Fill;
        if (std.ascii.eqlIgnoreCase("STROKE_DASH", ret)) return .StrokeDash;
        if (std.ascii.eqlIgnoreCase("STROKE_DOT", ret)) return .StrokeDot;
        if (std.ascii.eqlIgnoreCase("STROKE_DASH_DOT", ret)) return .StrokeDashDot;
        if (std.ascii.eqlIgnoreCase("STROKE_DASH_DOT_DOT", ret)) return .StrokeDashDotdot;
        if (std.ascii.eqlIgnoreCase("DRAW_STROKE", ret)) return .DrawStroke;
        return null;
    }

    pub fn setDrawStyle(self: *Self, arg: ?DrawStyle) void {
        if (arg) |value| switch (value) {
            .Fill => c.setStrAttribute(self, "DRAWSTYLE", void, void, "FILL"),
            .StrokeDash => c.setStrAttribute(self, "DRAWSTYLE", void, void, "STROKE_DASH"),
            .StrokeDot => c.setStrAttribute(self, "DRAWSTYLE", void, void, "STROKE_DOT"),
            .StrokeDashDot => c.setStrAttribute(self, "DRAWSTYLE", void, void, "STROKE_DASH_DOT"),
            .StrokeDashDotdot => c.setStrAttribute(self, "DRAWSTYLE", void, void, "STROKE_DASH_DOT_DOT"),
            .DrawStroke => c.setStrAttribute(self, "DRAWSTYLE", void, void, "DRAW_STROKE"),
        } else {
            c.clearAttribute(self, "DRAWSTYLE", void, void);
        }
    }


    /// 
    /// VALUE (non inheritable): Toggle's state.
    /// Values can be "ON", "OFF" or "TOGGLE".
    /// If 3STATE=YES then can also be "NOTDEF".
    /// Default: "OFF".
    /// The TOGGLE option will invert the current state.
    /// Can only be set to ON if the toggle is inside a radio, it will
    /// automatically set to OFF the previous toggle that was ON in the radio.
    pub fn getValue(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "VALUE", void, void);
    }


    /// 
    /// VALUE (non inheritable): Toggle's state.
    /// Values can be "ON", "OFF" or "TOGGLE".
    /// If 3STATE=YES then can also be "NOTDEF".
    /// Default: "OFF".
    /// The TOGGLE option will invert the current state.
    /// Can only be set to ON if the toggle is inside a radio, it will
    /// automatically set to OFF the previous toggle that was ON in the radio.
    pub fn setValue(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "VALUE", void, void, arg);
    }


    /// 
    /// BACKIMAGEZOOM (non inheritable): if set the back image will be zoomed to
    /// occupy the full background.
    /// Aspect ratio is NOT preserved.
    /// Can be Yes or No.
    /// Default: No.
    /// (since 3.25)
    pub fn getBackImageZoom(self: *Self) bool {
        return c.getBoolAttribute(self, "BACKIMAGEZOOM", void, void);
    }


    /// 
    /// BACKIMAGEZOOM (non inheritable): if set the back image will be zoomed to
    /// occupy the full background.
    /// Aspect ratio is NOT preserved.
    /// Can be Yes or No.
    /// Default: No.
    /// (since 3.25)
    pub fn setBackImageZoom(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "BACKIMAGEZOOM", void, void, arg);
    }


    /// 
    /// CPADDING: same as PADDING but using the units of the SIZE attribute.
    /// It will actually set the PADDING attribute.
    /// (since 3.29)
    pub fn getCPadding(self: *Self) Size {
        var str = c.getStrAttribute(self, "CPADDING", void, void);
        return Size.parse(str);
    }


    /// 
    /// CPADDING: same as PADDING but using the units of the SIZE attribute.
    /// It will actually set the PADDING attribute.
    /// (since 3.29)
    pub fn setCPadding(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "CPADDING", void, void, value);
    }


    /// 
    /// TEXTORIENTATION (non inheritable): text angle in degrees and counterclockwise.
    /// The text size will adapt to include the rotated space.
    /// (since 3.25)
    pub fn getTextOrientation(self: *Self) f64 {
        return c.getDoubleAttribute(self, "TEXTORIENTATION", void, void);
    }


    /// 
    /// TEXTORIENTATION (non inheritable): text angle in degrees and counterclockwise.
    /// The text size will adapt to include the rotated space.
    /// (since 3.25)
    pub fn setTextOrientation(self: *Self, arg: f64) void {
        c.setDoubleAttribute(self, "TEXTORIENTATION", void, void, arg);
    }


    /// 
    /// FITTOBACKIMAGE (non inheritable): enable the natural size to be computed
    /// from the BACKIMAGE.
    /// If BACKIMAGE is not defined will be ignored.
    /// Can be Yes or No.
    /// Default: No.
    pub fn getFitToBackImage(self: *Self) bool {
        return c.getBoolAttribute(self, "FITTOBACKIMAGE", void, void);
    }


    /// 
    /// FITTOBACKIMAGE (non inheritable): enable the natural size to be computed
    /// from the BACKIMAGE.
    /// If BACKIMAGE is not defined will be ignored.
    /// Can be Yes or No.
    /// Default: No.
    pub fn setFitToBackImage(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "FITTOBACKIMAGE", void, void, arg);
    }


    /// 
    /// ACTIVE, FONT, EXPAND, SCREENPOSITION, POSITION, MINSIZE, MAXSIZE, WID, TIP,
    /// SIZE, RASTERSIZE, ZORDER, VISIBLE, THEME: also accepted.
    pub fn getActive(self: *Self) bool {
        return c.getBoolAttribute(self, "ACTIVE", void, void);
    }


    /// 
    /// ACTIVE, FONT, EXPAND, SCREENPOSITION, POSITION, MINSIZE, MAXSIZE, WID, TIP,
    /// SIZE, RASTERSIZE, ZORDER, VISIBLE, THEME: also accepted.
    pub fn setActive(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "ACTIVE", void, void, arg);
    }

    pub fn getTipVisible(self: *Self) bool {
        return c.getBoolAttribute(self, "TIPVISIBLE", void, void);
    }

    pub fn setTipVisible(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TIPVISIBLE", void, void, arg);
    }


    /// 
    /// IMAGEHIGHLIGHT (non inheritable): Image name of the element in highlight state.
    /// If it is not defined then the IMAGE is used.
    pub fn getImageHighlight(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "IMAGEHIGHLIGHT", void, void);
    }


    /// 
    /// IMAGEHIGHLIGHT (non inheritable): Image name of the element in highlight state.
    /// If it is not defined then the IMAGE is used.
    pub fn setImageHighlight(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "IMAGEHIGHLIGHT", void, void, arg);
    }

    pub fn getYMax(self: *Self) i32 {
        return c.getIntAttribute(self, "YMAX", void, void);
    }

    pub fn setYMax(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "YMAX", void, void, arg);
    }


    /// 
    /// BACKIMAGE (non inheritable): image name to be used as background.
    /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
    /// See also IupImage.
    pub fn getBackImage(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "BACKIMAGE", void, void);
    }


    /// 
    /// BACKIMAGE (non inheritable): image name to be used as background.
    /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
    /// See also IupImage.
    pub fn setBackImage(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "BACKIMAGE", void, void, arg);
    }

    pub fn getExpandWeight(self: *Self) f64 {
        return c.getDoubleAttribute(self, "EXPANDWEIGHT", void, void);
    }

    pub fn setExpandWeight(self: *Self, arg: f64) void {
        c.setDoubleAttribute(self, "EXPANDWEIGHT", void, void, arg);
    }

    pub fn getMinSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "MINSIZE", void, void);
        return Size.parse(str);
    }

    pub fn setMinSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "MINSIZE", void, void, value);
    }


    /// 
    /// SHOWBORDER: by default borders are drawn only when the button is
    /// highlighted, if SHOWBORDER=Yes borders are always show.
    /// When SHOWBORDER=Yes and BGCOLOR is not defined, the actual BGCOLOR will be
    /// a darker version of the background color of the native parent.
    pub fn getShowBorder(self: *Self) bool {
        return c.getBoolAttribute(self, "SHOWBORDER", void, void);
    }


    /// 
    /// SHOWBORDER: by default borders are drawn only when the button is
    /// highlighted, if SHOWBORDER=Yes borders are always show.
    /// When SHOWBORDER=Yes and BGCOLOR is not defined, the actual BGCOLOR will be
    /// a darker version of the background color of the native parent.
    pub fn setShowBorder(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "SHOWBORDER", void, void, arg);
    }

    pub fn getNTheme(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "NTHEME", void, void);
    }

    pub fn setNTheme(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "NTHEME", void, void, arg);
    }

    pub fn getCharSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "CHARSIZE", void, void);
        return Size.parse(str);
    }


    /// 
    /// IGNORERADIO (non inheritable): when set the toggle will not behave as a
    /// radio when inside an IupRadio hierarchy.
    pub fn getIgnoreRadio(self: *Self) bool {
        return c.getBoolAttribute(self, "IGNORERADIO", void, void);
    }


    /// 
    /// IGNORERADIO (non inheritable): when set the toggle will not behave as a
    /// radio when inside an IupRadio hierarchy.
    pub fn setIgnoreRadio(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "IGNORERADIO", void, void, arg);
    }


    /// 
    /// IMAGEPOSITION (non inheritable): Position of the image relative to the text
    /// when both are displayed.
    /// Can be: LEFT, RIGHT, TOP, BOTTOM.
    /// Default: LEFT.
    pub fn getImagePosition(self: *Self) ?ImagePosition {
        var ret = c.getStrAttribute(self, "IMAGEPOSITION", void, void);

        if (std.ascii.eqlIgnoreCase("LEFT", ret)) return .Left;
        if (std.ascii.eqlIgnoreCase("RIGHT", ret)) return .Right;
        if (std.ascii.eqlIgnoreCase("BOTTOM", ret)) return .Bottom;
        if (std.ascii.eqlIgnoreCase("TOP", ret)) return .Top;
        return null;
    }


    /// 
    /// IMAGEPOSITION (non inheritable): Position of the image relative to the text
    /// when both are displayed.
    /// Can be: LEFT, RIGHT, TOP, BOTTOM.
    /// Default: LEFT.
    pub fn setImagePosition(self: *Self, arg: ?ImagePosition) void {
        if (arg) |value| switch (value) {
            .Left => c.setStrAttribute(self, "IMAGEPOSITION", void, void, "LEFT"),
            .Right => c.setStrAttribute(self, "IMAGEPOSITION", void, void, "RIGHT"),
            .Bottom => c.setStrAttribute(self, "IMAGEPOSITION", void, void, "BOTTOM"),
            .Top => c.setStrAttribute(self, "IMAGEPOSITION", void, void, "TOP"),
        } else {
            c.clearAttribute(self, "IMAGEPOSITION", void, void);
        }
    }

    pub fn getDragTypes(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "DRAGTYPES", void, void);
    }

    pub fn setDragTypes(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "DRAGTYPES", void, void, arg);
    }

    pub fn getWheelDropFocus(self: *Self) bool {
        return c.getBoolAttribute(self, "WHEELDROPFOCUS", void, void);
    }

    pub fn setWheelDropFocus(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "WHEELDROPFOCUS", void, void, arg);
    }


    /// 
    /// BORDERWIDTH: line width used for borders.
    /// Default: "1".
    /// Any borders can be hidden by simply setting this value to 0.
    /// This is for the IupFlatToggle drawn border.
    /// When the check box is shown the borders are not shown, and the background
    /// is not highlighted.
    pub fn getBorderWidth(self: *Self) i32 {
        return c.getIntAttribute(self, "BORDERWIDTH", void, void);
    }


    /// 
    /// BORDERWIDTH: line width used for borders.
    /// Default: "1".
    /// Any borders can be hidden by simply setting this value to 0.
    /// This is for the IupFlatToggle drawn border.
    /// When the check box is shown the borders are not shown, and the background
    /// is not highlighted.
    pub fn setBorderWidth(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "BORDERWIDTH", void, void, arg);
    }

    pub fn getFontStyle(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FONTSTYLE", void, void);
    }

    pub fn setFontStyle(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FONTSTYLE", void, void, arg);
    }


    /// 
    /// TEXTALIGNMENT (non inheritable): Horizontal text alignment for multiple lines.
    /// Can be: ALEFT, ARIGHT or ACENTER.
    /// Default: ALEFT.
    pub fn getTextAlignment(self: *Self) ?TextAlignment {
        var ret = c.getStrAttribute(self, "TEXTALIGNMENT", void, void);

        if (std.ascii.eqlIgnoreCase("ARIGHT", ret)) return .ARight;
        if (std.ascii.eqlIgnoreCase("ALEFT", ret)) return .ALeft;
        if (std.ascii.eqlIgnoreCase("ACENTER", ret)) return .ACenter;
        return null;
    }


    /// 
    /// TEXTALIGNMENT (non inheritable): Horizontal text alignment for multiple lines.
    /// Can be: ALEFT, ARIGHT or ACENTER.
    /// Default: ALEFT.
    pub fn setTextAlignment(self: *Self, arg: ?TextAlignment) void {
        if (arg) |value| switch (value) {
            .ARight => c.setStrAttribute(self, "TEXTALIGNMENT", void, void, "ARIGHT"),
            .ALeft => c.setStrAttribute(self, "TEXTALIGNMENT", void, void, "ALEFT"),
            .ACenter => c.setStrAttribute(self, "TEXTALIGNMENT", void, void, "ACENTER"),
        } else {
            c.clearAttribute(self, "TEXTALIGNMENT", void, void);
        }
    }

    pub fn getTouch(self: *Self) bool {
        return c.getBoolAttribute(self, "TOUCH", void, void);
    }

    pub fn setTouch(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TOUCH", void, void, arg);
    }


    /// 
    /// TEXTWRAP (non inheritable): For single line texts if the text is larger
    /// than its box the line will be automatically broken in multiple lines.
    /// Notice that this is done internally by the system, the element natural size
    /// will still use only a single line.
    /// For the remaining lines to be visible the element should use
    /// EXPAND=VERTICAL or set a SIZE/RASTERSIZE with enough height for the wrapped lines.
    /// (since 3.25)
    pub fn getTextWrap(self: *Self) bool {
        return c.getBoolAttribute(self, "TEXTWRAP", void, void);
    }


    /// 
    /// TEXTWRAP (non inheritable): For single line texts if the text is larger
    /// than its box the line will be automatically broken in multiple lines.
    /// Notice that this is done internally by the system, the element natural size
    /// will still use only a single line.
    /// For the remaining lines to be visible the element should use
    /// EXPAND=VERTICAL or set a SIZE/RASTERSIZE with enough height for the wrapped lines.
    /// (since 3.25)
    pub fn setTextWrap(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TEXTWRAP", void, void, arg);
    }

    pub fn getDragCursor(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "DRAGCURSOR", void, void);
    }

    pub fn setDragCursor(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "DRAGCURSOR", void, void, arg);
    }

    pub fn getFont(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FONT", void, void);
    }

    pub fn setFont(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FONT", void, void, arg);
    }


    /// 
    /// PRESSED (read-only): returns the button state if pressed.
    /// Can be Yes or No.
    pub fn getPressed(self: *Self) bool {
        return c.getBoolAttribute(self, "PRESSED", void, void);
    }

    pub fn setTouchCallback(self: *Self, callback: ?OnTouchFn) void {
        const Handler = CallbackHandler(Self, OnTouchFn, "TOUCH_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// SCROLL_CB SCROLL_CB Called when some manipulation is made to the scrollbar.
    /// The canvas is automatically redrawn only if this callback is NOT defined.
    /// (GTK 2.8) Also the POSX and POSY values will not be correctly updated for
    /// older GTK versions.
    /// In Ubuntu, when liboverlay-scrollbar is enabled (the new tiny auto-hide
    /// scrollbar) only the IUP_SBPOSV and IUP_SBPOSH codes are used.
    /// Callback int function(Ihandle *ih, int op, float posx, float posy); [in C]
    /// ih:scroll_cb(op, posx, posy: number) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// op: indicates the operation performed on the scrollbar.
    /// If the manipulation was made on the vertical scrollbar, it can have the
    /// following values: IUP_SBUP - line up IUP_SBDN - line down IUP_SBPGUP - page
    /// up IUP_SBPGDN - page down IUP_SBPOSV - vertical positioning IUP_SBDRAGV -
    /// vertical drag If it was on the horizontal scrollbar, the following values
    /// are valid: IUP_SBLEFT - column left IUP_SBRIGHT - column right IUP_SBPGLEFT
    /// - page left IUP_SBPGRIGHT - page right IUP_SBPOSH - horizontal positioning
    /// IUP_SBDRAGH - horizontal drag posx, posy: the same as the ACTION canvas
    /// callback (corresponding to the values of attributes POSX and POSY).
    /// Notes IUP_SBDRAGH and IUP_SBDRAGV are not supported in GTK.
    /// During drag IUP_SBPOSH and IUP_SBPOSV are used.
    /// In Windows, after a drag when mouse is released IUP_SBPOSH or IUP_SBPOSV
    /// are called.
    /// Affects IupCanvas, IupGLCanvas, SCROLLBAR
    pub fn setScrollCallback(self: *Self, callback: ?OnScrollFn) void {
        const Handler = CallbackHandler(Self, OnScrollFn, "SCROLL_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setFocusCallback(self: *Self, callback: ?OnFocusFn) void {
        const Handler = CallbackHandler(Self, OnFocusFn, "FOCUS_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// WOM_CB WOM_CB Action generated when an audio device receives an event.
    /// [Windows Only] Callback int function(Ihandle *ih, int state); [in C]
    /// ih:wom_cb(state: number) -> (ret: number) [in Lua] ih: identifies the
    /// element that activated the event.
    /// state: can be opening=1, done=0, or closing=-1.
    /// Notes This callback is used to syncronize video playback with audio.
    /// It is sent when the audio device: Message Description opening is opened by
    /// using the waveOutOpen function.
    /// done is finished with a data block sent by using the waveOutWrite function.
    /// closing is closed by using the waveOutClose function.
    /// You must use the HWND attribute when calling waveOutOpen in the dwCallback
    /// parameter and set fdwOpen to CALLBACK_WINDOW.
    /// Affects IupDialog, IupCanvas, IupGLCanvas
    pub fn setWomCallback(self: *Self, callback: ?OnWomFn) void {
        const Handler = CallbackHandler(Self, OnWomFn, "WOM_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// K_ANY K_ANY Action generated when a keyboard event occurs.
    /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
    /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
    /// c: identifier of typed key.
    /// Please refer to the Keyboard Codes table for a list of possible values.
    /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
    /// the control and not propagated.
    /// If returns IUP_CONTINUE, the key will be processed and the event will be
    /// propagated to the parent of the element receiving it, this is the default behavior.
    /// If returns IUP_DEFAULT the key is processed but it is not propagated.
    /// IUP_CLOSE will be processed.
    /// Notes Keyboard callbacks depend on the keyboard usage of the control with
    /// the focus.
    /// So if you return IUP_IGNORE the control will usually not process the key.
    /// But be aware that sometimes the control process the key in another event so
    /// even returning IUP_IGNORE the key can get processed.
    /// Although it will not be propagated.
    /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
    /// the IUP_CONTINUE return value to work while the control is in focus.
    /// If the callback does not exists it is automatically propagated to the
    /// parent of the element.
    /// K_* callbacks All defined keys are also callbacks of any element, called
    /// when the respective key is activated.
    /// For example: "K_cC" is also a callback activated when the user press
    /// Ctrl+C, when the focus is at the element or at a children with focus.
    /// This is the way an application can create shortcut keys, also called hot keys.
    /// These callbacks are not available in IupLua.
    /// Affects All elements with keyboard interaction.
    pub fn setKAnyCallback(self: *Self, callback: ?OnKAnyFn) void {
        const Handler = CallbackHandler(Self, OnKAnyFn, "K_ANY");
        Handler.setCallback(self, callback);
    }

    pub fn setFlatFocusCallback(self: *Self, callback: ?OnFlatFocusFn) void {
        const Handler = CallbackHandler(Self, OnFlatFocusFn, "FLAT_FOCUS_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
    /// In Motif is also activated by the Help button in some workstations keyboard.
    /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Returns: IUP_CLOSE will be processed.
    /// Affects All elements with user interaction.
    pub fn setHelpCallback(self: *Self, callback: ?OnHelpFn) void {
        const Handler = CallbackHandler(Self, OnHelpFn, "HELP_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDropMotionCallback(self: *Self, callback: ?OnDropMotionFn) void {
        const Handler = CallbackHandler(Self, OnDropMotionFn, "DROPMOTION_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setFlatLeaveWindowCallback(self: *Self, callback: ?OnFlatLeaveWindowFn) void {
        const Handler = CallbackHandler(Self, OnFlatLeaveWindowFn, "FLAT_LEAVEWINDOW_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// KEYPRESS_CB KEYPRESS_CB Action generated when a key is pressed or released.
    /// If the key is pressed and held several calls will occur.
    /// It is called after the callback K_ANY is processed.
    /// Callback int function(Ihandle *ih, int c, int press); [in C]
    /// ih:keypress_cb(c, press: number) -> (ret: number) [in Lua] ih: identifier
    /// of the element that activated the event.
    /// c: identifier of typed key.
    /// Please refer to the Keyboard Codes table for a list of possible values.
    /// press: 1 is the user pressed the key or 0 otherwise.
    /// Returns: If IUP_IGNORE is returned the key is ignored by the system.
    /// IUP_CLOSE will be processed.
    /// Affects IupCanvas
    pub fn setKeyPressCallback(self: *Self, callback: ?OnKeyPressFn) void {
        const Handler = CallbackHandler(Self, OnKeyPressFn, "KEYPRESS_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragEndCallback(self: *Self, callback: ?OnDragEndFn) void {
        const Handler = CallbackHandler(Self, OnDragEndFn, "DRAGEND_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragBeginCallback(self: *Self, callback: ?OnDragBeginFn) void {
        const Handler = CallbackHandler(Self, OnDragBeginFn, "DRAGBEGIN_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// ACTION ACTION Action generated when the element is activated.
    /// Affects each element differently.
    /// Callback int function(Ihandle *ih); [in C] ih:action() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// In some elements, this callback may receive more parameters, apart from ih.
    /// Please refer to each element's documentation.
    /// Affects IupButton, IupItem, IupList, IupText, IupCanvas, IupMultiline,
    /// IupToggle
    pub fn setActionCallback(self: *Self, callback: ?OnActionFn) void {
        const Handler = CallbackHandler(Self, OnActionFn, "ACTION");
        Handler.setCallback(self, callback);
    }

    pub fn setMultiTouchCallback(self: *Self, callback: ?OnMultiTouchFn) void {
        const Handler = CallbackHandler(Self, OnMultiTouchFn, "MULTITOUCH_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// MOTION_CB MOTION_CB Action generated when the mouse moves.
    /// Callback int function(Ihandle *ih, int x, int y, char *status); [in C]
    /// ih:motion_cb(x, y: number, status: string) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of mouse buttons and certain keyboard keys at the moment the
    /// event was generated.
    /// The same macros used for BUTTON_CB can be used for this status.
    /// Notes Between press and release all mouse events are redirected only to
    /// this control, even if the cursor moves outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupGLCanvas
    pub fn setMotionCallback(self: *Self, callback: ?OnMotionFn) void {
        const Handler = CallbackHandler(Self, OnMotionFn, "MOTION_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setFlatEnterWindowCallback(self: *Self, callback: ?OnFlatEnterWindowFn) void {
        const Handler = CallbackHandler(Self, OnFlatEnterWindowFn, "FLAT_ENTERWINDOW_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// WHEEL_CB WHEEL_CB Action generated when the mouse wheel is rotated.
    /// If this callback is not defined the wheel will automatically scroll the
    /// canvas in the vertical direction by some lines, the SCROLL_CB callback if
    /// defined will be called with the IUP_SBDRAGV operation.
    /// Callback int function(Ihandle *ih, float delta, int x, int y, char
    /// *status); [in C] ih:wheel_cb(delta, x, y: number, status: string) -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// delta: the amount the wheel was rotated in notches.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of mouse buttons and certain keyboard keys at the moment the
    /// event was generated.
    /// The same macros used for BUTTON_CB can be used for this status.
    /// Notes In Motif and GTK delta is always 1 or -1.
    /// In Windows is some situations delta can reach the value of two.
    /// In the future with more precise wheels this increment can be changed.
    /// Affects IupCanvas, IupGLCanvas
    pub fn setWheelCallback(self: *Self, callback: ?OnWheelFn) void {
        const Handler = CallbackHandler(Self, OnWheelFn, "WHEEL_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setMapCallback(self: *Self, callback: ?OnMapFn) void {
        const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setFlatButtonCallback(self: *Self, callback: ?OnFlatButtonFn) void {
        const Handler = CallbackHandler(Self, OnFlatButtonFn, "FLAT_BUTTON_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also LEAVEWINDOW_CB
    pub fn setEnterWindowCallback(self: *Self, callback: ?OnEnterWindowFn) void {
        const Handler = CallbackHandler(Self, OnEnterWindowFn, "ENTERWINDOW_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
    /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Notes If the dialog is visible then it is hidden before it is destroyed.
    /// The callback will be called right after it is hidden.
    /// The callback will be called before all other destroy procedures.
    /// For instance, if the element has children then it is called before the
    /// children are destroyed.
    /// For language binding implementations use the callback name "LDESTROY_CB" to
    /// release memory allocated by the binding for the element.
    /// Also the callback will be called before the language callback.
    /// Affects All.
    pub fn setDestroyCallback(self: *Self, callback: ?OnDestroyFn) void {
        const Handler = CallbackHandler(Self, OnDestroyFn, "DESTROY_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDropDataCallback(self: *Self, callback: ?OnDropDataFn) void {
        const Handler = CallbackHandler(Self, OnDropDataFn, "DROPDATA_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
    /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Affects All elements with user interaction, except menus.
    /// In Windows, there are restrictions when using this callback.
    /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
    /// function calls that display or activate a window.
    /// This causes the thread to yield control and can cause the application to
    /// stop responding to messages.
    /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
    pub fn setKillFocusCallback(self: *Self, callback: ?OnKillFocusFn) void {
        const Handler = CallbackHandler(Self, OnKillFocusFn, "KILLFOCUS_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragDataCallback(self: *Self, callback: ?OnDragDataFn) void {
        const Handler = CallbackHandler(Self, OnDragDataFn, "DRAGDATA_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragDataSizeCallback(self: *Self, callback: ?OnDragDataSizeFn) void {
        const Handler = CallbackHandler(Self, OnDragDataSizeFn, "DRAGDATASIZE_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// DROPFILES_CB DROPFILES_CB Action called when a file is "dropped" into the control.
    /// When several files are dropped at once, the callback is called several
    /// times, once for each file.
    /// If defined after the element is mapped then the attribute DROPFILESTARGET
    /// must be set to YES.
    /// [Windows and GTK Only] (GTK 2.6) Callback int function(Ihandle *ih, const
    /// char* filename, int num, int x, int y); [in C] ih:dropfiles_cb(filename:
    /// string; num, x, y: number) -> (ret: number) [in Lua] ih: identifier of the
    /// element that activated the event.
    /// filename: Name of the dropped file.
    /// num: Number index of the dropped file.
    /// If several files are dropped, num is the index of the dropped file starting
    /// from "total-1" to "0".
    /// x: X coordinate of the point where the user released the mouse button.
    /// y: Y coordinate of the point where the user released the mouse button.
    /// Returns: If IUP_IGNORE is returned the callback will NOT be called for the
    /// next dropped files, and the processing of dropped files will be interrupted.
    /// Affects IupDialog, IupCanvas, IupGLCanvas, IupText, IupList
    pub fn setDropFilesCallback(self: *Self, callback: ?OnDropFilesFn) void {
        const Handler = CallbackHandler(Self, OnDropFilesFn, "DROPFILES_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// RESIZE_CB RESIZE_CB Action generated when the canvas or dialog size is changed.
    /// Callback int function(Ihandle *ih, int width, int height); [in C]
    /// ih:resize_cb(width, height: number) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// width: the width of the internal element size in pixels not considering the
    /// decorations (client size) height: the height of the internal element size
    /// in pixels not considering the decorations (client size) Notes For the
    /// dialog, this action is also generated when the dialog is mapped, after the
    /// map and before the show.
    /// When XAUTOHIDE=Yes or YAUTOHIDE=Yes, if the canvas scrollbar is
    /// hidden/shown after changing the DX or DY attributes from inside the
    /// callback, the size of the drawing area will immediately change, so the
    /// parameters with and height will be invalid.
    /// To update the parameters consult the DRAWSIZE attribute.
    /// Also activate the drawing toolkit only after updating the DX or DY attributes.
    /// Affects IupCanvas, IupGLCanvas, IupDialog
    pub fn setResizeCallback(self: *Self, callback: ?OnResizeFn) void {
        const Handler = CallbackHandler(Self, OnResizeFn, "RESIZE_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setUnmapCallback(self: *Self, callback: ?OnUnmapFn) void {
        const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// FLAT_ACTION: Action generated when the button 1 (usually left) is selected.
    /// This callback is called only after the mouse is released and when it is
    /// released inside the button area.
    /// int function(Ihandle* ih, int state); [in C]ih:action(state: number) ->
    /// (ret: number) [in Lua]
    pub fn setFlatActionCallback(self: *Self, callback: ?OnFlatActionFn) void {
        const Handler = CallbackHandler(Self, OnFlatActionFn, "FLAT_ACTION");
        Handler.setCallback(self, callback);
    }

    /// 
    /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
    /// This callback is called after the KILLFOCUS_CB of the element that loosed
    /// the focus.
    /// The IupGetFocus function during the callback returns the element that
    /// loosed the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that received keyboard focus.
    /// Affects All elements with user interaction, except menus.
    /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
    pub fn setGetFocusCallback(self: *Self, callback: ?OnGetFocusFn) void {
        const Handler = CallbackHandler(Self, OnGetFocusFn, "GETFOCUS_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// BUTTON_CB BUTTON_CB Action generated when a mouse button is pressed or released.
    /// Callback int function(Ihandle* ih, int button, int pressed, int x, int y,
    /// char* status); [in C] ih:button_cb(button, pressed, x, y: number, status:
    /// string) -> (ret: number) [in Lua] ih: identifies the element that activated
    /// the event.
    /// button: identifies the activated mouse button: IUP_BUTTON1 - left mouse
    /// button (button 1); IUP_BUTTON2 - middle mouse button (button 2);
    /// IUP_BUTTON3 - right mouse button (button 3).
    /// pressed: indicates the state of the button: 0 - mouse button was released;
    /// 1 - mouse button was pressed.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of the mouse buttons and some keyboard keys at the moment
    /// the event is generated.
    /// The following macros must be used for verification: iup_isshift(status)
    /// iup_iscontrol(status) iup_isbutton1(status) iup_isbutton2(status)
    /// iup_isbutton3(status) iup_isbutton4(status) iup_isbutton5(status)
    /// iup_isdouble(status) iup_isalt(status) iup_issys(status) They return 1 if
    /// the respective key or button is pressed, and 0 otherwise.
    /// These macros are also available in Lua, returning a boolean.
    /// Returns: IUP_CLOSE will be processed.
    /// On some controls if IUP_IGNORE is returned the action is ignored (this is
    /// system dependent).
    /// Notes This callback can be used to customize a button behavior.
    /// For a standard button behavior use the ACTION callback of the IupButton.
    /// For a single click the callback is called twice, one for pressed=1 and one
    /// for pressed=0.
    /// Only after both calls the ACTION callback is called.
    /// In Windows, if a dialog is shown or popup in any situation there could be
    /// unpredictable results because the native system still has processing to be
    /// done even after the callback is called.
    /// A double click is preceded by two single clicks, one for pressed=1 and one
    /// for pressed=0, and followed by a press=0, all three without the double
    /// click flag set.
    /// In GTK, it is preceded by an additional two single clicks sequence.
    /// For example, for one double click all the following calls are made:
    /// BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) BUTTON_CB(but=1 (0), x=154, y=83 [
    /// 1 ]) BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1
    /// (0), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1 (1), x=154, y=83 [ 1
    /// D ]) BUTTON_CB(but=1 (0), x=154, y=83 [ 1 ]) Between press and release all
    /// mouse events are redirected only to this control, even if the cursor moves
    /// outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupButton, IupText, IupList, IupGLCanvas
    pub fn setButtonCallback(self: *Self, callback: ?OnButtonFn) void {
        const Handler = CallbackHandler(Self, OnButtonFn, "BUTTON_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setFlatMotionCallback(self: *Self, callback: ?OnFlatMotionFn) void {
        const Handler = CallbackHandler(Self, OnFlatMotionFn, "FLAT_MOTION_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// VALUECHANGED_CB: Called after the value was interactively changed by the user.
    /// Called after the ACTION callback, but under the same context.
    /// int function(Ihandle *ih); [in C]ih:valuechanged_cb() -> (ret: number) [in
    /// Lua]
    pub fn setValueChangedCallback(self: *Self, callback: ?OnValueChangedFn) void {
        const Handler = CallbackHandler(Self, OnValueChangedFn, "VALUECHANGED_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setLDestroyCallback(self: *Self, callback: ?OnLDestroyFn) void {
        const Handler = CallbackHandler(Self, OnLDestroyFn, "LDESTROY_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also ENTERWINDOW_CB
    pub fn setLeaveWindowCallback(self: *Self, callback: ?OnLeaveWindowFn) void {
        const Handler = CallbackHandler(Self, OnLeaveWindowFn, "LEAVEWINDOW_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setPostMessageCallback(self: *Self, callback: ?OnPostMessageFn) void {
        const Handler = CallbackHandler(Self, OnPostMessageFn, "POSTMESSAGE_CB");
        Handler.setCallback(self, callback);
    }
};

test "FlatToggle FgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setFgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getFgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatToggle TipBalloon" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setTipBalloon(true).unwrap());
    defer item.deinit();

    var ret = item.getTipBalloon();

    try std.testing.expect(ret == true);
}

test "FlatToggle HandleName" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setHandleName("Hello").unwrap());
    defer item.deinit();

    var ret = item.getHandleName();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatToggle TipBgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setTipBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTipBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatToggle XMin" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setXMin(42).unwrap());
    defer item.deinit();

    var ret = item.getXMin();

    try std.testing.expect(ret == 42);
}

test "FlatToggle MaxSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setMaxSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMaxSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "FlatToggle DrawTextWrap" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDrawTextWrap(true).unwrap());
    defer item.deinit();

    var ret = item.getDrawTextWrap();

    try std.testing.expect(ret == true);
}

test "FlatToggle DrawUsedIRect2d" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDrawUsedIRect2d(true).unwrap());
    defer item.deinit();

    var ret = item.getDrawUsedIRect2d();

    try std.testing.expect(ret == true);
}

test "FlatToggle FocusFeedback" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setFocusFeedback(true).unwrap());
    defer item.deinit();

    var ret = item.getFocusFeedback();

    try std.testing.expect(ret == true);
}

test "FlatToggle Position" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setPosition(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getPosition();

    try std.testing.expect(ret.x == 9 and ret.y == 10);
}

test "FlatToggle DropFilesTarget" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDropFilesTarget(true).unwrap());
    defer item.deinit();

    var ret = item.getDropFilesTarget();

    try std.testing.expect(ret == true);
}

test "FlatToggle DrawTextAlignment" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDrawTextAlignment(.ACenter).unwrap());
    defer item.deinit();

    var ret = item.getDrawTextAlignment();

    try std.testing.expect(ret != null and ret.? == .ACenter);
}

test "FlatToggle Tip" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setTip("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTip();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatToggle DrawTextLayoutCenter" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDrawTextLayoutCenter(true).unwrap());
    defer item.deinit();

    var ret = item.getDrawTextLayoutCenter();

    try std.testing.expect(ret == true);
}

test "FlatToggle DragSourceMove" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDragSourceMove(true).unwrap());
    defer item.deinit();

    var ret = item.getDragSourceMove();

    try std.testing.expect(ret == true);
}

test "FlatToggle PsColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setPsColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getPsColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatToggle Visible" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setVisible(true).unwrap());
    defer item.deinit();

    var ret = item.getVisible();

    try std.testing.expect(ret == true);
}

test "FlatToggle Image" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setImage("Hello").unwrap());
    defer item.deinit();

    var ret = item.getImage();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatToggle LineX" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setLineX(3.14).unwrap());
    defer item.deinit();

    var ret = item.getLineX();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "FlatToggle Cursor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setCursor("Hello").unwrap());
    defer item.deinit();

    var ret = item.getCursor();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatToggle LineY" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setLineY(3.14).unwrap());
    defer item.deinit();

    var ret = item.getLineY();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "FlatToggle DrawLineWidth" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDrawLineWidth(42).unwrap());
    defer item.deinit();

    var ret = item.getDrawLineWidth();

    try std.testing.expect(ret == 42);
}

test "FlatToggle DragDrop" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDragDrop(true).unwrap());
    defer item.deinit();

    var ret = item.getDragDrop();

    try std.testing.expect(ret == true);
}

test "FlatToggle DrawAntialias" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDrawAntialias(42).unwrap());
    defer item.deinit();

    var ret = item.getDrawAntialias();

    try std.testing.expect(ret == 42);
}

test "FlatToggle Theme" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setTheme("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTheme();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatToggle DragCursorCopy" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDragCursorCopy("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDragCursorCopy();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatToggle HtTransparent" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setHtTransparent(true).unwrap());
    defer item.deinit();

    var ret = item.getHtTransparent();

    try std.testing.expect(ret == true);
}

test "FlatToggle Expand" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setExpand(.Yes).unwrap());
    defer item.deinit();

    var ret = item.getExpand();

    try std.testing.expect(ret != null and ret.? == .Yes);
}

test "FlatToggle DrawFont" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDrawFont("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDrawFont();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatToggle Size" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "FlatToggle Padding" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setPadding(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getPadding();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "FlatToggle PosX" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setPosX(3.14).unwrap());
    defer item.deinit();

    var ret = item.getPosX();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "FlatToggle PosY" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setPosY(3.14).unwrap());
    defer item.deinit();

    var ret = item.getPosY();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "FlatToggle BorderHlColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setBorderHlColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getBorderHlColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatToggle TextHlColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setTextHlColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTextHlColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatToggle YMin" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setYMin(42).unwrap());
    defer item.deinit();

    var ret = item.getYMin();

    try std.testing.expect(ret == 42);
}

test "FlatToggle TextEllipsis" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setTextEllipsis(true).unwrap());
    defer item.deinit();

    var ret = item.getTextEllipsis();

    try std.testing.expect(ret == true);
}

test "FlatToggle DrawMakeInactive" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDrawMakeInactive(true).unwrap());
    defer item.deinit();

    var ret = item.getDrawMakeInactive();

    try std.testing.expect(ret == true);
}

test "FlatToggle FontSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setFontSize(42).unwrap());
    defer item.deinit();

    var ret = item.getFontSize();

    try std.testing.expect(ret == 42);
}

test "FlatToggle DropTypes" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDropTypes("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDropTypes();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatToggle UserSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setUserSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getUserSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "FlatToggle TipDelay" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setTipDelay(42).unwrap());
    defer item.deinit();

    var ret = item.getTipDelay();

    try std.testing.expect(ret == 42);
}

test "FlatToggle ScrollBar" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setScrollBar(true).unwrap());
    defer item.deinit();

    var ret = item.getScrollBar();

    try std.testing.expect(ret == true);
}

test "FlatToggle DragStart" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDragStart(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getDragStart();

    try std.testing.expect(ret.x == 9 and ret.y == 10);
}

test "FlatToggle Title" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setTitle("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTitle();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatToggle XAutoHide" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setXAutoHide(true).unwrap());
    defer item.deinit();

    var ret = item.getXAutoHide();

    try std.testing.expect(ret == true);
}

test "FlatToggle PropagateFocus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setPropagateFocus(true).unwrap());
    defer item.deinit();

    var ret = item.getPropagateFocus();

    try std.testing.expect(ret == true);
}

test "FlatToggle XMax" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setXMax(42).unwrap());
    defer item.deinit();

    var ret = item.getXMax();

    try std.testing.expect(ret == 42);
}

test "FlatToggle BgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatToggle TipBalloonTitle" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setTipBalloonTitle("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTipBalloonTitle();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatToggle DropTarget" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDropTarget(true).unwrap());
    defer item.deinit();

    var ret = item.getDropTarget();

    try std.testing.expect(ret == true);
}

test "FlatToggle DX" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDX(3.14).unwrap());
    defer item.deinit();

    var ret = item.getDX();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "FlatToggle DY" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDY(3.14).unwrap());
    defer item.deinit();

    var ret = item.getDY();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "FlatToggle DrawTextEllipsis" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDrawTextEllipsis(true).unwrap());
    defer item.deinit();

    var ret = item.getDrawTextEllipsis();

    try std.testing.expect(ret == true);
}

test "FlatToggle DragSource" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDragSource(true).unwrap());
    defer item.deinit();

    var ret = item.getDragSource();

    try std.testing.expect(ret == true);
}

test "FlatToggle DrawTextClip" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDrawTextClip(true).unwrap());
    defer item.deinit();

    var ret = item.getDrawTextClip();

    try std.testing.expect(ret == true);
}

test "FlatToggle Floating" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setFloating(.Yes).unwrap());
    defer item.deinit();

    var ret = item.getFloating();

    try std.testing.expect(ret != null and ret.? == .Yes);
}

test "FlatToggle NormalizerGroup" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setNormalizerGroup("Hello").unwrap());
    defer item.deinit();

    var ret = item.getNormalizerGroup();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatToggle Spacing" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setSpacing(42).unwrap());
    defer item.deinit();

    var ret = item.getSpacing();

    try std.testing.expect(ret == 42);
}

test "FlatToggle BorderPsColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setBorderPsColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getBorderPsColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatToggle RasterSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setRasterSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getRasterSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "FlatToggle TextPsColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setTextPsColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTextPsColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatToggle BorderColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setBorderColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getBorderColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatToggle TipFgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setTipFgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTipFgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatToggle ControlId" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setControlId(42).unwrap());
    defer item.deinit();

    var ret = item.getControlId();

    try std.testing.expect(ret == 42);
}

test "FlatToggle CSpacing" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setCSpacing(42).unwrap());
    defer item.deinit();

    var ret = item.getCSpacing();

    try std.testing.expect(ret == 42);
}

test "FlatToggle HlColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setHlColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getHlColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatToggle FrontImage" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setFrontImage("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFrontImage();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatToggle FontFace" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setFontFace("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFontFace();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatToggle DrawColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDrawColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getDrawColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatToggle DrawTextOrientation" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDrawTextOrientation(3.14).unwrap());
    defer item.deinit();

    var ret = item.getDrawTextOrientation();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "FlatToggle DrawBgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDrawBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getDrawBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FlatToggle Name" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setName("Hello").unwrap());
    defer item.deinit();

    var ret = item.getName();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatToggle BackingStore" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setBackingStore(true).unwrap());
    defer item.deinit();

    var ret = item.getBackingStore();

    try std.testing.expect(ret == true);
}

test "FlatToggle TipBalloonTitleIcon" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setTipBalloonTitleIcon(true).unwrap());
    defer item.deinit();

    var ret = item.getTipBalloonTitleIcon();

    try std.testing.expect(ret == true);
}

test "FlatToggle YAutoHide" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setYAutoHide(true).unwrap());
    defer item.deinit();

    var ret = item.getYAutoHide();

    try std.testing.expect(ret == true);
}

test "FlatToggle DrawStyle" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDrawStyle(.Fill).unwrap());
    defer item.deinit();

    var ret = item.getDrawStyle();

    try std.testing.expect(ret != null and ret.? == .Fill);
}

test "FlatToggle Value" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setValue("Hello").unwrap());
    defer item.deinit();

    var ret = item.getValue();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatToggle BackImageZoom" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setBackImageZoom(true).unwrap());
    defer item.deinit();

    var ret = item.getBackImageZoom();

    try std.testing.expect(ret == true);
}

test "FlatToggle CPadding" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setCPadding(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getCPadding();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "FlatToggle TextOrientation" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setTextOrientation(3.14).unwrap());
    defer item.deinit();

    var ret = item.getTextOrientation();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "FlatToggle FitToBackImage" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setFitToBackImage(true).unwrap());
    defer item.deinit();

    var ret = item.getFitToBackImage();

    try std.testing.expect(ret == true);
}

test "FlatToggle Active" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setActive(true).unwrap());
    defer item.deinit();

    var ret = item.getActive();

    try std.testing.expect(ret == true);
}

test "FlatToggle TipVisible" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setTipVisible(true).unwrap());
    defer item.deinit();

    var ret = item.getTipVisible();

    try std.testing.expect(ret == true);
}

test "FlatToggle ImageHighlight" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setImageHighlight("Hello").unwrap());
    defer item.deinit();

    var ret = item.getImageHighlight();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatToggle YMax" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setYMax(42).unwrap());
    defer item.deinit();

    var ret = item.getYMax();

    try std.testing.expect(ret == 42);
}

test "FlatToggle BackImage" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setBackImage("Hello").unwrap());
    defer item.deinit();

    var ret = item.getBackImage();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatToggle ExpandWeight" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setExpandWeight(3.14).unwrap());
    defer item.deinit();

    var ret = item.getExpandWeight();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "FlatToggle MinSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setMinSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMinSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "FlatToggle ShowBorder" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setShowBorder(true).unwrap());
    defer item.deinit();

    var ret = item.getShowBorder();

    try std.testing.expect(ret == true);
}

test "FlatToggle NTheme" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setNTheme("Hello").unwrap());
    defer item.deinit();

    var ret = item.getNTheme();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatToggle IgnoreRadio" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setIgnoreRadio(true).unwrap());
    defer item.deinit();

    var ret = item.getIgnoreRadio();

    try std.testing.expect(ret == true);
}

test "FlatToggle ImagePosition" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setImagePosition(.Left).unwrap());
    defer item.deinit();

    var ret = item.getImagePosition();

    try std.testing.expect(ret != null and ret.? == .Left);
}

test "FlatToggle DragTypes" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDragTypes("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDragTypes();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatToggle WheelDropFocus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setWheelDropFocus(true).unwrap());
    defer item.deinit();

    var ret = item.getWheelDropFocus();

    try std.testing.expect(ret == true);
}

test "FlatToggle BorderWidth" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setBorderWidth(42).unwrap());
    defer item.deinit();

    var ret = item.getBorderWidth();

    try std.testing.expect(ret == 42);
}

test "FlatToggle FontStyle" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setFontStyle("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFontStyle();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatToggle TextAlignment" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setTextAlignment(.ARight).unwrap());
    defer item.deinit();

    var ret = item.getTextAlignment();

    try std.testing.expect(ret != null and ret.? == .ARight);
}

test "FlatToggle Touch" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setTouch(true).unwrap());
    defer item.deinit();

    var ret = item.getTouch();

    try std.testing.expect(ret == true);
}

test "FlatToggle TextWrap" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setTextWrap(true).unwrap());
    defer item.deinit();

    var ret = item.getTextWrap();

    try std.testing.expect(ret == true);
}

test "FlatToggle DragCursor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setDragCursor("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDragCursor();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FlatToggle Font" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FlatToggle.init().setFont("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFont();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}
