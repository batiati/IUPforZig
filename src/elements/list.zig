// This code was generated by a tool.
// IUP Metadata Code Generator
// https://github.com/batiati/IUPMetadata
//
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.

const std = @import("std");

const c = @import("../c.zig");
const iup = @import("../iup.zig");

const Impl = @import("../impl.zig").Impl;
const CallbackHandler = @import("../callback_handler.zig").CallbackHandler;

const debug = std.debug;
const trait = std.meta.trait;

const Element = iup.Element;
const Handle = iup.Handle;
const Error = iup.Error;
const ChildrenIterator = iup.ChildrenIterator;
const Size = iup.Size;
const Margin = iup.Margin;

/// 
/// Creates an interface element that displays a list of items.
/// The list can be visible or can be dropped down.
/// It also can have an edit box for text input.
/// So it is a 4 in 1 element.
/// In native systems the dropped down case is called Combo Box.
pub const List = opaque {
    pub const CLASS_NAME = "list";
    const Self = @This();

    pub const OnTouchFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: i32, arg3: [:0]const u8) anyerror!void;

    /// 
    /// K_ANY K_ANY Action generated when a keyboard event occurs.
    /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
    /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
    /// c: identifier of typed key.
    /// Please refer to the Keyboard Codes table for a list of possible values.
    /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
    /// the control and not propagated.
    /// If returns IUP_CONTINUE, the key will be processed and the event will be
    /// propagated to the parent of the element receiving it, this is the default behavior.
    /// If returns IUP_DEFAULT the key is processed but it is not propagated.
    /// IUP_CLOSE will be processed.
    /// Notes Keyboard callbacks depend on the keyboard usage of the control with
    /// the focus.
    /// So if you return IUP_IGNORE the control will usually not process the key.
    /// But be aware that sometimes the control process the key in another event so
    /// even returning IUP_IGNORE the key can get processed.
    /// Although it will not be propagated.
    /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
    /// the IUP_CONTINUE return value to work while the control is in focus.
    /// If the callback does not exists it is automatically propagated to the
    /// parent of the element.
    /// K_* callbacks All defined keys are also callbacks of any element, called
    /// when the respective key is activated.
    /// For example: "K_cC" is also a callback activated when the user press
    /// Ctrl+C, when the focus is at the element or at a children with focus.
    /// This is the way an application can create shortcut keys, also called hot keys.
    /// These callbacks are not available in IupLua.
    /// Affects All elements with keyboard interaction.
    pub const OnKAnyFn = fn (self: *Self, arg0: i32) anyerror!void;

    /// 
    /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
    /// In Motif is also activated by the Help button in some workstations keyboard.
    /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Returns: IUP_CLOSE will be processed.
    /// Affects All elements with user interaction.
    pub const OnHelpFn = fn (self: *Self) anyerror!void;

    pub const OnDropMotionFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: [:0]const u8) anyerror!void;

    pub const OnDragEndFn = fn (self: *Self, arg0: i32) anyerror!void;

    pub const OnDragBeginFn = fn (self: *Self, arg0: i32, arg1: i32) anyerror!void;

    /// 
    /// ACTION ACTION Action generated when the element is activated.
    /// Affects each element differently.
    /// Callback int function(Ihandle *ih); [in C] ih:action() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// In some elements, this callback may receive more parameters, apart from ih.
    /// Please refer to each element's documentation.
    /// Affects IupButton, IupItem, IupList, IupText, IupCanvas, IupMultiline,
    /// IupToggle
    pub const OnActionFn = fn (self: *Self, arg0: [:0]const u8, arg1: i32, arg2: i32) anyerror!void;

    pub const OnMultiTouchFn = fn (self: *Self, arg0: i32, arg1: *i32, arg2: *i32, arg3: *i32) anyerror!void;

    /// 
    /// MOTION_CB MOTION_CB Action generated when the mouse moves.
    /// Callback int function(Ihandle *ih, int x, int y, char *status); [in C]
    /// ih:motion_cb(x, y: number, status: string) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of mouse buttons and certain keyboard keys at the moment the
    /// event was generated.
    /// The same macros used for BUTTON_CB can be used for this status.
    /// Notes Between press and release all mouse events are redirected only to
    /// this control, even if the cursor moves outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupGLCanvas
    pub const OnMotionFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: [:0]const u8) anyerror!void;

    /// 
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnMapFn = fn (self: *Self) anyerror!void;

    /// 
    /// DRAGDROP_CB: Action generated when an internal drag and drop is executed.
    /// Only active if SHOWDRAGDROP=YES.
    /// (since 3.7) int function(Ihandle *ih, int drag_id, int drop_id, int
    /// isshift, int iscontrol); [in C] ih:dragdrop_cb(drag_id, drop_id, isshift,
    /// iscontrol: number) -> (ret: number) [in Lua]
    pub const OnDragDropFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) anyerror!void;

    /// 
    /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also LEAVEWINDOW_CB
    pub const OnEnterWindowFn = fn (self: *Self) anyerror!void;

    /// 
    /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
    /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Notes If the dialog is visible then it is hidden before it is destroyed.
    /// The callback will be called right after it is hidden.
    /// The callback will be called before all other destroy procedures.
    /// For instance, if the element has children then it is called before the
    /// children are destroyed.
    /// For language binding implementations use the callback name "LDESTROY_CB" to
    /// release memory allocated by the binding for the element.
    /// Also the callback will be called before the language callback.
    /// Affects All.
    pub const OnDestroyFn = fn (self: *Self) anyerror!void;

    pub const OnDropDataFn = fn (self: *Self, arg0: [:0]const u8, arg1: *iup.Unknow, arg2: i32, arg3: i32, arg4: i32) anyerror!void;

    /// 
    /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
    /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Affects All elements with user interaction, except menus.
    /// In Windows, there are restrictions when using this callback.
    /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
    /// function calls that display or activate a window.
    /// This causes the thread to yield control and can cause the application to
    /// stop responding to messages.
    /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
    pub const OnKillFocusFn = fn (self: *Self) anyerror!void;

    /// 
    /// DBLCLICK_CB: Action generated when the user double click an item.
    /// Called only when DROPDOWN=NO.
    /// (since 3.0) int function (Ihandle *ih, int item, char *text); [in
    /// C]ih:dblclick_cb(item: number, text: string) -> (ret: number) [in Lua]
    pub const OnDblClickFn = fn (self: *Self, arg0: i32, arg1: [:0]const u8) anyerror!void;

    pub const OnDragDataFn = fn (self: *Self, arg0: [:0]const u8, arg1: *iup.Unknow, arg2: i32) anyerror!void;

    pub const OnDragDataSizeFn = fn (self: *Self, arg0: [:0]const u8) anyerror!void;

    /// 
    /// DROPFILES_CB DROPFILES_CB Action called when a file is "dropped" into the control.
    /// When several files are dropped at once, the callback is called several
    /// times, once for each file.
    /// If defined after the element is mapped then the attribute DROPFILESTARGET
    /// must be set to YES.
    /// [Windows and GTK Only] (GTK 2.6) Callback int function(Ihandle *ih, const
    /// char* filename, int num, int x, int y); [in C] ih:dropfiles_cb(filename:
    /// string; num, x, y: number) -> (ret: number) [in Lua] ih: identifier of the
    /// element that activated the event.
    /// filename: Name of the dropped file.
    /// num: Number index of the dropped file.
    /// If several files are dropped, num is the index of the dropped file starting
    /// from "total-1" to "0".
    /// x: X coordinate of the point where the user released the mouse button.
    /// y: Y coordinate of the point where the user released the mouse button.
    /// Returns: If IUP_IGNORE is returned the callback will NOT be called for the
    /// next dropped files, and the processing of dropped files will be interrupted.
    /// Affects IupDialog, IupCanvas, IupGLCanvas, IupText, IupList
    pub const OnDropFilesFn = fn (self: *Self, arg0: [:0]const u8, arg1: i32, arg2: i32, arg3: i32) anyerror!void;

    /// 
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnUnmapFn = fn (self: *Self) anyerror!void;

    /// 
    /// This is the same CARET_CB callback definition as for the IupText.
    pub const OnCaretFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: i32) anyerror!void;

    /// 
    /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
    /// This callback is called after the KILLFOCUS_CB of the element that loosed
    /// the focus.
    /// The IupGetFocus function during the callback returns the element that
    /// loosed the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that received keyboard focus.
    /// Affects All elements with user interaction, except menus.
    /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
    pub const OnGetFocusFn = fn (self: *Self) anyerror!void;

    /// 
    /// BUTTON_CB BUTTON_CB Action generated when a mouse button is pressed or released.
    /// Callback int function(Ihandle* ih, int button, int pressed, int x, int y,
    /// char* status); [in C] ih:button_cb(button, pressed, x, y: number, status:
    /// string) -> (ret: number) [in Lua] ih: identifies the element that activated
    /// the event.
    /// button: identifies the activated mouse button: IUP_BUTTON1 - left mouse
    /// button (button 1); IUP_BUTTON2 - middle mouse button (button 2);
    /// IUP_BUTTON3 - right mouse button (button 3).
    /// pressed: indicates the state of the button: 0 - mouse button was released;
    /// 1 - mouse button was pressed.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of the mouse buttons and some keyboard keys at the moment
    /// the event is generated.
    /// The following macros must be used for verification: iup_isshift(status)
    /// iup_iscontrol(status) iup_isbutton1(status) iup_isbutton2(status)
    /// iup_isbutton3(status) iup_isbutton4(status) iup_isbutton5(status)
    /// iup_isdouble(status) iup_isalt(status) iup_issys(status) They return 1 if
    /// the respective key or button is pressed, and 0 otherwise.
    /// These macros are also available in Lua, returning a boolean.
    /// Returns: IUP_CLOSE will be processed.
    /// On some controls if IUP_IGNORE is returned the action is ignored (this is
    /// system dependent).
    /// Notes This callback can be used to customize a button behavior.
    /// For a standard button behavior use the ACTION callback of the IupButton.
    /// For a single click the callback is called twice, one for pressed=1 and one
    /// for pressed=0.
    /// Only after both calls the ACTION callback is called.
    /// In Windows, if a dialog is shown or popup in any situation there could be
    /// unpredictable results because the native system still has processing to be
    /// done even after the callback is called.
    /// A double click is preceded by two single clicks, one for pressed=1 and one
    /// for pressed=0, and followed by a press=0, all three without the double
    /// click flag set.
    /// In GTK, it is preceded by an additional two single clicks sequence.
    /// For example, for one double click all the following calls are made:
    /// BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) BUTTON_CB(but=1 (0), x=154, y=83 [
    /// 1 ]) BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1
    /// (0), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1 (1), x=154, y=83 [ 1
    /// D ]) BUTTON_CB(but=1 (0), x=154, y=83 [ 1 ]) Between press and release all
    /// mouse events are redirected only to this control, even if the cursor moves
    /// outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupButton, IupText, IupList, IupGLCanvas
    pub const OnButtonFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: [:0]const u8) anyerror!void;

    /// 
    /// VALUECHANGED_CB: Called after the value was interactively changed by the user.
    /// Called when the selection is changed or when the text is edited.
    /// (since 3.0) int function(Ihandle *ih); [in C]ih:valuechanged_cb() -> (ret:
    /// number) [in Lua]
    pub const OnValueChangedFn = fn (self: *Self) anyerror!void;

    /// 
    /// DROPDOWN_CB: Action generated when the list of a dropdown is shown or hidden.
    /// Called only when DROPDOWN=YES.
    /// (since 3.0) int function (Ihandle *ih, int state); [in
    /// C]ih:dropdown_cb(state: boolean) -> (ret: number) [in Lua]
    pub const OnDropDownFn = fn (self: *Self, arg0: i32) anyerror!void;

    /// 
    /// MULTISELECT_CB: Action generated when the state of an item in the multiple
    /// selection list is changed.
    /// But it is called only when the interaction is over.
    /// int function (Ihandle *ih, char *value); [in C]ih:multiselect_cb(value:
    /// string) -> (ret: number) [in Lua]
    pub const OnMultiSelectFn = fn (self: *Self, arg0: [:0]const u8) anyerror!void;

    pub const OnLDestroyFn = fn (self: *Self) anyerror!void;

    /// 
    /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also ENTERWINDOW_CB
    pub const OnLeaveWindowFn = fn (self: *Self) anyerror!void;

    pub const OnPostMessageFn = fn (self: *Self, arg0: [:0]const u8, arg1: i32, arg2: f64, arg3: *iup.Unknow) anyerror!void;

    /// 
    /// EDIT_CB: Action generated when the text in the text box is manually changed
    /// by the user, but before its value is actually updated.
    /// Valid only when EDITBOX=YES.
    /// int function(Ihandle *ih, int c, char *new_value); [in C]ih:edit_cb(c:
    /// number, new_value: string) -> (ret: number) [in Lua]
    pub const OnEditFn = fn (self: *Self, arg0: i32, arg1: [:0]const u8) anyerror!void;

    pub const ZOrder = enum {
        Top,
        Bottom,
    };

    pub const MaskReal = enum {
        Signed,
        Unsigned,
    };

    pub const Expand = enum {
        Yes,
        Horizontal,
        Vertical,
        HorizontalFree,
        VerticalFree,
        No,
    };

    pub const Floating = enum {
        Yes,
        Ignore,
        No,
    };

    pub const Clipboard = enum {
        Copy,
        Cut,
        Paste,
        Clear,
        Undo,
        Redo,
    };

    pub const Initializer = struct {
        last_error: ?anyerror = null,
        ref: *Self,

        ///
        /// Returns a pointer to IUP element or an error.
        /// Only top-level or detached elements needs to be unwraped,
        pub fn unwrap(self: Initializer) !*Self {
            if (self.last_error) |e| {
                return e;
            } else {
                return self.ref;
            }
        }

        ///
        /// Captures a reference into a external variable
        /// Allows to capture some references even using full declarative API
        pub fn capture(self: *Initializer, ref: **Self) Initializer {
            ref.* = self.ref;
            return self.*;
        }

        pub fn setStrAttribute(self: *Initializer, attributeName: [:0]const u8, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setStrAttribute(self.ref, attributeName, arg);
            return self.*;
        }

        pub fn setIntAttribute(self: *Initializer, attributeName: [:0]const u8, arg: i32) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setIntAttribute(self.ref, attributeName, arg);
            return self.*;
        }

        pub fn setBoolAttribute(self: *Initializer, attributeName: [:0]const u8, arg: bool) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setBoolAttribute(self.ref, attributeName, bool);
            return self.*;
        }

        pub fn setPtrAttribute(self: *Initializer, comptime T: type, attributeName: [:0]const u8, value: ?*T) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setPtrAttribute(self.ref, T, attributeName, value);
            return self.*;
        }


        /// 
        /// FGCOLOR: Text color.
        /// Default: the global attribute TXTFGCOLOR.
        /// In GTK older than 2.12, the editbox of a dropdown will not follow the list
        /// attributes: FONT, BGCOLOR, FGCOLOR and SPACING.
        pub fn setFgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "FGCOLOR", rgb);
            return self.*;
        }

        pub fn setTipBalloon(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TIPBALLOON", arg);
            return self.*;
        }

        pub fn setHandleName(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "HANDLENAME", arg);
            return self.*;
        }

        pub fn setTipBgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "TIPBGCOLOR", rgb);
            return self.*;
        }


        /// 
        /// APPEND, CARET, CARETPOS, CLIPBOARD, CUEBANNER, FILTER, INSERT, PADDING,
        /// MASK, NC, READONLY, SELECTEDTEXT, SELECTION, SELECTIONPOS, SCROLLTO,
        /// SCROLLTOPOS : Same as the IupText attributes, but are valid only when
        /// EDITBOX=YES and effective only for the edit box inside the list.
        pub fn setCaret(self: *Initializer, lin: i32, col: i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = iup.LinColPos.intIntToString(&buffer, lin, col, ',');
            c.setStrAttribute(self.ref, "CARET", value);
            return self.*;
        }

        pub fn setMaskDecimalSymbol(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "MASKDECIMALSYMBOL", arg);
            return self.*;
        }

        pub fn setMaxSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "MAXSIZE", value);
            return self.*;
        }

        pub fn setPosition(self: *Initializer, x: i32, y: i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
            c.setStrAttribute(self.ref, "POSITION", value);
            return self.*;
        }


        /// 
        /// DROPFILESTARGET [Windows and GTK Only] (non inheritable): Enable or disable
        /// the drop of files.
        /// Default: NO, but if DROPFILES_CB is defined when the element is mapped then
        /// it will be automatically enabled.
        /// (since 3.0)
        pub fn setDropFilesTarget(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DROPFILESTARGET", arg);
            return self.*;
        }

        pub fn setTip(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "TIP", arg);
            return self.*;
        }


        /// 
        /// CANFOCUS (creation only) (non inheritable): enables the focus traversal of
        /// the control.
        /// In Windows the control will still get the focus when clicked.
        /// Default: YES.
        /// (since 3.0)
        pub fn setCanFocus(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "CANFOCUS", arg);
            return self.*;
        }

        pub fn setDragSourceMove(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DRAGSOURCEMOVE", arg);
            return self.*;
        }

        pub fn setVisible(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "VISIBLE", arg);
            return self.*;
        }

        pub fn setImage(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "IMAGE", arg);
            return self.*;
        }

        pub fn setNc(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "NC", arg);
            return self.*;
        }

        pub fn setZOrder(self: *Initializer, arg: ?ZOrder) Initializer {
            if (arg) |value| switch (value) {
                .Top => c.setStrAttribute(self.ref, "ZORDER", "TOP"),
                .Bottom => c.setStrAttribute(self.ref, "ZORDER", "BOTTOM"),
            } else {
                c.clearAttribute(self.ref, "ZORDER");
            }
            return self.*;
        }


        /// 
        /// SHOWIMAGE (creation only) [Windows and GTK Only]: enables the use of an
        /// image for each item.
        /// Can be "YES" or "NO".
        /// Ignored if set after map.
        /// (since 3.6)
        pub fn setShowImage(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "SHOWIMAGE", arg);
            return self.*;
        }

        pub fn setDragDrop(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DRAGDROP", arg);
            return self.*;
        }

        pub fn setTheme(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "THEME", arg);
            return self.*;
        }

        pub fn setMaskReal(self: *Initializer, arg: ?MaskReal) Initializer {
            if (arg) |value| switch (value) {
                .Signed => c.setStrAttribute(self.ref, "MASKREAL", "SIGNED"),
                .Unsigned => c.setStrAttribute(self.ref, "MASKREAL", "UNSIGNED"),
            } else {
                c.clearAttribute(self.ref, "MASKREAL");
            }
            return self.*;
        }

        pub fn setDragCursorCopy(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "DRAGCURSORCOPY", arg);
            return self.*;
        }

        pub fn setExpand(self: *Initializer, arg: ?Expand) Initializer {
            if (arg) |value| switch (value) {
                .Yes => c.setStrAttribute(self.ref, "EXPAND", "YES"),
                .Horizontal => c.setStrAttribute(self.ref, "EXPAND", "HORIZONTAL"),
                .Vertical => c.setStrAttribute(self.ref, "EXPAND", "VERTICAL"),
                .HorizontalFree => c.setStrAttribute(self.ref, "EXPAND", "HORIZONTALFREE"),
                .VerticalFree => c.setStrAttribute(self.ref, "EXPAND", "VERTICALFREE"),
                .No => c.setStrAttribute(self.ref, "EXPAND", "NO"),
            } else {
                c.clearAttribute(self.ref, "EXPAND");
            }
            return self.*;
        }


        /// 
        /// VISIBLELINES: When DROPDOWN=NO defines the number of visible lines for the
        /// Natural Size, this means that will act also as minimum number of visible lines.
        /// (since 3.0)
        pub fn setVisibleLines(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "VISIBLELINES", arg);
            return self.*;
        }


        /// 
        /// SIZE: Size of the list.
        /// The Natural Size is defined by the number of elements in the list and the
        /// with of the largest item, the default has room for 5 characters in 1 item.
        /// In IUP 3, the Natural Size ignores the list contents if VISIBLECOLUMNS or
        /// VISIBLELINES attributes are defined.
        /// The text in the edit box is ignored when considering the list contents.
        pub fn setSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "SIZE", value);
            return self.*;
        }

        pub fn setPadding(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "PADDING", value);
            return self.*;
        }


        /// 
        /// VALUESTRING (non inheritable): changes or retrieves the value attribute
        /// using a string of an item.
        /// Works only when EDITBOX=NO and DROPDOWN=YES, or DROPDOWN=NO and MULTIPLE=NO.
        /// When set it will search for the first item with the same string.
        /// (since 3.12)
        pub fn setValueString(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "VALUESTRING", arg);
            return self.*;
        }


        /// 
        /// DROPEXPAND [Windows Only]: When DROPDOWN=Yes the size of the dropped list
        /// will expand to include the largest text.
        /// Can be "YES" or "NO".
        /// Default: "YES".
        pub fn setDropExpand(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DROPEXPAND", arg);
            return self.*;
        }


        /// 
        /// DRAGDROPLIST (non inheritable): prepare the Drag & Drop callbacks to
        /// support drag and drop of items between lists (IupList or IupFlatList), in
        /// the same IUP application.
        /// Drag & Drop attributes still need to be set in order to activate the drag &
        /// drop support, so the application can control if this list will be source
        /// and/or target.
        /// Default: NO.
        /// (since 3.10)
        pub fn setDragDropList(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DRAGDROPLIST", arg);
            return self.*;
        }


        /// 
        /// REMOVEITEM (write-only): removes the given value.
        /// value starts at 1.
        /// If value is NULL or "ALL" removes all the items.
        /// Ignored if set before map.
        /// (since 3.0)
        pub fn setRemoveItem(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "REMOVEITEM", arg);
            return self.*;
        }


        /// 
        /// TOPITEM (write-only): position the given item at the top of the list or
        /// near to make it visible.
        /// Valid only when DROPDOWN=NO.
        /// (since 3.0)
        pub fn setTopItem(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "TOPITEM", arg);
            return self.*;
        }

        pub fn setFontSize(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "FONTSIZE", arg);
            return self.*;
        }

        pub fn setDropTypes(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "DROPTYPES", arg);
            return self.*;
        }

        pub fn setUserSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "USERSIZE", value);
            return self.*;
        }

        pub fn setTipDelay(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "TIPDELAY", arg);
            return self.*;
        }


        /// 
        /// VISIBLEITEMS [Windows and Motif Only]: Number of items that are visible
        /// when DROPDOWN=YES is used for the dropdown list.
        /// Default: 5.
        pub fn setVisibleItems(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "VISIBLEITEMS", arg);
            return self.*;
        }


        /// 
        /// SCROLLBAR (creation only): Associates automatic scrollbars to the list when DROPDOWN=NO.
        /// Can be: "YES" or "NO" (none).
        /// Default: "YES".
        /// For all systems, when SCROLLBAR=YES the natural size will always include
        /// its size even if the native system hides the scrollbars.
        /// If AUTOHIDE=YES scrollbars are shown only if they are necessary, by default AUTOHIDE=YES.
        /// In Motif, SCROLLBAR=NO is not supported and if EDITBOX=YES the horizontal
        /// scrollbar is never shown.
        /// When DROPDOWN=YES the scrollbars are system dependent, and do NOT depend on
        /// the SCROLLBAR or AUTOHIDE attributes.
        /// Usually the scrollbars are shown if necessary.
        /// In GTK, scrollbars are never shown and all items are always visible.
        /// In Motif, the horizontal scrollbar is never shown.
        /// In Windows, if DROPEXPAND=YES then the horizontal scrollbar is never shown.
        pub fn setScrollBar(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "SCROLLBAR", arg);
            return self.*;
        }

        pub fn setDragStart(self: *Initializer, x: i32, y: i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
            c.setStrAttribute(self.ref, "DRAGSTART", value);
            return self.*;
        }


        /// 
        /// SHOWDRAGDROP (creation only) (non inheritable): enables the internal drag
        /// and drop of items in the same list, and enables the DRAGDROP_CB callback.
        /// Default: "NO".
        /// Works only if DROPDOWN=NO and MULTIPLE=NO.
        /// Drag & Drop attributes are NOT used.
        /// (since 3.7)
        pub fn setShowDragDrop(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "SHOWDRAGDROP", arg);
            return self.*;
        }


        /// 
        /// PROPAGATEFOCUS(non inheritable): enables the focus callback forwarding to
        /// the next native parent with FOCUS_CB defined.
        /// Default: NO.
        /// (since 3.23)
        pub fn setPropagateFocus(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "PROPAGATEFOCUS", arg);
            return self.*;
        }


        /// 
        /// BGCOLOR: Background color of the text.
        /// Default: the global attribute TXTBGCOLOR.
        /// In GTK does nothing when DROPDOWN=Yes.
        /// In GTK older than 2.12, the editbox of a dropdown will not follow the list
        /// attributes: FONT, BGCOLOR, FGCOLOR and SPACING.
        pub fn setBgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "BGCOLOR", rgb);
            return self.*;
        }

        pub fn setTipBalloonTitle(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "TIPBALLOONTITLE", arg);
            return self.*;
        }

        pub fn setDropTarget(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DROPTARGET", arg);
            return self.*;
        }


        /// 
        /// EDITBOX (creation only): Adds an edit box to the list.
        /// Can be "YES" or "NO".
        /// Default "NO".
        pub fn setEditBox(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "EDITBOX", arg);
            return self.*;
        }


        /// 
        /// VALUEMASKED (non inheritable) (write-only): sets VALUE but first checks if
        /// it is validated by MASK.
        /// If not does nothing.
        /// Works only when EDITBOX=YES.
        /// (since 3.13)
        pub fn setValueMasked(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "VALUEMASKED", arg);
            return self.*;
        }

        pub fn setDragSource(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DRAGSOURCE", arg);
            return self.*;
        }

        pub fn setFloating(self: *Initializer, arg: ?Floating) Initializer {
            if (arg) |value| switch (value) {
                .Yes => c.setStrAttribute(self.ref, "FLOATING", "YES"),
                .Ignore => c.setStrAttribute(self.ref, "FLOATING", "IGNORE"),
                .No => c.setStrAttribute(self.ref, "FLOATING", "NO"),
            } else {
                c.clearAttribute(self.ref, "FLOATING");
            }
            return self.*;
        }

        pub fn setNormalizerGroup(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "NORMALIZERGROUP", arg);
            return self.*;
        }


        /// 
        /// SPACING: internal padding for each item.
        /// Notice that vertically the distance between each item will be actually 2x
        /// the spacing.
        /// It also affects the horizontal margin of the item.
        /// In Windows, the text is aligned at the top left of the item always.
        /// Valid only when DROPDOWN=NO.
        /// (since 3.0)
        pub fn setSpacing(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "SPACING", arg);
            return self.*;
        }

        pub fn setInsertItem(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "INSERTITEM", arg);
            return self.*;
        }

        pub fn setRasterSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "RASTERSIZE", value);
            return self.*;
        }

        pub fn setScrollTopOs(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "SCROLLTOPOS", arg);
            return self.*;
        }

        pub fn setScrollTo(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "SCROLLTO", arg);
            return self.*;
        }

        pub fn setTipFgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            c.setRgb(self.ref, "TIPFGCOLOR", rgb);
            return self.*;
        }

        pub fn setControlId(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "CONTROLID", arg);
            return self.*;
        }


        /// 
        /// CSPACING: same as SPACING but using the units of the vertical part of the
        /// SIZE attribute.
        /// It will actually set the SPACING attribute.
        /// (since 3.29)
        pub fn setCSpacing(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "CSPACING", arg);
            return self.*;
        }

        pub fn setFontFace(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FONTFACE", arg);
            return self.*;
        }


        /// 
        /// VISIBLECOLUMNS: Defines the number of visible columns for the Natural Size,
        /// this means that will act also as minimum number of visible columns.
        /// It uses a wider character size then the one used for the SIZE attribute so
        /// strings will fit better without the need of extra columns.
        /// Set this attribute to speed Natural Size computation for very large lists.
        /// (since 3.0)
        pub fn setVisibleColumns(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "VISIBLECOLUMNS", arg);
            return self.*;
        }

        pub fn setMaskInt(self: *Initializer, begin: i32, end: i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = iup.Range.intIntToString(&buffer, begin, end, ',');
            c.setStrAttribute(self.ref, "MASKINT", value);
            return self.*;
        }


        /// 
        /// APPENDITEM (write-only): inserts an item after the last item.
        /// Ignored if set before map.
        /// (since 3.0)
        pub fn setAppendItem(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "APPENDITEM", arg);
            return self.*;
        }

        pub fn setName(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "NAME", arg);
            return self.*;
        }

        pub fn setMaskCasei(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "MASKCASEI", arg);
            return self.*;
        }

        pub fn setTipBalloonTitleIcon(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TIPBALLOONTITLEICON", arg);
            return self.*;
        }


        /// 
        /// MULTIPLE (creation only): Allows selecting several items simultaneously
        /// (multiple list).
        /// Default: "NO".
        /// Only valid when EDITBOX=NO and DROPDOWN=NO.
        pub fn setMultiple(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "MULTIPLE", arg);
            return self.*;
        }

        pub fn setSelectionPos(self: *Initializer, begin: i32, end: i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = iup.Range.intIntToString(&buffer, begin, end, ',');
            c.setStrAttribute(self.ref, "SELECTIONPOS", value);
            return self.*;
        }


        /// 
        /// VALUE (non inheritable): Depends on the DROPDOWN+EDITBOX combination:
        /// EDITBOX=YES: Text entered by the user.
        /// MULTIPLE=YES: Sequence of '+' and '-' symbols indicating the state of each item.
        /// When setting this value, the user must provide the same amount of '+' and
        /// '-' symbols as the amount of items in the list, otherwise the specified
        /// items will be deselected.
        /// Others: Integer number representing the selected item in the list (begins
        /// at 1).
        /// It can be zero if there is no selected item.
        /// (In Motif when DROPDOWN=YES there is always an item selected, except when
        /// the list is empty).
        /// Should return a non NULL value, even when the list is empty or the text box
        /// is empty.
        /// It can be NULL when no item selected (since 3.0).
        /// The state=0 is simulated internally by IUP in all systems.
        /// If you add or remove items to/from the list and you count on the state=0
        /// value, then after adding/removing items set the VALUE attribute to ensure
        /// proper state=0 value.
        /// The non changed items marked with 'x' are simulated internally by IUP in
        /// all systems.
        /// If you add or remove items to/from the list and you count on the 'x'
        /// values, then after adding/removing items set the VALUE attribute to ensure
        /// proper 'x' values.
        pub fn setValue(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "VALUE", arg);
            return self.*;
        }

        pub fn setFilter(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FILTER", arg);
            return self.*;
        }

        pub fn setSelectedText(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "SELECTEDTEXT", arg);
            return self.*;
        }

        pub fn setCPadding(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "CPADDING", value);
            return self.*;
        }


        /// 
        /// ACTIVE, FONT, EXPAND, SCREENPOSITION, POSITION, MINSIZE, MAXSIZE, WID, TIP,
        /// RASTERSIZE, ZORDER, VISIBLE, THEME: also accepted.
        pub fn setActive(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "ACTIVE", arg);
            return self.*;
        }

        pub fn setTipVisible(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TIPVISIBLE", arg);
            return self.*;
        }

        pub fn setCueBanner(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "CUEBANNER", arg);
            return self.*;
        }


        /// 
        /// SHOWDROPDOWN (write-only): opens or closes the dropdown list.
        /// Can be "YES" or "NO".
        /// Valid only when DROPDOWN=YES.
        /// Ignored if set before map.
        pub fn setShowDropDown(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "SHOWDROPDOWN", arg);
            return self.*;
        }

        pub fn setExpandWeight(self: *Initializer, arg: f64) Initializer {
            c.setDoubleAttribute(self.ref, "EXPANDWEIGHT", arg);
            return self.*;
        }

        pub fn setMinSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            c.setStrAttribute(self.ref, "MINSIZE", value);
            return self.*;
        }

        pub fn setNTheme(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "NTHEME", arg);
            return self.*;
        }


        /// 
        /// APPEND, CARET, CARETPOS, CLIPBOARD, CUEBANNER, FILTER, INSERT, PADDING,
        /// MASK, NC, READONLY, SELECTEDTEXT, SELECTION, SELECTIONPOS, SCROLLTO,
        /// SCROLLTOPOS : Same as the IupText attributes, but are valid only when
        /// EDITBOX=YES and effective only for the edit box inside the list.
        pub fn setCaretPos(self: *Initializer, arg: i32) Initializer {
            c.setIntAttribute(self.ref, "CARETPOS", arg);
            return self.*;
        }

        pub fn setMask(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "MASK", arg);
            return self.*;
        }

        pub fn setDragTypes(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "DRAGTYPES", arg);
            return self.*;
        }


        /// 
        /// AUTOHIDE: scrollbars are shown only if they are necessary.
        /// Default: "YES".
        /// When DROPDOWN=YES the scrollbars are system dependent, and do NOT depend on
        /// the SCROLLBAR or AUTOHIDE attributes.
        /// Usually the scrollbars are shown if necessary.
        /// In GTK, scrollbars are never shown and all items are always visible.
        /// In Motif, the horizontal scrollbar is never shown.
        /// In Windows, if DROPEXPAND=YES then the horizontal scrollbar is never shown.
        pub fn setAutoHide(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "AUTOHIDE", arg);
            return self.*;
        }

        pub fn setFontStyle(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FONTSTYLE", arg);
            return self.*;
        }


        /// 
        /// AUTOREDRAW [Windows] (non inheritable): automatically redraws the list when
        /// something has change.
        /// Set to NO to add many items to the list without updating the display.
        /// Default: "YES".
        /// (since 3.3)
        pub fn setAutoRedraw(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "AUTOREDRAW", arg);
            return self.*;
        }

        pub fn setTouch(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "TOUCH", arg);
            return self.*;
        }

        pub fn setClipboard(self: *Initializer, arg: ?Clipboard) Initializer {
            if (arg) |value| switch (value) {
                .Copy => c.setStrAttribute(self.ref, "CLIPBOARD", "COPY"),
                .Cut => c.setStrAttribute(self.ref, "CLIPBOARD", "CUT"),
                .Paste => c.setStrAttribute(self.ref, "CLIPBOARD", "PASTE"),
                .Clear => c.setStrAttribute(self.ref, "CLIPBOARD", "CLEAR"),
                .Undo => c.setStrAttribute(self.ref, "CLIPBOARD", "UNDO"),
                .Redo => c.setStrAttribute(self.ref, "CLIPBOARD", "REDO"),
            } else {
                c.clearAttribute(self.ref, "CLIPBOARD");
            }
            return self.*;
        }


        /// 
        /// DROPDOWN (creation only): Changes the appearance of the list for the user:
        /// only the selected item is shown beside a button with the image of an arrow
        /// pointing down.
        /// To select another option, the user must press this button, which displays
        /// all items in the list.
        /// Can be "YES" or "NO".
        /// Default "NO".
        pub fn setDropDown(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "DROPDOWN", arg);
            return self.*;
        }

        pub fn setReadonly(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "READONLY", arg);
            return self.*;
        }


        /// 
        /// APPEND, CARET, CARETPOS, CLIPBOARD, CUEBANNER, FILTER, INSERT, PADDING,
        /// MASK, NC, READONLY, SELECTEDTEXT, SELECTION, SELECTIONPOS, SCROLLTO,
        /// SCROLLTOPOS : Same as the IupText attributes, but are valid only when
        /// EDITBOX=YES and effective only for the edit box inside the list.
        pub fn setAppend(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "APPEND", arg);
            return self.*;
        }

        pub fn setDragCursor(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "DRAGCURSOR", arg);
            return self.*;
        }

        pub fn setMaskNoEmpty(self: *Initializer, arg: bool) Initializer {
            c.setBoolAttribute(self.ref, "MASKNOEMPTY", arg);
            return self.*;
        }


        /// 
        /// In GTK older than 2.12, the editbox of a dropdown will not follow the list
        /// attributes: FONT, BGCOLOR, FGCOLOR and SPACING.
        pub fn setFont(self: *Initializer, arg: [:0]const u8) Initializer {
            c.setStrAttribute(self.ref, "FONT", arg);
            return self.*;
        }

        pub fn setTouchCallback(self: *Initializer, callback: ?OnTouchFn) Initializer {
            const Handler = CallbackHandler(Self, OnTouchFn, "TOUCH_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// K_ANY K_ANY Action generated when a keyboard event occurs.
        /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
        /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
        /// c: identifier of typed key.
        /// Please refer to the Keyboard Codes table for a list of possible values.
        /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
        /// the control and not propagated.
        /// If returns IUP_CONTINUE, the key will be processed and the event will be
        /// propagated to the parent of the element receiving it, this is the default behavior.
        /// If returns IUP_DEFAULT the key is processed but it is not propagated.
        /// IUP_CLOSE will be processed.
        /// Notes Keyboard callbacks depend on the keyboard usage of the control with
        /// the focus.
        /// So if you return IUP_IGNORE the control will usually not process the key.
        /// But be aware that sometimes the control process the key in another event so
        /// even returning IUP_IGNORE the key can get processed.
        /// Although it will not be propagated.
        /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
        /// the IUP_CONTINUE return value to work while the control is in focus.
        /// If the callback does not exists it is automatically propagated to the
        /// parent of the element.
        /// K_* callbacks All defined keys are also callbacks of any element, called
        /// when the respective key is activated.
        /// For example: "K_cC" is also a callback activated when the user press
        /// Ctrl+C, when the focus is at the element or at a children with focus.
        /// This is the way an application can create shortcut keys, also called hot keys.
        /// These callbacks are not available in IupLua.
        /// Affects All elements with keyboard interaction.
        pub fn setKAnyCallback(self: *Initializer, callback: ?OnKAnyFn) Initializer {
            const Handler = CallbackHandler(Self, OnKAnyFn, "K_ANY");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
        /// In Motif is also activated by the Help button in some workstations keyboard.
        /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Returns: IUP_CLOSE will be processed.
        /// Affects All elements with user interaction.
        pub fn setHelpCallback(self: *Initializer, callback: ?OnHelpFn) Initializer {
            const Handler = CallbackHandler(Self, OnHelpFn, "HELP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDropMotionCallback(self: *Initializer, callback: ?OnDropMotionFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropMotionFn, "DROPMOTION_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDragEndCallback(self: *Initializer, callback: ?OnDragEndFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragEndFn, "DRAGEND_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDragBeginCallback(self: *Initializer, callback: ?OnDragBeginFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragBeginFn, "DRAGBEGIN_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// ACTION ACTION Action generated when the element is activated.
        /// Affects each element differently.
        /// Callback int function(Ihandle *ih); [in C] ih:action() -> (ret: number) [in
        /// Lua] ih: identifier of the element that activated the event.
        /// In some elements, this callback may receive more parameters, apart from ih.
        /// Please refer to each element's documentation.
        /// Affects IupButton, IupItem, IupList, IupText, IupCanvas, IupMultiline,
        /// IupToggle
        pub fn setActionCallback(self: *Initializer, callback: ?OnActionFn) Initializer {
            const Handler = CallbackHandler(Self, OnActionFn, "ACTION");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setMultiTouchCallback(self: *Initializer, callback: ?OnMultiTouchFn) Initializer {
            const Handler = CallbackHandler(Self, OnMultiTouchFn, "MULTITOUCH_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// MOTION_CB MOTION_CB Action generated when the mouse moves.
        /// Callback int function(Ihandle *ih, int x, int y, char *status); [in C]
        /// ih:motion_cb(x, y: number, status: string) -> (ret: number) [in Lua] ih:
        /// identifier of the element that activated the event.
        /// x, y: position in the canvas where the event has occurred, in pixels.
        /// status: status of mouse buttons and certain keyboard keys at the moment the
        /// event was generated.
        /// The same macros used for BUTTON_CB can be used for this status.
        /// Notes Between press and release all mouse events are redirected only to
        /// this control, even if the cursor moves outside the element.
        /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
        /// called with coordinates outside the element rectangle.
        /// Affects IupCanvas, IupGLCanvas
        pub fn setMotionCallback(self: *Initializer, callback: ?OnMotionFn) Initializer {
            const Handler = CallbackHandler(Self, OnMotionFn, "MOTION_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
        /// updated in IupMap.
        /// When the element is a dialog, it is called after the layout is updated.
        /// For all other elements is called before the layout is updated, so the
        /// element current size will still be 0x0 during MAP_CB (since 3.14).
        /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
        /// Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setMapCallback(self: *Initializer, callback: ?OnMapFn) Initializer {
            const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// DRAGDROP_CB: Action generated when an internal drag and drop is executed.
        /// Only active if SHOWDRAGDROP=YES.
        /// (since 3.7) int function(Ihandle *ih, int drag_id, int drop_id, int
        /// isshift, int iscontrol); [in C] ih:dragdrop_cb(drag_id, drop_id, isshift,
        /// iscontrol: number) -> (ret: number) [in Lua]
        pub fn setDragDropCallback(self: *Initializer, callback: ?OnDragDropFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragDropFn, "DRAGDROP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
        /// native element.
        /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Notes When the cursor is moved from one element to another, the call order
        /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
        /// control followed by the ENTERWINDOW_CB callback of the new control.
        /// (since 3.14) If the mouse button is hold pressed and the cursor moves
        /// outside the element the behavior is system dependent.
        /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
        /// GTK the callbacks are called.
        /// Affects All controls with user interaction.
        /// See Also LEAVEWINDOW_CB
        pub fn setEnterWindowCallback(self: *Initializer, callback: ?OnEnterWindowFn) Initializer {
            const Handler = CallbackHandler(Self, OnEnterWindowFn, "ENTERWINDOW_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
        /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Notes If the dialog is visible then it is hidden before it is destroyed.
        /// The callback will be called right after it is hidden.
        /// The callback will be called before all other destroy procedures.
        /// For instance, if the element has children then it is called before the
        /// children are destroyed.
        /// For language binding implementations use the callback name "LDESTROY_CB" to
        /// release memory allocated by the binding for the element.
        /// Also the callback will be called before the language callback.
        /// Affects All.
        pub fn setDestroyCallback(self: *Initializer, callback: ?OnDestroyFn) Initializer {
            const Handler = CallbackHandler(Self, OnDestroyFn, "DESTROY_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDropDataCallback(self: *Initializer, callback: ?OnDropDataFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropDataFn, "DROPDATA_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
        /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
        /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Affects All elements with user interaction, except menus.
        /// In Windows, there are restrictions when using this callback.
        /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
        /// function calls that display or activate a window.
        /// This causes the thread to yield control and can cause the application to
        /// stop responding to messages.
        /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
        pub fn setKillFocusCallback(self: *Initializer, callback: ?OnKillFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnKillFocusFn, "KILLFOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// DBLCLICK_CB: Action generated when the user double click an item.
        /// Called only when DROPDOWN=NO.
        /// (since 3.0) int function (Ihandle *ih, int item, char *text); [in
        /// C]ih:dblclick_cb(item: number, text: string) -> (ret: number) [in Lua]
        pub fn setDblClickCallback(self: *Initializer, callback: ?OnDblClickFn) Initializer {
            const Handler = CallbackHandler(Self, OnDblClickFn, "DBLCLICK_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDragDataCallback(self: *Initializer, callback: ?OnDragDataFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragDataFn, "DRAGDATA_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setDragDataSizeCallback(self: *Initializer, callback: ?OnDragDataSizeFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragDataSizeFn, "DRAGDATASIZE_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// DROPFILES_CB DROPFILES_CB Action called when a file is "dropped" into the control.
        /// When several files are dropped at once, the callback is called several
        /// times, once for each file.
        /// If defined after the element is mapped then the attribute DROPFILESTARGET
        /// must be set to YES.
        /// [Windows and GTK Only] (GTK 2.6) Callback int function(Ihandle *ih, const
        /// char* filename, int num, int x, int y); [in C] ih:dropfiles_cb(filename:
        /// string; num, x, y: number) -> (ret: number) [in Lua] ih: identifier of the
        /// element that activated the event.
        /// filename: Name of the dropped file.
        /// num: Number index of the dropped file.
        /// If several files are dropped, num is the index of the dropped file starting
        /// from "total-1" to "0".
        /// x: X coordinate of the point where the user released the mouse button.
        /// y: Y coordinate of the point where the user released the mouse button.
        /// Returns: If IUP_IGNORE is returned the callback will NOT be called for the
        /// next dropped files, and the processing of dropped files will be interrupted.
        /// Affects IupDialog, IupCanvas, IupGLCanvas, IupText, IupList
        pub fn setDropFilesCallback(self: *Initializer, callback: ?OnDropFilesFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropFilesFn, "DROPFILES_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
        /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setUnmapCallback(self: *Initializer, callback: ?OnUnmapFn) Initializer {
            const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// This is the same CARET_CB callback definition as for the IupText.
        pub fn setCaretCallback(self: *Initializer, callback: ?OnCaretFn) Initializer {
            const Handler = CallbackHandler(Self, OnCaretFn, "CARET_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
        /// This callback is called after the KILLFOCUS_CB of the element that loosed
        /// the focus.
        /// The IupGetFocus function during the callback returns the element that
        /// loosed the focus.
        /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that received keyboard focus.
        /// Affects All elements with user interaction, except menus.
        /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
        pub fn setGetFocusCallback(self: *Initializer, callback: ?OnGetFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnGetFocusFn, "GETFOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// BUTTON_CB BUTTON_CB Action generated when a mouse button is pressed or released.
        /// Callback int function(Ihandle* ih, int button, int pressed, int x, int y,
        /// char* status); [in C] ih:button_cb(button, pressed, x, y: number, status:
        /// string) -> (ret: number) [in Lua] ih: identifies the element that activated
        /// the event.
        /// button: identifies the activated mouse button: IUP_BUTTON1 - left mouse
        /// button (button 1); IUP_BUTTON2 - middle mouse button (button 2);
        /// IUP_BUTTON3 - right mouse button (button 3).
        /// pressed: indicates the state of the button: 0 - mouse button was released;
        /// 1 - mouse button was pressed.
        /// x, y: position in the canvas where the event has occurred, in pixels.
        /// status: status of the mouse buttons and some keyboard keys at the moment
        /// the event is generated.
        /// The following macros must be used for verification: iup_isshift(status)
        /// iup_iscontrol(status) iup_isbutton1(status) iup_isbutton2(status)
        /// iup_isbutton3(status) iup_isbutton4(status) iup_isbutton5(status)
        /// iup_isdouble(status) iup_isalt(status) iup_issys(status) They return 1 if
        /// the respective key or button is pressed, and 0 otherwise.
        /// These macros are also available in Lua, returning a boolean.
        /// Returns: IUP_CLOSE will be processed.
        /// On some controls if IUP_IGNORE is returned the action is ignored (this is
        /// system dependent).
        /// Notes This callback can be used to customize a button behavior.
        /// For a standard button behavior use the ACTION callback of the IupButton.
        /// For a single click the callback is called twice, one for pressed=1 and one
        /// for pressed=0.
        /// Only after both calls the ACTION callback is called.
        /// In Windows, if a dialog is shown or popup in any situation there could be
        /// unpredictable results because the native system still has processing to be
        /// done even after the callback is called.
        /// A double click is preceded by two single clicks, one for pressed=1 and one
        /// for pressed=0, and followed by a press=0, all three without the double
        /// click flag set.
        /// In GTK, it is preceded by an additional two single clicks sequence.
        /// For example, for one double click all the following calls are made:
        /// BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) BUTTON_CB(but=1 (0), x=154, y=83 [
        /// 1 ]) BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1
        /// (0), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1 (1), x=154, y=83 [ 1
        /// D ]) BUTTON_CB(but=1 (0), x=154, y=83 [ 1 ]) Between press and release all
        /// mouse events are redirected only to this control, even if the cursor moves
        /// outside the element.
        /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
        /// called with coordinates outside the element rectangle.
        /// Affects IupCanvas, IupButton, IupText, IupList, IupGLCanvas
        pub fn setButtonCallback(self: *Initializer, callback: ?OnButtonFn) Initializer {
            const Handler = CallbackHandler(Self, OnButtonFn, "BUTTON_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// VALUECHANGED_CB: Called after the value was interactively changed by the user.
        /// Called when the selection is changed or when the text is edited.
        /// (since 3.0) int function(Ihandle *ih); [in C]ih:valuechanged_cb() -> (ret:
        /// number) [in Lua]
        pub fn setValueChangedCallback(self: *Initializer, callback: ?OnValueChangedFn) Initializer {
            const Handler = CallbackHandler(Self, OnValueChangedFn, "VALUECHANGED_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// DROPDOWN_CB: Action generated when the list of a dropdown is shown or hidden.
        /// Called only when DROPDOWN=YES.
        /// (since 3.0) int function (Ihandle *ih, int state); [in
        /// C]ih:dropdown_cb(state: boolean) -> (ret: number) [in Lua]
        pub fn setDropDownCallback(self: *Initializer, callback: ?OnDropDownFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropDownFn, "DROPDOWN_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// MULTISELECT_CB: Action generated when the state of an item in the multiple
        /// selection list is changed.
        /// But it is called only when the interaction is over.
        /// int function (Ihandle *ih, char *value); [in C]ih:multiselect_cb(value:
        /// string) -> (ret: number) [in Lua]
        pub fn setMultiSelectCallback(self: *Initializer, callback: ?OnMultiSelectFn) Initializer {
            const Handler = CallbackHandler(Self, OnMultiSelectFn, "MULTISELECT_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setLDestroyCallback(self: *Initializer, callback: ?OnLDestroyFn) Initializer {
            const Handler = CallbackHandler(Self, OnLDestroyFn, "LDESTROY_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
        /// native element.
        /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Notes When the cursor is moved from one element to another, the call order
        /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
        /// control followed by the ENTERWINDOW_CB callback of the new control.
        /// (since 3.14) If the mouse button is hold pressed and the cursor moves
        /// outside the element the behavior is system dependent.
        /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
        /// GTK the callbacks are called.
        /// Affects All controls with user interaction.
        /// See Also ENTERWINDOW_CB
        pub fn setLeaveWindowCallback(self: *Initializer, callback: ?OnLeaveWindowFn) Initializer {
            const Handler = CallbackHandler(Self, OnLeaveWindowFn, "LEAVEWINDOW_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setPostMessageCallback(self: *Initializer, callback: ?OnPostMessageFn) Initializer {
            const Handler = CallbackHandler(Self, OnPostMessageFn, "POSTMESSAGE_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// EDIT_CB: Action generated when the text in the text box is manually changed
        /// by the user, but before its value is actually updated.
        /// Valid only when EDITBOX=YES.
        /// int function(Ihandle *ih, int c, char *new_value); [in C]ih:edit_cb(c:
        /// number, new_value: string) -> (ret: number) [in Lua]
        pub fn setEditCallback(self: *Initializer, callback: ?OnEditFn) Initializer {
            const Handler = CallbackHandler(Self, OnEditFn, "EDIT_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }
    };

    ///
    /// Creates an interface element given its class name and parameters.
    /// After creation the element still needs to be attached to a container and mapped to the native system so it can be visible.
    pub fn init() Initializer {
        var handle = c.IupCreate(Self.CLASS_NAME);

        if (handle) |valid| {
            return .{
                .ref = @ptrCast(*Self, valid),
            };
        } else {
            return .{ .ref = undefined, .last_error = Error.NotInitialized };
        }
    }

    /// 
    /// Destroys an interface element and all its children.
    /// Only dialogs, timers, popup menus and images should be normally destroyed, but detached elements can also be destroyed.        
    pub fn deinit(self: *Self) void {
        c.IupDestroy(c.getHandle(self));
    }

    pub fn setStrAttribute(self: *Self, attributeName: [:0]const u8, arg: [:0]const u8) void {
        c.setStrAttribute(self, attributeName, arg);
    }

    pub fn getStrAttribute(self: *Self, attributeName: [:0]const u8) [:0]const u8 {
        return c.getStrAttribute(self, attributeName);
    }

    pub fn setIntAttribute(self: *Self, attributeName: [:0]const u8, arg: i32) void {
        c.setIntAttribute(self, attributeName, arg);
    }

    pub fn getIntAttribute(self: *Self, attributeName: [:0]const u8) i32 {
        return c.getIntAttribute(self, attributeName);
    }

    pub fn setBoolAttribute(self: *Self, attributeName: [:0]const u8, arg: bool) void {
        c.setBoolAttribute(self, attributeName, arg);
    }

    pub fn getBoolAttribute(self: *Self, attributeName: [:0]const u8) bool {
        return c.getBoolAttribute(self, attributeName);
    }

    pub fn getPtrAttribute(handle: *Self, comptime T: type, attribute: [:0]const u8) ?*T {
        return c.getPtrAttribute(T, handle, attribute);
    }

    pub fn setPtrAttribute(handle: *Self, comptime T: type, attribute: [:0]const u8, value: ?*T) void {
        c.setPtrAttribute(T, handle, attribute, value);
    }

    ///
    ///
    pub fn getDialog(self: *Self) ?*iup.Dialog {
        if (c.IupGetDialog(c.getHandle(self))) |handle| {
            return c.fromHandle(iup.Dialog, handle);
        } else {
            return null;
        }
    }

    ///
    /// Returns the the child element that has the NAME attribute equals to the given value on the same dialog hierarchy.
    /// Works also for children of a menu that is associated with a dialog.
    pub fn getDialogChild(self: *Self, byName: [:0]const u8) ?Element {
        var child = c.IupGetDialogChild(c.getHandle(self), c.toCStr(byName)) orelse return null;
        var className = c.fromCStr(c.IupGetClassName(child));

        return Element.fromClassName(className, child);
    }

    ///
    /// Updates the size and layout of all controls in the same dialog.
    /// To be used after changing size attributes, or attributes that affect the size of the control. Can be used for any element inside a dialog, but the layout of the dialog and all controls will be updated. It can change the layout of all the controls inside the dialog because of the dynamic layout positioning.
    pub fn refresh(self: *Self) void {
        try Impl(Self).refresh(self);
    }


    /// 
    /// COUNT (read-only) (non inheritable): returns the number of items.
    /// Before mapping it counts the number of non NULL items before the first NULL item.
    /// (since 3.0)
    pub fn getCount(self: *Self) i32 {
        return c.getIntAttribute(self, "COUNT");
    }


    /// 
    /// FGCOLOR: Text color.
    /// Default: the global attribute TXTFGCOLOR.
    /// In GTK older than 2.12, the editbox of a dropdown will not follow the list
    /// attributes: FONT, BGCOLOR, FGCOLOR and SPACING.
    pub fn getFgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "FGCOLOR");
    }


    /// 
    /// FGCOLOR: Text color.
    /// Default: the global attribute TXTFGCOLOR.
    /// In GTK older than 2.12, the editbox of a dropdown will not follow the list
    /// attributes: FONT, BGCOLOR, FGCOLOR and SPACING.
    pub fn setFgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "FGCOLOR", rgb);
    }

    pub fn getTipBalloon(self: *Self) bool {
        return c.getBoolAttribute(self, "TIPBALLOON");
    }

    pub fn setTipBalloon(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TIPBALLOON", arg);
    }

    pub fn getHandleName(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "HANDLENAME");
    }

    pub fn setHandleName(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "HANDLENAME", arg);
    }

    pub fn getTipBgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "TIPBGCOLOR");
    }

    pub fn setTipBgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "TIPBGCOLOR", rgb);
    }


    /// 
    /// APPEND, CARET, CARETPOS, CLIPBOARD, CUEBANNER, FILTER, INSERT, PADDING,
    /// MASK, NC, READONLY, SELECTEDTEXT, SELECTION, SELECTIONPOS, SCROLLTO,
    /// SCROLLTOPOS : Same as the IupText attributes, but are valid only when
    /// EDITBOX=YES and effective only for the edit box inside the list.
    pub fn getCaret(self: *Self) iup.LinColPos {
        var str = c.getStrAttribute(self, "CARET");
        return iup.LinColPos.parse(str, ',');
    }


    /// 
    /// APPEND, CARET, CARETPOS, CLIPBOARD, CUEBANNER, FILTER, INSERT, PADDING,
    /// MASK, NC, READONLY, SELECTEDTEXT, SELECTION, SELECTIONPOS, SCROLLTO,
    /// SCROLLTOPOS : Same as the IupText attributes, but are valid only when
    /// EDITBOX=YES and effective only for the edit box inside the list.
    pub fn setCaret(self: *Self, lin: i32, col: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.LinColPos.intIntToString(&buffer, lin, col, ',');
        c.setStrAttribute(self, "CARET", value);
    }

    pub fn getMaskDecimalSymbol(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "MASKDECIMALSYMBOL");
    }

    pub fn setMaskDecimalSymbol(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "MASKDECIMALSYMBOL", arg);
    }

    pub fn getMaxSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "MAXSIZE");
        return Size.parse(str);
    }

    pub fn setMaxSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "MAXSIZE", value);
    }

    pub fn getScreenPosition(self: *Self) iup.XYPos {
        var str = c.getStrAttribute(self, "SCREENPOSITION");
        return iup.XYPos.parse(str, ',');
    }

    pub fn getPosition(self: *Self) iup.XYPos {
        var str = c.getStrAttribute(self, "POSITION");
        return iup.XYPos.parse(str, ',');
    }

    pub fn setPosition(self: *Self, x: i32, y: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
        c.setStrAttribute(self, "POSITION", value);
    }


    /// 
    /// DROPFILESTARGET [Windows and GTK Only] (non inheritable): Enable or disable
    /// the drop of files.
    /// Default: NO, but if DROPFILES_CB is defined when the element is mapped then
    /// it will be automatically enabled.
    /// (since 3.0)
    pub fn getDropFilesTarget(self: *Self) bool {
        return c.getBoolAttribute(self, "DROPFILESTARGET");
    }


    /// 
    /// DROPFILESTARGET [Windows and GTK Only] (non inheritable): Enable or disable
    /// the drop of files.
    /// Default: NO, but if DROPFILES_CB is defined when the element is mapped then
    /// it will be automatically enabled.
    /// (since 3.0)
    pub fn setDropFilesTarget(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DROPFILESTARGET", arg);
    }

    pub fn getTip(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "TIP");
    }

    pub fn setTip(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "TIP", arg);
    }

    pub fn getDragSourceMove(self: *Self) bool {
        return c.getBoolAttribute(self, "DRAGSOURCEMOVE");
    }

    pub fn setDragSourceMove(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DRAGSOURCEMOVE", arg);
    }

    pub fn getVisible(self: *Self) bool {
        return c.getBoolAttribute(self, "VISIBLE");
    }

    pub fn setVisible(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "VISIBLE", arg);
    }

    pub fn setImage(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "IMAGE", arg);
    }

    pub fn getNc(self: *Self) i32 {
        return c.getIntAttribute(self, "NC");
    }

    pub fn setNc(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "NC", arg);
    }

    pub fn setZOrder(self: *Self, arg: ?ZOrder) void {
        if (arg) |value| switch (value) {
            .Top => c.setStrAttribute(self, "ZORDER", "TOP"),
            .Bottom => c.setStrAttribute(self, "ZORDER", "BOTTOM"),
        } else {
            c.clearAttribute(self, "ZORDER");
        }
    }

    pub fn getX(self: *Self) i32 {
        return c.getIntAttribute(self, "X");
    }

    pub fn getY(self: *Self) i32 {
        return c.getIntAttribute(self, "Y");
    }

    pub fn getDragDrop(self: *Self) bool {
        return c.getBoolAttribute(self, "DRAGDROP");
    }

    pub fn setDragDrop(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DRAGDROP", arg);
    }

    pub fn getTheme(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "THEME");
    }

    pub fn setTheme(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "THEME", arg);
    }

    pub fn getMaskReal(self: *Self) ?MaskReal {
        var ret = c.getStrAttribute(self, "MASKREAL");

        if (std.ascii.eqlIgnoreCase("SIGNED", ret)) return .Signed;
        if (std.ascii.eqlIgnoreCase("UNSIGNED", ret)) return .Unsigned;
        return null;
    }

    pub fn setMaskReal(self: *Self, arg: ?MaskReal) void {
        if (arg) |value| switch (value) {
            .Signed => c.setStrAttribute(self, "MASKREAL", "SIGNED"),
            .Unsigned => c.setStrAttribute(self, "MASKREAL", "UNSIGNED"),
        } else {
            c.clearAttribute(self, "MASKREAL");
        }
    }

    pub fn getDragCursorCopy(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "DRAGCURSORCOPY");
    }

    pub fn setDragCursorCopy(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "DRAGCURSORCOPY", arg);
    }

    pub fn getExpand(self: *Self) ?Expand {
        var ret = c.getStrAttribute(self, "EXPAND");

        if (std.ascii.eqlIgnoreCase("YES", ret)) return .Yes;
        if (std.ascii.eqlIgnoreCase("HORIZONTAL", ret)) return .Horizontal;
        if (std.ascii.eqlIgnoreCase("VERTICAL", ret)) return .Vertical;
        if (std.ascii.eqlIgnoreCase("HORIZONTALFREE", ret)) return .HorizontalFree;
        if (std.ascii.eqlIgnoreCase("VERTICALFREE", ret)) return .VerticalFree;
        if (std.ascii.eqlIgnoreCase("NO", ret)) return .No;
        return null;
    }

    pub fn setExpand(self: *Self, arg: ?Expand) void {
        if (arg) |value| switch (value) {
            .Yes => c.setStrAttribute(self, "EXPAND", "YES"),
            .Horizontal => c.setStrAttribute(self, "EXPAND", "HORIZONTAL"),
            .Vertical => c.setStrAttribute(self, "EXPAND", "VERTICAL"),
            .HorizontalFree => c.setStrAttribute(self, "EXPAND", "HORIZONTALFREE"),
            .VerticalFree => c.setStrAttribute(self, "EXPAND", "VERTICALFREE"),
            .No => c.setStrAttribute(self, "EXPAND", "NO"),
        } else {
            c.clearAttribute(self, "EXPAND");
        }
    }


    /// 
    /// VISIBLELINES: When DROPDOWN=NO defines the number of visible lines for the
    /// Natural Size, this means that will act also as minimum number of visible lines.
    /// (since 3.0)
    pub fn getVisibleLines(self: *Self) i32 {
        return c.getIntAttribute(self, "VISIBLELINES");
    }


    /// 
    /// VISIBLELINES: When DROPDOWN=NO defines the number of visible lines for the
    /// Natural Size, this means that will act also as minimum number of visible lines.
    /// (since 3.0)
    pub fn setVisibleLines(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "VISIBLELINES", arg);
    }


    /// 
    /// SIZE: Size of the list.
    /// The Natural Size is defined by the number of elements in the list and the
    /// with of the largest item, the default has room for 5 characters in 1 item.
    /// In IUP 3, the Natural Size ignores the list contents if VISIBLECOLUMNS or
    /// VISIBLELINES attributes are defined.
    /// The text in the edit box is ignored when considering the list contents.
    pub fn getSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "SIZE");
        return Size.parse(str);
    }


    /// 
    /// SIZE: Size of the list.
    /// The Natural Size is defined by the number of elements in the list and the
    /// with of the largest item, the default has room for 5 characters in 1 item.
    /// In IUP 3, the Natural Size ignores the list contents if VISIBLECOLUMNS or
    /// VISIBLELINES attributes are defined.
    /// The text in the edit box is ignored when considering the list contents.
    pub fn setSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "SIZE", value);
    }

    pub fn getPadding(self: *Self) Size {
        var str = c.getStrAttribute(self, "PADDING");
        return Size.parse(str);
    }

    pub fn setPadding(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "PADDING", value);
    }


    /// 
    /// VALUESTRING (non inheritable): changes or retrieves the value attribute
    /// using a string of an item.
    /// Works only when EDITBOX=NO and DROPDOWN=YES, or DROPDOWN=NO and MULTIPLE=NO.
    /// When set it will search for the first item with the same string.
    /// (since 3.12)
    pub fn getValueString(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "VALUESTRING");
    }


    /// 
    /// VALUESTRING (non inheritable): changes or retrieves the value attribute
    /// using a string of an item.
    /// Works only when EDITBOX=NO and DROPDOWN=YES, or DROPDOWN=NO and MULTIPLE=NO.
    /// When set it will search for the first item with the same string.
    /// (since 3.12)
    pub fn setValueString(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "VALUESTRING", arg);
    }

    pub fn getWId(self: *Self) i32 {
        return c.getIntAttribute(self, "WID");
    }


    /// 
    /// DROPEXPAND [Windows Only]: When DROPDOWN=Yes the size of the dropped list
    /// will expand to include the largest text.
    /// Can be "YES" or "NO".
    /// Default: "YES".
    pub fn getDropExpand(self: *Self) bool {
        return c.getBoolAttribute(self, "DROPEXPAND");
    }


    /// 
    /// DROPEXPAND [Windows Only]: When DROPDOWN=Yes the size of the dropped list
    /// will expand to include the largest text.
    /// Can be "YES" or "NO".
    /// Default: "YES".
    pub fn setDropExpand(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DROPEXPAND", arg);
    }


    /// 
    /// DRAGDROPLIST (non inheritable): prepare the Drag & Drop callbacks to
    /// support drag and drop of items between lists (IupList or IupFlatList), in
    /// the same IUP application.
    /// Drag & Drop attributes still need to be set in order to activate the drag &
    /// drop support, so the application can control if this list will be source
    /// and/or target.
    /// Default: NO.
    /// (since 3.10)
    pub fn getDragDropList(self: *Self) bool {
        return c.getBoolAttribute(self, "DRAGDROPLIST");
    }


    /// 
    /// DRAGDROPLIST (non inheritable): prepare the Drag & Drop callbacks to
    /// support drag and drop of items between lists (IupList or IupFlatList), in
    /// the same IUP application.
    /// Drag & Drop attributes still need to be set in order to activate the drag &
    /// drop support, so the application can control if this list will be source
    /// and/or target.
    /// Default: NO.
    /// (since 3.10)
    pub fn setDragDropList(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DRAGDROPLIST", arg);
    }


    /// 
    /// REMOVEITEM (write-only): removes the given value.
    /// value starts at 1.
    /// If value is NULL or "ALL" removes all the items.
    /// Ignored if set before map.
    /// (since 3.0)
    pub fn setRemoveItem(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "REMOVEITEM", arg);
    }


    /// 
    /// TOPITEM (write-only): position the given item at the top of the list or
    /// near to make it visible.
    /// Valid only when DROPDOWN=NO.
    /// (since 3.0)
    pub fn setTopItem(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "TOPITEM", arg);
    }

    pub fn getFontSize(self: *Self) i32 {
        return c.getIntAttribute(self, "FONTSIZE");
    }

    pub fn setFontSize(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "FONTSIZE", arg);
    }

    pub fn getNaturalSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "NATURALSIZE");
        return Size.parse(str);
    }

    pub fn getDropTypes(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "DROPTYPES");
    }

    pub fn setDropTypes(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "DROPTYPES", arg);
    }

    pub fn getUserSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "USERSIZE");
        return Size.parse(str);
    }

    pub fn setUserSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "USERSIZE", value);
    }

    pub fn getTipDelay(self: *Self) i32 {
        return c.getIntAttribute(self, "TIPDELAY");
    }

    pub fn setTipDelay(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "TIPDELAY", arg);
    }


    /// 
    /// VISIBLEITEMS [Windows and Motif Only]: Number of items that are visible
    /// when DROPDOWN=YES is used for the dropdown list.
    /// Default: 5.
    pub fn getVisibleItems(self: *Self) i32 {
        return c.getIntAttribute(self, "VISIBLEITEMS");
    }


    /// 
    /// VISIBLEITEMS [Windows and Motif Only]: Number of items that are visible
    /// when DROPDOWN=YES is used for the dropdown list.
    /// Default: 5.
    pub fn setVisibleItems(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "VISIBLEITEMS", arg);
    }


    /// 
    /// SCROLLBAR (creation only): Associates automatic scrollbars to the list when DROPDOWN=NO.
    /// Can be: "YES" or "NO" (none).
    /// Default: "YES".
    /// For all systems, when SCROLLBAR=YES the natural size will always include
    /// its size even if the native system hides the scrollbars.
    /// If AUTOHIDE=YES scrollbars are shown only if they are necessary, by default AUTOHIDE=YES.
    /// In Motif, SCROLLBAR=NO is not supported and if EDITBOX=YES the horizontal
    /// scrollbar is never shown.
    /// When DROPDOWN=YES the scrollbars are system dependent, and do NOT depend on
    /// the SCROLLBAR or AUTOHIDE attributes.
    /// Usually the scrollbars are shown if necessary.
    /// In GTK, scrollbars are never shown and all items are always visible.
    /// In Motif, the horizontal scrollbar is never shown.
    /// In Windows, if DROPEXPAND=YES then the horizontal scrollbar is never shown.
    pub fn getScrollBar(self: *Self) bool {
        return c.getBoolAttribute(self, "SCROLLBAR");
    }


    /// 
    /// SCROLLBAR (creation only): Associates automatic scrollbars to the list when DROPDOWN=NO.
    /// Can be: "YES" or "NO" (none).
    /// Default: "YES".
    /// For all systems, when SCROLLBAR=YES the natural size will always include
    /// its size even if the native system hides the scrollbars.
    /// If AUTOHIDE=YES scrollbars are shown only if they are necessary, by default AUTOHIDE=YES.
    /// In Motif, SCROLLBAR=NO is not supported and if EDITBOX=YES the horizontal
    /// scrollbar is never shown.
    /// When DROPDOWN=YES the scrollbars are system dependent, and do NOT depend on
    /// the SCROLLBAR or AUTOHIDE attributes.
    /// Usually the scrollbars are shown if necessary.
    /// In GTK, scrollbars are never shown and all items are always visible.
    /// In Motif, the horizontal scrollbar is never shown.
    /// In Windows, if DROPEXPAND=YES then the horizontal scrollbar is never shown.
    pub fn setScrollBar(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "SCROLLBAR", arg);
    }

    pub fn getDragStart(self: *Self) iup.XYPos {
        var str = c.getStrAttribute(self, "DRAGSTART");
        return iup.XYPos.parse(str, ',');
    }

    pub fn setDragStart(self: *Self, x: i32, y: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
        c.setStrAttribute(self, "DRAGSTART", value);
    }


    /// 
    /// PROPAGATEFOCUS(non inheritable): enables the focus callback forwarding to
    /// the next native parent with FOCUS_CB defined.
    /// Default: NO.
    /// (since 3.23)
    pub fn getPropagateFocus(self: *Self) bool {
        return c.getBoolAttribute(self, "PROPAGATEFOCUS");
    }


    /// 
    /// PROPAGATEFOCUS(non inheritable): enables the focus callback forwarding to
    /// the next native parent with FOCUS_CB defined.
    /// Default: NO.
    /// (since 3.23)
    pub fn setPropagateFocus(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "PROPAGATEFOCUS", arg);
    }


    /// 
    /// BGCOLOR: Background color of the text.
    /// Default: the global attribute TXTBGCOLOR.
    /// In GTK does nothing when DROPDOWN=Yes.
    /// In GTK older than 2.12, the editbox of a dropdown will not follow the list
    /// attributes: FONT, BGCOLOR, FGCOLOR and SPACING.
    pub fn getBgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "BGCOLOR");
    }


    /// 
    /// BGCOLOR: Background color of the text.
    /// Default: the global attribute TXTBGCOLOR.
    /// In GTK does nothing when DROPDOWN=Yes.
    /// In GTK older than 2.12, the editbox of a dropdown will not follow the list
    /// attributes: FONT, BGCOLOR, FGCOLOR and SPACING.
    pub fn setBgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "BGCOLOR", rgb);
    }

    pub fn getTipBalloonTitle(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "TIPBALLOONTITLE");
    }

    pub fn setTipBalloonTitle(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "TIPBALLOONTITLE", arg);
    }

    pub fn getDropTarget(self: *Self) bool {
        return c.getBoolAttribute(self, "DROPTARGET");
    }

    pub fn setDropTarget(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DROPTARGET", arg);
    }


    /// 
    /// VALUEMASKED (non inheritable) (write-only): sets VALUE but first checks if
    /// it is validated by MASK.
    /// If not does nothing.
    /// Works only when EDITBOX=YES.
    /// (since 3.13)
    pub fn setValueMasked(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "VALUEMASKED", arg);
    }

    pub fn getDragSource(self: *Self) bool {
        return c.getBoolAttribute(self, "DRAGSOURCE");
    }

    pub fn setDragSource(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "DRAGSOURCE", arg);
    }

    pub fn getFloating(self: *Self) ?Floating {
        var ret = c.getStrAttribute(self, "FLOATING");

        if (std.ascii.eqlIgnoreCase("YES", ret)) return .Yes;
        if (std.ascii.eqlIgnoreCase("IGNORE", ret)) return .Ignore;
        if (std.ascii.eqlIgnoreCase("NO", ret)) return .No;
        return null;
    }

    pub fn setFloating(self: *Self, arg: ?Floating) void {
        if (arg) |value| switch (value) {
            .Yes => c.setStrAttribute(self, "FLOATING", "YES"),
            .Ignore => c.setStrAttribute(self, "FLOATING", "IGNORE"),
            .No => c.setStrAttribute(self, "FLOATING", "NO"),
        } else {
            c.clearAttribute(self, "FLOATING");
        }
    }

    pub fn getNormalizerGroup(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "NORMALIZERGROUP");
    }

    pub fn setNormalizerGroup(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "NORMALIZERGROUP", arg);
    }


    /// 
    /// SPACING: internal padding for each item.
    /// Notice that vertically the distance between each item will be actually 2x
    /// the spacing.
    /// It also affects the horizontal margin of the item.
    /// In Windows, the text is aligned at the top left of the item always.
    /// Valid only when DROPDOWN=NO.
    /// (since 3.0)
    pub fn getSpacing(self: *Self) i32 {
        return c.getIntAttribute(self, "SPACING");
    }


    /// 
    /// SPACING: internal padding for each item.
    /// Notice that vertically the distance between each item will be actually 2x
    /// the spacing.
    /// It also affects the horizontal margin of the item.
    /// In Windows, the text is aligned at the top left of the item always.
    /// Valid only when DROPDOWN=NO.
    /// (since 3.0)
    pub fn setSpacing(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "SPACING", arg);
    }

    pub fn setInsertItem(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "INSERTITEM", arg);
    }

    pub fn getRasterSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "RASTERSIZE");
        return Size.parse(str);
    }

    pub fn setRasterSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "RASTERSIZE", value);
    }

    pub fn setScrollTopOs(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "SCROLLTOPOS", arg);
    }

    pub fn setScrollTo(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "SCROLLTO", arg);
    }

    pub fn getTipFgColor(self: *Self) ?iup.Rgb {
        return c.getRgb(self, "TIPFGCOLOR");
    }

    pub fn setTipFgColor(self: *Self, rgb: iup.Rgb) void {
        c.setRgb(self, "TIPFGCOLOR", rgb);
    }

    pub fn getControlId(self: *Self) i32 {
        return c.getIntAttribute(self, "CONTROLID");
    }

    pub fn setControlId(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "CONTROLID", arg);
    }


    /// 
    /// CSPACING: same as SPACING but using the units of the vertical part of the
    /// SIZE attribute.
    /// It will actually set the SPACING attribute.
    /// (since 3.29)
    pub fn getCSpacing(self: *Self) i32 {
        return c.getIntAttribute(self, "CSPACING");
    }


    /// 
    /// CSPACING: same as SPACING but using the units of the vertical part of the
    /// SIZE attribute.
    /// It will actually set the SPACING attribute.
    /// (since 3.29)
    pub fn setCSpacing(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "CSPACING", arg);
    }

    pub fn getFontFace(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FONTFACE");
    }

    pub fn setFontFace(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FONTFACE", arg);
    }


    /// 
    /// VISIBLECOLUMNS: Defines the number of visible columns for the Natural Size,
    /// this means that will act also as minimum number of visible columns.
    /// It uses a wider character size then the one used for the SIZE attribute so
    /// strings will fit better without the need of extra columns.
    /// Set this attribute to speed Natural Size computation for very large lists.
    /// (since 3.0)
    pub fn getVisibleColumns(self: *Self) i32 {
        return c.getIntAttribute(self, "VISIBLECOLUMNS");
    }


    /// 
    /// VISIBLECOLUMNS: Defines the number of visible columns for the Natural Size,
    /// this means that will act also as minimum number of visible columns.
    /// It uses a wider character size then the one used for the SIZE attribute so
    /// strings will fit better without the need of extra columns.
    /// Set this attribute to speed Natural Size computation for very large lists.
    /// (since 3.0)
    pub fn setVisibleColumns(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "VISIBLECOLUMNS", arg);
    }

    pub fn getMaskInt(self: *Self) iup.Range {
        var str = c.getStrAttribute(self, "MASKINT");
        return iup.Range.parse(str, ',');
    }

    pub fn setMaskInt(self: *Self, begin: i32, end: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.Range.intIntToString(&buffer, begin, end, ',');
        c.setStrAttribute(self, "MASKINT", value);
    }


    /// 
    /// APPENDITEM (write-only): inserts an item after the last item.
    /// Ignored if set before map.
    /// (since 3.0)
    pub fn setAppendItem(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "APPENDITEM", arg);
    }

    pub fn getName(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "NAME");
    }

    pub fn setName(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "NAME", arg);
    }

    pub fn getMaskCasei(self: *Self) bool {
        return c.getBoolAttribute(self, "MASKCASEI");
    }

    pub fn setMaskCasei(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "MASKCASEI", arg);
    }

    pub fn getTipBalloonTitleIcon(self: *Self) bool {
        return c.getBoolAttribute(self, "TIPBALLOONTITLEICON");
    }

    pub fn setTipBalloonTitleIcon(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TIPBALLOONTITLEICON", arg);
    }

    pub fn getSelectionPos(self: *Self) iup.Range {
        var str = c.getStrAttribute(self, "SELECTIONPOS");
        return iup.Range.parse(str, ',');
    }

    pub fn setSelectionPos(self: *Self, begin: i32, end: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.Range.intIntToString(&buffer, begin, end, ',');
        c.setStrAttribute(self, "SELECTIONPOS", value);
    }


    /// 
    /// VALUE (non inheritable): Depends on the DROPDOWN+EDITBOX combination:
    /// EDITBOX=YES: Text entered by the user.
    /// MULTIPLE=YES: Sequence of '+' and '-' symbols indicating the state of each item.
    /// When setting this value, the user must provide the same amount of '+' and
    /// '-' symbols as the amount of items in the list, otherwise the specified
    /// items will be deselected.
    /// Others: Integer number representing the selected item in the list (begins
    /// at 1).
    /// It can be zero if there is no selected item.
    /// (In Motif when DROPDOWN=YES there is always an item selected, except when
    /// the list is empty).
    /// Should return a non NULL value, even when the list is empty or the text box
    /// is empty.
    /// It can be NULL when no item selected (since 3.0).
    /// The state=0 is simulated internally by IUP in all systems.
    /// If you add or remove items to/from the list and you count on the state=0
    /// value, then after adding/removing items set the VALUE attribute to ensure
    /// proper state=0 value.
    /// The non changed items marked with 'x' are simulated internally by IUP in
    /// all systems.
    /// If you add or remove items to/from the list and you count on the 'x'
    /// values, then after adding/removing items set the VALUE attribute to ensure
    /// proper 'x' values.
    pub fn getValue(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "VALUE");
    }


    /// 
    /// VALUE (non inheritable): Depends on the DROPDOWN+EDITBOX combination:
    /// EDITBOX=YES: Text entered by the user.
    /// MULTIPLE=YES: Sequence of '+' and '-' symbols indicating the state of each item.
    /// When setting this value, the user must provide the same amount of '+' and
    /// '-' symbols as the amount of items in the list, otherwise the specified
    /// items will be deselected.
    /// Others: Integer number representing the selected item in the list (begins
    /// at 1).
    /// It can be zero if there is no selected item.
    /// (In Motif when DROPDOWN=YES there is always an item selected, except when
    /// the list is empty).
    /// Should return a non NULL value, even when the list is empty or the text box
    /// is empty.
    /// It can be NULL when no item selected (since 3.0).
    /// The state=0 is simulated internally by IUP in all systems.
    /// If you add or remove items to/from the list and you count on the state=0
    /// value, then after adding/removing items set the VALUE attribute to ensure
    /// proper state=0 value.
    /// The non changed items marked with 'x' are simulated internally by IUP in
    /// all systems.
    /// If you add or remove items to/from the list and you count on the 'x'
    /// values, then after adding/removing items set the VALUE attribute to ensure
    /// proper 'x' values.
    pub fn setValue(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "VALUE", arg);
    }

    pub fn getFilter(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FILTER");
    }

    pub fn setFilter(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FILTER", arg);
    }

    pub fn getSelectedText(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "SELECTEDTEXT");
    }

    pub fn setSelectedText(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "SELECTEDTEXT", arg);
    }

    pub fn getCPadding(self: *Self) Size {
        var str = c.getStrAttribute(self, "CPADDING");
        return Size.parse(str);
    }

    pub fn setCPadding(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "CPADDING", value);
    }


    /// 
    /// ACTIVE, FONT, EXPAND, SCREENPOSITION, POSITION, MINSIZE, MAXSIZE, WID, TIP,
    /// RASTERSIZE, ZORDER, VISIBLE, THEME: also accepted.
    pub fn getActive(self: *Self) bool {
        return c.getBoolAttribute(self, "ACTIVE");
    }


    /// 
    /// ACTIVE, FONT, EXPAND, SCREENPOSITION, POSITION, MINSIZE, MAXSIZE, WID, TIP,
    /// RASTERSIZE, ZORDER, VISIBLE, THEME: also accepted.
    pub fn setActive(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "ACTIVE", arg);
    }

    pub fn getTipVisible(self: *Self) bool {
        return c.getBoolAttribute(self, "TIPVISIBLE");
    }

    pub fn setTipVisible(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TIPVISIBLE", arg);
    }

    pub fn getCueBanner(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "CUEBANNER");
    }

    pub fn setCueBanner(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "CUEBANNER", arg);
    }


    /// 
    /// SHOWDROPDOWN (write-only): opens or closes the dropdown list.
    /// Can be "YES" or "NO".
    /// Valid only when DROPDOWN=YES.
    /// Ignored if set before map.
    pub fn setShowDropDown(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "SHOWDROPDOWN", arg);
    }

    pub fn getExpandWeight(self: *Self) f64 {
        return c.getDoubleAttribute(self, "EXPANDWEIGHT");
    }

    pub fn setExpandWeight(self: *Self, arg: f64) void {
        c.setDoubleAttribute(self, "EXPANDWEIGHT", arg);
    }

    pub fn getMinSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "MINSIZE");
        return Size.parse(str);
    }

    pub fn setMinSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        c.setStrAttribute(self, "MINSIZE", value);
    }

    pub fn getNTheme(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "NTHEME");
    }

    pub fn setNTheme(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "NTHEME", arg);
    }

    pub fn getCharSize(self: *Self) Size {
        var str = c.getStrAttribute(self, "CHARSIZE");
        return Size.parse(str);
    }


    /// 
    /// APPEND, CARET, CARETPOS, CLIPBOARD, CUEBANNER, FILTER, INSERT, PADDING,
    /// MASK, NC, READONLY, SELECTEDTEXT, SELECTION, SELECTIONPOS, SCROLLTO,
    /// SCROLLTOPOS : Same as the IupText attributes, but are valid only when
    /// EDITBOX=YES and effective only for the edit box inside the list.
    pub fn getCaretPos(self: *Self) i32 {
        return c.getIntAttribute(self, "CARETPOS");
    }


    /// 
    /// APPEND, CARET, CARETPOS, CLIPBOARD, CUEBANNER, FILTER, INSERT, PADDING,
    /// MASK, NC, READONLY, SELECTEDTEXT, SELECTION, SELECTIONPOS, SCROLLTO,
    /// SCROLLTOPOS : Same as the IupText attributes, but are valid only when
    /// EDITBOX=YES and effective only for the edit box inside the list.
    pub fn setCaretPos(self: *Self, arg: i32) void {
        c.setIntAttribute(self, "CARETPOS", arg);
    }

    pub fn getMask(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "MASK");
    }

    pub fn setMask(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "MASK", arg);
    }

    pub fn getDragTypes(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "DRAGTYPES");
    }

    pub fn setDragTypes(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "DRAGTYPES", arg);
    }


    /// 
    /// AUTOHIDE: scrollbars are shown only if they are necessary.
    /// Default: "YES".
    /// When DROPDOWN=YES the scrollbars are system dependent, and do NOT depend on
    /// the SCROLLBAR or AUTOHIDE attributes.
    /// Usually the scrollbars are shown if necessary.
    /// In GTK, scrollbars are never shown and all items are always visible.
    /// In Motif, the horizontal scrollbar is never shown.
    /// In Windows, if DROPEXPAND=YES then the horizontal scrollbar is never shown.
    pub fn getAutoHide(self: *Self) bool {
        return c.getBoolAttribute(self, "AUTOHIDE");
    }


    /// 
    /// AUTOHIDE: scrollbars are shown only if they are necessary.
    /// Default: "YES".
    /// When DROPDOWN=YES the scrollbars are system dependent, and do NOT depend on
    /// the SCROLLBAR or AUTOHIDE attributes.
    /// Usually the scrollbars are shown if necessary.
    /// In GTK, scrollbars are never shown and all items are always visible.
    /// In Motif, the horizontal scrollbar is never shown.
    /// In Windows, if DROPEXPAND=YES then the horizontal scrollbar is never shown.
    pub fn setAutoHide(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "AUTOHIDE", arg);
    }

    pub fn getFontStyle(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FONTSTYLE");
    }

    pub fn setFontStyle(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FONTSTYLE", arg);
    }


    /// 
    /// AUTOREDRAW [Windows] (non inheritable): automatically redraws the list when
    /// something has change.
    /// Set to NO to add many items to the list without updating the display.
    /// Default: "YES".
    /// (since 3.3)
    pub fn setAutoRedraw(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "AUTOREDRAW", arg);
    }

    pub fn getTouch(self: *Self) bool {
        return c.getBoolAttribute(self, "TOUCH");
    }

    pub fn setTouch(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "TOUCH", arg);
    }

    pub fn getClipboard(self: *Self) ?Clipboard {
        var ret = c.getStrAttribute(self, "CLIPBOARD");

        if (std.ascii.eqlIgnoreCase("COPY", ret)) return .Copy;
        if (std.ascii.eqlIgnoreCase("CUT", ret)) return .Cut;
        if (std.ascii.eqlIgnoreCase("PASTE", ret)) return .Paste;
        if (std.ascii.eqlIgnoreCase("CLEAR", ret)) return .Clear;
        if (std.ascii.eqlIgnoreCase("UNDO", ret)) return .Undo;
        if (std.ascii.eqlIgnoreCase("REDO", ret)) return .Redo;
        return null;
    }

    pub fn setClipboard(self: *Self, arg: ?Clipboard) void {
        if (arg) |value| switch (value) {
            .Copy => c.setStrAttribute(self, "CLIPBOARD", "COPY"),
            .Cut => c.setStrAttribute(self, "CLIPBOARD", "CUT"),
            .Paste => c.setStrAttribute(self, "CLIPBOARD", "PASTE"),
            .Clear => c.setStrAttribute(self, "CLIPBOARD", "CLEAR"),
            .Undo => c.setStrAttribute(self, "CLIPBOARD", "UNDO"),
            .Redo => c.setStrAttribute(self, "CLIPBOARD", "REDO"),
        } else {
            c.clearAttribute(self, "CLIPBOARD");
        }
    }

    pub fn getReadonly(self: *Self) bool {
        return c.getBoolAttribute(self, "READONLY");
    }

    pub fn setReadonly(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "READONLY", arg);
    }


    /// 
    /// APPEND, CARET, CARETPOS, CLIPBOARD, CUEBANNER, FILTER, INSERT, PADDING,
    /// MASK, NC, READONLY, SELECTEDTEXT, SELECTION, SELECTIONPOS, SCROLLTO,
    /// SCROLLTOPOS : Same as the IupText attributes, but are valid only when
    /// EDITBOX=YES and effective only for the edit box inside the list.
    pub fn setAppend(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "APPEND", arg);
    }

    pub fn getDragCursor(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "DRAGCURSOR");
    }

    pub fn setDragCursor(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "DRAGCURSOR", arg);
    }

    pub fn getMaskNoEmpty(self: *Self) bool {
        return c.getBoolAttribute(self, "MASKNOEMPTY");
    }

    pub fn setMaskNoEmpty(self: *Self, arg: bool) void {
        c.setBoolAttribute(self, "MASKNOEMPTY", arg);
    }


    /// 
    /// In GTK older than 2.12, the editbox of a dropdown will not follow the list
    /// attributes: FONT, BGCOLOR, FGCOLOR and SPACING.
    pub fn getFont(self: *Self) [:0]const u8 {
        return c.getStrAttribute(self, "FONT");
    }


    /// 
    /// In GTK older than 2.12, the editbox of a dropdown will not follow the list
    /// attributes: FONT, BGCOLOR, FGCOLOR and SPACING.
    pub fn setFont(self: *Self, arg: [:0]const u8) void {
        c.setStrAttribute(self, "FONT", arg);
    }

    pub fn setTouchCallback(self: *Self, callback: ?OnTouchFn) void {
        const Handler = CallbackHandler(Self, OnTouchFn, "TOUCH_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// K_ANY K_ANY Action generated when a keyboard event occurs.
    /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
    /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
    /// c: identifier of typed key.
    /// Please refer to the Keyboard Codes table for a list of possible values.
    /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
    /// the control and not propagated.
    /// If returns IUP_CONTINUE, the key will be processed and the event will be
    /// propagated to the parent of the element receiving it, this is the default behavior.
    /// If returns IUP_DEFAULT the key is processed but it is not propagated.
    /// IUP_CLOSE will be processed.
    /// Notes Keyboard callbacks depend on the keyboard usage of the control with
    /// the focus.
    /// So if you return IUP_IGNORE the control will usually not process the key.
    /// But be aware that sometimes the control process the key in another event so
    /// even returning IUP_IGNORE the key can get processed.
    /// Although it will not be propagated.
    /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
    /// the IUP_CONTINUE return value to work while the control is in focus.
    /// If the callback does not exists it is automatically propagated to the
    /// parent of the element.
    /// K_* callbacks All defined keys are also callbacks of any element, called
    /// when the respective key is activated.
    /// For example: "K_cC" is also a callback activated when the user press
    /// Ctrl+C, when the focus is at the element or at a children with focus.
    /// This is the way an application can create shortcut keys, also called hot keys.
    /// These callbacks are not available in IupLua.
    /// Affects All elements with keyboard interaction.
    pub fn setKAnyCallback(self: *Self, callback: ?OnKAnyFn) void {
        const Handler = CallbackHandler(Self, OnKAnyFn, "K_ANY");
        Handler.setCallback(self, callback);
    }

    /// 
    /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
    /// In Motif is also activated by the Help button in some workstations keyboard.
    /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Returns: IUP_CLOSE will be processed.
    /// Affects All elements with user interaction.
    pub fn setHelpCallback(self: *Self, callback: ?OnHelpFn) void {
        const Handler = CallbackHandler(Self, OnHelpFn, "HELP_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDropMotionCallback(self: *Self, callback: ?OnDropMotionFn) void {
        const Handler = CallbackHandler(Self, OnDropMotionFn, "DROPMOTION_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragEndCallback(self: *Self, callback: ?OnDragEndFn) void {
        const Handler = CallbackHandler(Self, OnDragEndFn, "DRAGEND_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragBeginCallback(self: *Self, callback: ?OnDragBeginFn) void {
        const Handler = CallbackHandler(Self, OnDragBeginFn, "DRAGBEGIN_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// ACTION ACTION Action generated when the element is activated.
    /// Affects each element differently.
    /// Callback int function(Ihandle *ih); [in C] ih:action() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// In some elements, this callback may receive more parameters, apart from ih.
    /// Please refer to each element's documentation.
    /// Affects IupButton, IupItem, IupList, IupText, IupCanvas, IupMultiline,
    /// IupToggle
    pub fn setActionCallback(self: *Self, callback: ?OnActionFn) void {
        const Handler = CallbackHandler(Self, OnActionFn, "ACTION");
        Handler.setCallback(self, callback);
    }

    pub fn setMultiTouchCallback(self: *Self, callback: ?OnMultiTouchFn) void {
        const Handler = CallbackHandler(Self, OnMultiTouchFn, "MULTITOUCH_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// MOTION_CB MOTION_CB Action generated when the mouse moves.
    /// Callback int function(Ihandle *ih, int x, int y, char *status); [in C]
    /// ih:motion_cb(x, y: number, status: string) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of mouse buttons and certain keyboard keys at the moment the
    /// event was generated.
    /// The same macros used for BUTTON_CB can be used for this status.
    /// Notes Between press and release all mouse events are redirected only to
    /// this control, even if the cursor moves outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupGLCanvas
    pub fn setMotionCallback(self: *Self, callback: ?OnMotionFn) void {
        const Handler = CallbackHandler(Self, OnMotionFn, "MOTION_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setMapCallback(self: *Self, callback: ?OnMapFn) void {
        const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// DRAGDROP_CB: Action generated when an internal drag and drop is executed.
    /// Only active if SHOWDRAGDROP=YES.
    /// (since 3.7) int function(Ihandle *ih, int drag_id, int drop_id, int
    /// isshift, int iscontrol); [in C] ih:dragdrop_cb(drag_id, drop_id, isshift,
    /// iscontrol: number) -> (ret: number) [in Lua]
    pub fn setDragDropCallback(self: *Self, callback: ?OnDragDropFn) void {
        const Handler = CallbackHandler(Self, OnDragDropFn, "DRAGDROP_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also LEAVEWINDOW_CB
    pub fn setEnterWindowCallback(self: *Self, callback: ?OnEnterWindowFn) void {
        const Handler = CallbackHandler(Self, OnEnterWindowFn, "ENTERWINDOW_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
    /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Notes If the dialog is visible then it is hidden before it is destroyed.
    /// The callback will be called right after it is hidden.
    /// The callback will be called before all other destroy procedures.
    /// For instance, if the element has children then it is called before the
    /// children are destroyed.
    /// For language binding implementations use the callback name "LDESTROY_CB" to
    /// release memory allocated by the binding for the element.
    /// Also the callback will be called before the language callback.
    /// Affects All.
    pub fn setDestroyCallback(self: *Self, callback: ?OnDestroyFn) void {
        const Handler = CallbackHandler(Self, OnDestroyFn, "DESTROY_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDropDataCallback(self: *Self, callback: ?OnDropDataFn) void {
        const Handler = CallbackHandler(Self, OnDropDataFn, "DROPDATA_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
    /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Affects All elements with user interaction, except menus.
    /// In Windows, there are restrictions when using this callback.
    /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
    /// function calls that display or activate a window.
    /// This causes the thread to yield control and can cause the application to
    /// stop responding to messages.
    /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
    pub fn setKillFocusCallback(self: *Self, callback: ?OnKillFocusFn) void {
        const Handler = CallbackHandler(Self, OnKillFocusFn, "KILLFOCUS_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// DBLCLICK_CB: Action generated when the user double click an item.
    /// Called only when DROPDOWN=NO.
    /// (since 3.0) int function (Ihandle *ih, int item, char *text); [in
    /// C]ih:dblclick_cb(item: number, text: string) -> (ret: number) [in Lua]
    pub fn setDblClickCallback(self: *Self, callback: ?OnDblClickFn) void {
        const Handler = CallbackHandler(Self, OnDblClickFn, "DBLCLICK_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragDataCallback(self: *Self, callback: ?OnDragDataFn) void {
        const Handler = CallbackHandler(Self, OnDragDataFn, "DRAGDATA_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragDataSizeCallback(self: *Self, callback: ?OnDragDataSizeFn) void {
        const Handler = CallbackHandler(Self, OnDragDataSizeFn, "DRAGDATASIZE_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// DROPFILES_CB DROPFILES_CB Action called when a file is "dropped" into the control.
    /// When several files are dropped at once, the callback is called several
    /// times, once for each file.
    /// If defined after the element is mapped then the attribute DROPFILESTARGET
    /// must be set to YES.
    /// [Windows and GTK Only] (GTK 2.6) Callback int function(Ihandle *ih, const
    /// char* filename, int num, int x, int y); [in C] ih:dropfiles_cb(filename:
    /// string; num, x, y: number) -> (ret: number) [in Lua] ih: identifier of the
    /// element that activated the event.
    /// filename: Name of the dropped file.
    /// num: Number index of the dropped file.
    /// If several files are dropped, num is the index of the dropped file starting
    /// from "total-1" to "0".
    /// x: X coordinate of the point where the user released the mouse button.
    /// y: Y coordinate of the point where the user released the mouse button.
    /// Returns: If IUP_IGNORE is returned the callback will NOT be called for the
    /// next dropped files, and the processing of dropped files will be interrupted.
    /// Affects IupDialog, IupCanvas, IupGLCanvas, IupText, IupList
    pub fn setDropFilesCallback(self: *Self, callback: ?OnDropFilesFn) void {
        const Handler = CallbackHandler(Self, OnDropFilesFn, "DROPFILES_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setUnmapCallback(self: *Self, callback: ?OnUnmapFn) void {
        const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// This is the same CARET_CB callback definition as for the IupText.
    pub fn setCaretCallback(self: *Self, callback: ?OnCaretFn) void {
        const Handler = CallbackHandler(Self, OnCaretFn, "CARET_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
    /// This callback is called after the KILLFOCUS_CB of the element that loosed
    /// the focus.
    /// The IupGetFocus function during the callback returns the element that
    /// loosed the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that received keyboard focus.
    /// Affects All elements with user interaction, except menus.
    /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
    pub fn setGetFocusCallback(self: *Self, callback: ?OnGetFocusFn) void {
        const Handler = CallbackHandler(Self, OnGetFocusFn, "GETFOCUS_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// BUTTON_CB BUTTON_CB Action generated when a mouse button is pressed or released.
    /// Callback int function(Ihandle* ih, int button, int pressed, int x, int y,
    /// char* status); [in C] ih:button_cb(button, pressed, x, y: number, status:
    /// string) -> (ret: number) [in Lua] ih: identifies the element that activated
    /// the event.
    /// button: identifies the activated mouse button: IUP_BUTTON1 - left mouse
    /// button (button 1); IUP_BUTTON2 - middle mouse button (button 2);
    /// IUP_BUTTON3 - right mouse button (button 3).
    /// pressed: indicates the state of the button: 0 - mouse button was released;
    /// 1 - mouse button was pressed.
    /// x, y: position in the canvas where the event has occurred, in pixels.
    /// status: status of the mouse buttons and some keyboard keys at the moment
    /// the event is generated.
    /// The following macros must be used for verification: iup_isshift(status)
    /// iup_iscontrol(status) iup_isbutton1(status) iup_isbutton2(status)
    /// iup_isbutton3(status) iup_isbutton4(status) iup_isbutton5(status)
    /// iup_isdouble(status) iup_isalt(status) iup_issys(status) They return 1 if
    /// the respective key or button is pressed, and 0 otherwise.
    /// These macros are also available in Lua, returning a boolean.
    /// Returns: IUP_CLOSE will be processed.
    /// On some controls if IUP_IGNORE is returned the action is ignored (this is
    /// system dependent).
    /// Notes This callback can be used to customize a button behavior.
    /// For a standard button behavior use the ACTION callback of the IupButton.
    /// For a single click the callback is called twice, one for pressed=1 and one
    /// for pressed=0.
    /// Only after both calls the ACTION callback is called.
    /// In Windows, if a dialog is shown or popup in any situation there could be
    /// unpredictable results because the native system still has processing to be
    /// done even after the callback is called.
    /// A double click is preceded by two single clicks, one for pressed=1 and one
    /// for pressed=0, and followed by a press=0, all three without the double
    /// click flag set.
    /// In GTK, it is preceded by an additional two single clicks sequence.
    /// For example, for one double click all the following calls are made:
    /// BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) BUTTON_CB(but=1 (0), x=154, y=83 [
    /// 1 ]) BUTTON_CB(but=1 (1), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1
    /// (0), x=154, y=83 [ 1 ]) (in GTK only) BUTTON_CB(but=1 (1), x=154, y=83 [ 1
    /// D ]) BUTTON_CB(but=1 (0), x=154, y=83 [ 1 ]) Between press and release all
    /// mouse events are redirected only to this control, even if the cursor moves
    /// outside the element.
    /// So the BUTTON_CB callback when released and the MOTION_CB callback can be
    /// called with coordinates outside the element rectangle.
    /// Affects IupCanvas, IupButton, IupText, IupList, IupGLCanvas
    pub fn setButtonCallback(self: *Self, callback: ?OnButtonFn) void {
        const Handler = CallbackHandler(Self, OnButtonFn, "BUTTON_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// VALUECHANGED_CB: Called after the value was interactively changed by the user.
    /// Called when the selection is changed or when the text is edited.
    /// (since 3.0) int function(Ihandle *ih); [in C]ih:valuechanged_cb() -> (ret:
    /// number) [in Lua]
    pub fn setValueChangedCallback(self: *Self, callback: ?OnValueChangedFn) void {
        const Handler = CallbackHandler(Self, OnValueChangedFn, "VALUECHANGED_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// DROPDOWN_CB: Action generated when the list of a dropdown is shown or hidden.
    /// Called only when DROPDOWN=YES.
    /// (since 3.0) int function (Ihandle *ih, int state); [in
    /// C]ih:dropdown_cb(state: boolean) -> (ret: number) [in Lua]
    pub fn setDropDownCallback(self: *Self, callback: ?OnDropDownFn) void {
        const Handler = CallbackHandler(Self, OnDropDownFn, "DROPDOWN_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// MULTISELECT_CB: Action generated when the state of an item in the multiple
    /// selection list is changed.
    /// But it is called only when the interaction is over.
    /// int function (Ihandle *ih, char *value); [in C]ih:multiselect_cb(value:
    /// string) -> (ret: number) [in Lua]
    pub fn setMultiSelectCallback(self: *Self, callback: ?OnMultiSelectFn) void {
        const Handler = CallbackHandler(Self, OnMultiSelectFn, "MULTISELECT_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setLDestroyCallback(self: *Self, callback: ?OnLDestroyFn) void {
        const Handler = CallbackHandler(Self, OnLDestroyFn, "LDESTROY_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also ENTERWINDOW_CB
    pub fn setLeaveWindowCallback(self: *Self, callback: ?OnLeaveWindowFn) void {
        const Handler = CallbackHandler(Self, OnLeaveWindowFn, "LEAVEWINDOW_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setPostMessageCallback(self: *Self, callback: ?OnPostMessageFn) void {
        const Handler = CallbackHandler(Self, OnPostMessageFn, "POSTMESSAGE_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// EDIT_CB: Action generated when the text in the text box is manually changed
    /// by the user, but before its value is actually updated.
    /// Valid only when EDITBOX=YES.
    /// int function(Ihandle *ih, int c, char *new_value); [in C]ih:edit_cb(c:
    /// number, new_value: string) -> (ret: number) [in Lua]
    pub fn setEditCallback(self: *Self, callback: ?OnEditFn) void {
        const Handler = CallbackHandler(Self, OnEditFn, "EDIT_CB");
        Handler.setCallback(self, callback);
    }
};

test "List FgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setFgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getFgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "List TipBalloon" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setTipBalloon(true).unwrap());
    defer item.deinit();

    var ret = item.getTipBalloon();

    try std.testing.expect(ret == true);
}

test "List HandleName" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setHandleName("Hello").unwrap());
    defer item.deinit();

    var ret = item.getHandleName();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "List TipBgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setTipBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTipBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "List Caret" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setCaret(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getCaret();

    try std.testing.expect(ret.lin == 9 and ret.col == 10);
}

test "List MaskDecimalSymbol" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setMaskDecimalSymbol("Hello").unwrap());
    defer item.deinit();

    var ret = item.getMaskDecimalSymbol();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "List VisibleItems" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setVisibleItems(42).unwrap());
    defer item.deinit();

    var ret = item.getVisibleItems();

    try std.testing.expect(ret == 42);
}

test "List MaxSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setMaxSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMaxSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "List Position" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setPosition(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getPosition();

    try std.testing.expect(ret.x == 9 and ret.y == 10);
}

test "List DropFilesTarget" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setDropFilesTarget(true).unwrap());
    defer item.deinit();

    var ret = item.getDropFilesTarget();

    try std.testing.expect(ret == true);
}

test "List Tip" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setTip("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTip();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "List DragSourceMove" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setDragSourceMove(true).unwrap());
    defer item.deinit();

    var ret = item.getDragSourceMove();

    try std.testing.expect(ret == true);
}

test "List Visible" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setVisible(true).unwrap());
    defer item.deinit();

    var ret = item.getVisible();

    try std.testing.expect(ret == true);
}

test "List Nc" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setNc(42).unwrap());
    defer item.deinit();

    var ret = item.getNc();

    try std.testing.expect(ret == 42);
}

test "List DragDrop" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setDragDrop(true).unwrap());
    defer item.deinit();

    var ret = item.getDragDrop();

    try std.testing.expect(ret == true);
}

test "List Theme" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setTheme("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTheme();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "List MaskReal" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setMaskReal(.Signed).unwrap());
    defer item.deinit();

    var ret = item.getMaskReal();

    try std.testing.expect(ret != null and ret.? == .Signed);
}

test "List DragCursorCopy" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setDragCursorCopy("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDragCursorCopy();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "List Expand" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setExpand(.Yes).unwrap());
    defer item.deinit();

    var ret = item.getExpand();

    try std.testing.expect(ret != null and ret.? == .Yes);
}

test "List VisibleLines" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setVisibleLines(42).unwrap());
    defer item.deinit();

    var ret = item.getVisibleLines();

    try std.testing.expect(ret == 42);
}

test "List Size" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "List Padding" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setPadding(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getPadding();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "List ValueString" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setValueString("Hello").unwrap());
    defer item.deinit();

    var ret = item.getValueString();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "List DropExpand" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setDropExpand(true).unwrap());
    defer item.deinit();

    var ret = item.getDropExpand();

    try std.testing.expect(ret == true);
}

test "List DragDropList" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setDragDropList(true).unwrap());
    defer item.deinit();

    var ret = item.getDragDropList();

    try std.testing.expect(ret == true);
}

test "List FontSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setFontSize(42).unwrap());
    defer item.deinit();

    var ret = item.getFontSize();

    try std.testing.expect(ret == 42);
}

test "List DropTypes" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setDropTypes("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDropTypes();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "List UserSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setUserSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getUserSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "List TipDelay" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setTipDelay(42).unwrap());
    defer item.deinit();

    var ret = item.getTipDelay();

    try std.testing.expect(ret == 42);
}

test "List VisibleItems" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setVisibleItems(42).unwrap());
    defer item.deinit();

    var ret = item.getVisibleItems();

    try std.testing.expect(ret == 42);
}

test "List ScrollBar" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setScrollBar(true).unwrap());
    defer item.deinit();

    var ret = item.getScrollBar();

    try std.testing.expect(ret == true);
}

test "List DragStart" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setDragStart(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getDragStart();

    try std.testing.expect(ret.x == 9 and ret.y == 10);
}

test "List PropagateFocus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setPropagateFocus(true).unwrap());
    defer item.deinit();

    var ret = item.getPropagateFocus();

    try std.testing.expect(ret == true);
}

test "List BgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "List TipBalloonTitle" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setTipBalloonTitle("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTipBalloonTitle();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "List DropTarget" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setDropTarget(true).unwrap());
    defer item.deinit();

    var ret = item.getDropTarget();

    try std.testing.expect(ret == true);
}

test "List DragSource" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setDragSource(true).unwrap());
    defer item.deinit();

    var ret = item.getDragSource();

    try std.testing.expect(ret == true);
}

test "List Floating" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setFloating(.Yes).unwrap());
    defer item.deinit();

    var ret = item.getFloating();

    try std.testing.expect(ret != null and ret.? == .Yes);
}

test "List NormalizerGroup" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setNormalizerGroup("Hello").unwrap());
    defer item.deinit();

    var ret = item.getNormalizerGroup();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "List Spacing" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setSpacing(42).unwrap());
    defer item.deinit();

    var ret = item.getSpacing();

    try std.testing.expect(ret == 42);
}

test "List RasterSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setRasterSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getRasterSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "List TipFgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setTipFgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTipFgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "List ControlId" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setControlId(42).unwrap());
    defer item.deinit();

    var ret = item.getControlId();

    try std.testing.expect(ret == 42);
}

test "List CSpacing" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setCSpacing(42).unwrap());
    defer item.deinit();

    var ret = item.getCSpacing();

    try std.testing.expect(ret == 42);
}

test "List FontFace" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setFontFace("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFontFace();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "List VisibleColumns" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setVisibleColumns(42).unwrap());
    defer item.deinit();

    var ret = item.getVisibleColumns();

    try std.testing.expect(ret == 42);
}

test "List MaskInt" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setMaskInt(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMaskInt();

    try std.testing.expect(ret.begin == 9 and ret.end == 10);
}

test "List Name" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setName("Hello").unwrap());
    defer item.deinit();

    var ret = item.getName();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "List MaskCasei" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setMaskCasei(true).unwrap());
    defer item.deinit();

    var ret = item.getMaskCasei();

    try std.testing.expect(ret == true);
}

test "List TipBalloonTitleIcon" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setTipBalloonTitleIcon(true).unwrap());
    defer item.deinit();

    var ret = item.getTipBalloonTitleIcon();

    try std.testing.expect(ret == true);
}

test "List SelectionPos" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setSelectionPos(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getSelectionPos();

    try std.testing.expect(ret.begin == 9 and ret.end == 10);
}

test "List Value" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setValue("Hello").unwrap());
    defer item.deinit();

    var ret = item.getValue();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "List Filter" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setFilter("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFilter();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "List SelectedText" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setSelectedText("Hello").unwrap());
    defer item.deinit();

    var ret = item.getSelectedText();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "List CPadding" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setCPadding(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getCPadding();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "List Active" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setActive(true).unwrap());
    defer item.deinit();

    var ret = item.getActive();

    try std.testing.expect(ret == true);
}

test "List TipVisible" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setTipVisible(true).unwrap());
    defer item.deinit();

    var ret = item.getTipVisible();

    try std.testing.expect(ret == true);
}

test "List CueBanner" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setCueBanner("Hello").unwrap());
    defer item.deinit();

    var ret = item.getCueBanner();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "List ExpandWeight" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setExpandWeight(3.14).unwrap());
    defer item.deinit();

    var ret = item.getExpandWeight();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "List MinSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setMinSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMinSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "List NTheme" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setNTheme("Hello").unwrap());
    defer item.deinit();

    var ret = item.getNTheme();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "List CaretPos" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setCaretPos(42).unwrap());
    defer item.deinit();

    var ret = item.getCaretPos();

    try std.testing.expect(ret == 42);
}

test "List Mask" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setMask("Hello").unwrap());
    defer item.deinit();

    var ret = item.getMask();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "List DragTypes" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setDragTypes("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDragTypes();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "List AutoHide" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setAutoHide(true).unwrap());
    defer item.deinit();

    var ret = item.getAutoHide();

    try std.testing.expect(ret == true);
}

test "List FontStyle" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setFontStyle("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFontStyle();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "List Touch" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setTouch(true).unwrap());
    defer item.deinit();

    var ret = item.getTouch();

    try std.testing.expect(ret == true);
}

test "List Clipboard" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setClipboard(.Copy).unwrap());
    defer item.deinit();

    var ret = item.getClipboard();

    try std.testing.expect(ret != null and ret.? == .Copy);
}

test "List Readonly" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setReadonly(true).unwrap());
    defer item.deinit();

    var ret = item.getReadonly();

    try std.testing.expect(ret == true);
}

test "List DragCursor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setDragCursor("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDragCursor();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "List MaskNoEmpty" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setMaskNoEmpty(true).unwrap());
    defer item.deinit();

    var ret = item.getMaskNoEmpty();

    try std.testing.expect(ret == true);
}

test "List Font" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.List.init().setFont("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFont();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}
