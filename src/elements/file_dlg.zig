// This code was generated by a tool.
// IUP Metadata Code Generator
// https://github.com/batiati/IUPMetadata
//
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.

const std = @import("std");

const interop = @import("../interop.zig");
const iup = @import("../iup.zig");

const Impl = @import("../impl.zig").Impl;
const CallbackHandler = @import("../callback_handler.zig").CallbackHandler;

const debug = std.debug;
const trait = std.meta.trait;

const Element = iup.Element;
const Handle = iup.Handle;
const Error = iup.Error;
const ChildrenIterator = iup.ChildrenIterator;
const Size = iup.Size;
const Margin = iup.Margin;

///
/// Creates the File Dialog element.
/// It is a predefined dialog for selecting files or a directory.
/// The dialog can be shown with the IupPopup function only.
pub const FileDlg = opaque {
    pub const CLASS_NAME = "filedlg";
    pub const NATIVE_TYPE = iup.NativeType.Dialog;
    const Self = @This();

    pub const OnFocusFn = fn (self: *Self, arg0: i32) anyerror!void;

    ///
    /// K_ANY K_ANY Action generated when a keyboard event occurs.
    /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
    /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
    /// c: identifier of typed key.
    /// Please refer to the Keyboard Codes table for a list of possible values.
    /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
    /// the control and not propagated.
    /// If returns IUP_CONTINUE, the key will be processed and the event will be
    /// propagated to the parent of the element receiving it, this is the default behavior.
    /// If returns IUP_DEFAULT the key is processed but it is not propagated.
    /// IUP_CLOSE will be processed.
    /// Notes Keyboard callbacks depend on the keyboard usage of the control with
    /// the focus.
    /// So if you return IUP_IGNORE the control will usually not process the key.
    /// But be aware that sometimes the control process the key in another event so
    /// even returning IUP_IGNORE the key can get processed.
    /// Although it will not be propagated.
    /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
    /// the IUP_CONTINUE return value to work while the control is in focus.
    /// If the callback does not exists it is automatically propagated to the
    /// parent of the element.
    /// K_* callbacks All defined keys are also callbacks of any element, called
    /// when the respective key is activated.
    /// For example: "K_cC" is also a callback activated when the user press
    /// Ctrl+C, when the focus is at the element or at a children with focus.
    /// This is the way an application can create shortcut keys, also called hot keys.
    /// These callbacks are not available in IupLua.
    /// Affects All elements with keyboard interaction.
    pub const OnKAnyFn = fn (self: *Self, arg0: i32) anyerror!void;

    ///
    /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
    /// In Motif is also activated by the Help button in some workstations keyboard.
    /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Returns: IUP_CLOSE will be processed.
    /// Affects All elements with user interaction.
    pub const OnHelpFn = fn (self: *Self) anyerror!void;

    ///
    /// CLOSE_CB CLOSE_CB Called just before a dialog is closed when the user
    /// clicks the close button of the title bar or an equivalent action.
    /// Callback int function(Ihandle *ih); [in C] ih:close_cb() -> (ret: number)
    /// [in Lua] ih: identifies the element that activated the event.
    /// Returns: if IUP_IGNORE, it prevents the dialog from being closed.
    /// If you destroy the dialog in this callback, you must return IUP_IGNORE.
    /// IUP_CLOSE will be processed.
    /// Affects IupDialog
    pub const OnCloseFn = fn (self: *Self) anyerror!void;

    pub const OnDropMotionFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: [:0]const u8) anyerror!void;

    pub const OnDragEndFn = fn (self: *Self, arg0: i32) anyerror!void;

    pub const OnDragBeginFn = fn (self: *Self, arg0: i32, arg1: i32) anyerror!void;

    ///
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnMapFn = fn (self: *Self) anyerror!void;

    ///
    /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also LEAVEWINDOW_CB
    pub const OnEnterWindowFn = fn (self: *Self) anyerror!void;

    ///
    /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
    /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Notes If the dialog is visible then it is hidden before it is destroyed.
    /// The callback will be called right after it is hidden.
    /// The callback will be called before all other destroy procedures.
    /// For instance, if the element has children then it is called before the
    /// children are destroyed.
    /// For language binding implementations use the callback name "LDESTROY_CB" to
    /// release memory allocated by the binding for the element.
    /// Also the callback will be called before the language callback.
    /// Affects All.
    pub const OnDestroyFn = fn (self: *Self) anyerror!void;

    pub const OnDropDataFn = fn (self: *Self, arg0: [:0]const u8, arg1: ?*anyopaque, arg2: i32, arg3: i32, arg4: i32) anyerror!void;

    ///
    /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
    /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Affects All elements with user interaction, except menus.
    /// In Windows, there are restrictions when using this callback.
    /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
    /// function calls that display or activate a window.
    /// This causes the thread to yield control and can cause the application to
    /// stop responding to messages.
    /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
    pub const OnKillFocusFn = fn (self: *Self) anyerror!void;

    pub const OnDragDataFn = fn (self: *Self, arg0: [:0]const u8, arg1: ?*anyopaque, arg2: i32) anyerror!void;

    pub const OnDragDataSizeFn = fn (self: *Self, arg0: [:0]const u8) anyerror!void;

    ///
    /// SHOW_CB SHOW_CB Called right after the dialog is showed, hidden, maximized,
    /// minimized or restored from minimized/maximized.
    /// This callback is called when those actions were performed by the user or
    /// programmatically by the application.
    /// Callback int function(Ihandle *ih, int state); [in C] ih:show_cb(state:
    /// number) -> (ret: number) [in Lua] ih: identifier of the element that
    /// activated the event.
    /// state: indicates which of the following situations generated the event:
    /// IUP_HIDE (since 3.0) IUP_SHOW IUP_RESTORE (was minimized or maximized)
    /// IUP_MINIMIZE IUP_MAXIMIZE (since 3.0) (not received in Motif when activated
    /// from the maximize button) Returns: IUP_CLOSE will be processed.
    /// Affects IupDialog
    pub const OnShowFn = fn (self: *Self, arg0: i32) anyerror!void;

    ///
    /// DROPFILES_CB DROPFILES_CB Action called when a file is "dropped" into the control.
    /// When several files are dropped at once, the callback is called several
    /// times, once for each file.
    /// If defined after the element is mapped then the attribute DROPFILESTARGET
    /// must be set to YES.
    /// [Windows and GTK Only] (GTK 2.6) Callback int function(Ihandle *ih, const
    /// char* filename, int num, int x, int y); [in C] ih:dropfiles_cb(filename:
    /// string; num, x, y: number) -> (ret: number) [in Lua] ih: identifier of the
    /// element that activated the event.
    /// filename: Name of the dropped file.
    /// num: Number index of the dropped file.
    /// If several files are dropped, num is the index of the dropped file starting
    /// from "total-1" to "0".
    /// x: X coordinate of the point where the user released the mouse button.
    /// y: Y coordinate of the point where the user released the mouse button.
    /// Returns: If IUP_IGNORE is returned the callback will NOT be called for the
    /// next dropped files, and the processing of dropped files will be interrupted.
    /// Affects IupDialog, IupCanvas, IupGLCanvas, IupText, IupList
    pub const OnDropFilesFn = fn (self: *Self, arg0: [:0]const u8, arg1: i32, arg2: i32, arg3: i32) anyerror!void;

    ///
    /// RESIZE_CB RESIZE_CB Action generated when the canvas or dialog size is changed.
    /// Callback int function(Ihandle *ih, int width, int height); [in C]
    /// ih:resize_cb(width, height: number) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// width: the width of the internal element size in pixels not considering the
    /// decorations (client size) height: the height of the internal element size
    /// in pixels not considering the decorations (client size) Notes For the
    /// dialog, this action is also generated when the dialog is mapped, after the
    /// map and before the show.
    /// When XAUTOHIDE=Yes or YAUTOHIDE=Yes, if the canvas scrollbar is
    /// hidden/shown after changing the DX or DY attributes from inside the
    /// callback, the size of the drawing area will immediately change, so the
    /// parameters with and height will be invalid.
    /// To update the parameters consult the DRAWSIZE attribute.
    /// Also activate the drawing toolkit only after updating the DX or DY attributes.
    /// Affects IupCanvas, IupGLCanvas, IupDialog
    pub const OnResizeFn = fn (self: *Self, arg0: i32, arg1: i32) anyerror!void;

    ///
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnUnmapFn = fn (self: *Self) anyerror!void;

    pub const OnTrayClickFn = fn (self: *Self, arg0: i32, arg1: i32, arg2: i32) anyerror!void;

    ///
    /// When saving a file, the overwrite check is done before the FILE_CB callback
    /// is called with status=OK.
    /// If the application wants to add an extension to the file name inside the
    /// FILE_CB callback when status=OK, then it must manually check if the file
    /// with the extension exits and asks the user if the file should be replaced,
    /// if not then the callback can set the FILE attribute and returns
    /// IUP_CONTINUE, so the file dialog will remain open and the user will have an
    /// opportunity to change the file name now that it contains the extension.
    pub const OnFileFn = fn (self: *Self, arg0: [:0]const u8, arg1: [:0]const u8) anyerror!void;

    ///
    /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
    /// This callback is called after the KILLFOCUS_CB of the element that loosed
    /// the focus.
    /// The IupGetFocus function during the callback returns the element that
    /// loosed the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that received keyboard focus.
    /// Affects All elements with user interaction, except menus.
    /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
    pub const OnGetFocusFn = fn (self: *Self) anyerror!void;

    pub const OnLDestroyFn = fn (self: *Self) anyerror!void;

    ///
    /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also ENTERWINDOW_CB
    pub const OnLeaveWindowFn = fn (self: *Self) anyerror!void;

    pub const OnPostMessageFn = fn (self: *Self, arg0: [:0]const u8, arg1: i32, arg2: f64, arg3: ?*anyopaque) anyerror!void;

    ///
    /// DIALOGTYPE: Type of dialog (Open, Save or Directory).
    /// Can have values "OPEN", "SAVE" or "DIR".
    /// Default: "OPEN".
    /// In Windows, when DIALOGTYPE=DIR the dialog shown is not the same dialog for
    /// OPEN and SAVE, this new dialog does not have the Help button neither filters.
    /// Also this new dialog needs CoInitializeEx with COINIT_APARTMENTTHREADED
    /// (done in IupOpen), if the COM library was initialized with
    /// COINIT_MULTITHREADED prior to IupOpen then the new dialog will have limited functionality.
    /// In Motif or GTK the dialog is the same, but it only allows the user to
    /// select a directory.
    pub const DialogType = enum {
        Save,
        Dir,
        Open,
    };

    pub const ZOrder = enum {
        Top,
        Bottom,
    };

    pub const Expand = enum {
        Yes,
        Horizontal,
        Vertical,
        HorizontalFree,
        VerticalFree,
        No,
    };
    ///
    /// STATUS (read-only): Indicates the status of the selection made: "1": New file.
    /// "0": Normal, existing file or directory.
    /// "-1": Operation cancelled.
    pub const Status = enum(i32) {
        Normal = 0,
        NewFile = 1,
        Cancelled = -1,
    };

    pub const Placement = enum {
        Maximized,
        Minimized,
        Full,
    };

    pub const Floating = enum {
        Yes,
        Ignore,
        No,
    };

    pub const Initializer = struct {
        last_error: ?anyerror = null,
        ref: *Self,

        ///
        /// Returns a pointer to IUP element or an error.
        /// Only top-level or detached elements needs to be unwraped,
        pub fn unwrap(self: Initializer) !*Self {
            if (self.last_error) |e| {
                return e;
            } else {
                return self.ref;
            }
        }

        ///
        /// Captures a reference into a external variable
        /// Allows to capture some references even using full declarative API
        pub fn capture(self: Initializer, ref: **Self) Initializer {
            ref.* = self.ref;
            return self;
        }

        pub fn setStrAttribute(self: Initializer, attributeName: [:0]const u8, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            Self.setStrAttribute(self.ref, attributeName, arg);
            return self;
        }

        pub fn setIntAttribute(self: Initializer, attributeName: [:0]const u8, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            Self.setIntAttribute(self.ref, attributeName, arg);
            return self;
        }

        pub fn setBoolAttribute(self: Initializer, attributeName: [:0]const u8, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            Self.setBoolAttribute(self.ref, attributeName, arg);
            return self;
        }

        pub fn setPtrAttribute(self: Initializer, comptime T: type, attributeName: [:0]const u8, value: ?*T) Initializer {
            if (self.last_error) |_| return self;
            Self.setPtrAttribute(self.ref, T, attributeName, value);
            return self;
        }

        pub fn setHandle(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setHandle(self.ref, arg);
            return self;
        }

        pub fn setHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "HANDLENAME", .{}, arg);
            return self;
        }

        pub fn setTipBgColor(self: Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self;
            interop.setRgb(self.ref, "TIPBGCOLOR", .{}, rgb);
            return self;
        }

        pub fn setMdiClient(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "MDICLIENT", .{}, arg);
            return self;
        }

        pub fn setControl(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "CONTROL", .{}, arg);
            return self;
        }

        pub fn setTipIcon(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "TIPICON", .{}, arg);
            return self;
        }

        ///
        /// SHOWPREVIEW: A preview area is shown inside the file dialog.
        /// Can have values "YES" or "NO".
        /// Default: "NO".
        /// In Windows, you must link with the "iup.rc" resource file so the preview
        /// area can be enabled (not necessary if using "iup.dll").
        /// Valid only if the FILE_CB callback is defined, use it to retrieve the file
        /// name and the necessary attributes to paint the preview area.
        /// (in Motif since 3.0) Read only attributes that are valid inside the FILE_CB
        /// callback when status="PAINT": PREVIEWDC: Returns the Device Context (HDC in
        /// Windows and GC in UNIX) PREVIEWWIDTH and PREVIEWHEIGHT: Returns the width
        /// and the height of the client rectangle for the preview area.
        /// Also the attributes WID, HWND, XWINDOW and XDISPLAY are valid and are
        /// relative to the preview area.
        /// If the attribute PREVIEWGLCANVAS is defined then it is used as the name of
        /// an existent IupGLCanvas control to be mapped internally to the preview canvas.
        /// Notice that this is not a fully implemented IupGLCanvas that inherits from IupCanvas.
        /// This does the minimum necessary so you can use IupGLCanvas auxiliary
        /// functions for the preview canvas and call OpenGL functions.
        /// No IupCanvas attributes or callbacks are available.
        /// (since 3.0)
        pub fn setShowPreview(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "SHOWPREVIEW", .{}, arg);
            return self;
        }

        pub fn setMenu(self: Initializer, arg: *iup.Menu) Initializer {
            if (self.last_error) |_| return self;
            interop.setHandleAttribute(self.ref, "MENU", .{}, arg);
            return self;
        }

        pub fn setMenuHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "MENU", .{}, arg);
            return self;
        }

        pub fn setNoFlush(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "NOFLUSH", .{}, arg);
            return self;
        }

        pub fn setMaxSize(self: Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "MAXSIZE", .{}, value);
            return self;
        }

        pub fn setOpacityImage(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "OPACITYIMAGE", .{}, arg);
            return self;
        }

        ///
        /// NOCHANGEDIR: Indicates if the current working directory must be restored
        /// after the user navigation.
        /// Default: "YES".
        pub fn setNoChangeDir(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "NOCHANGEDIR", .{}, arg);
            return self;
        }

        pub fn setHelpButton(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "HELPBUTTON", .{}, arg);
            return self;
        }

        pub fn setShowNoFocus(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "SHOWNOFOCUS", .{}, arg);
            return self;
        }

        pub fn setOpacity(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "OPACITY", .{}, arg);
            return self;
        }

        pub fn setPosition(self: Initializer, x: i32, y: i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
            interop.setStrAttribute(self.ref, "POSITION", .{}, value);
            return self;
        }

        pub fn setComposited(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "COMPOSITED", .{}, arg);
            return self;
        }

        pub fn setDropFilesTarget(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DROPFILESTARGET", .{}, arg);
            return self;
        }

        pub fn setTip(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "TIP", .{}, arg);
            return self;
        }

        pub fn setCanFocus(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "CANFOCUS", .{}, arg);
            return self;
        }

        pub fn setDragSourceMove(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DRAGSOURCEMOVE", .{}, arg);
            return self;
        }

        pub fn setIcon(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "ICON", .{}, arg);
            return self;
        }

        pub fn setVisible(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "VISIBLE", .{}, arg);
            return self;
        }

        pub fn setCursor(self: Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "CURSOR", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setCursorHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "CURSOR", .{}, arg);
            return self;
        }

        pub fn setMenuBox(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "MENUBOX", .{}, arg);
            return self;
        }

        ///
        /// DIALOGTYPE: Type of dialog (Open, Save or Directory).
        /// Can have values "OPEN", "SAVE" or "DIR".
        /// Default: "OPEN".
        /// In Windows, when DIALOGTYPE=DIR the dialog shown is not the same dialog for
        /// OPEN and SAVE, this new dialog does not have the Help button neither filters.
        /// Also this new dialog needs CoInitializeEx with COINIT_APARTMENTTHREADED
        /// (done in IupOpen), if the COM library was initialized with
        /// COINIT_MULTITHREADED prior to IupOpen then the new dialog will have limited functionality.
        /// In Motif or GTK the dialog is the same, but it only allows the user to
        /// select a directory.
        pub fn setDialogType(self: Initializer, arg: ?DialogType) Initializer {
            if (self.last_error) |_| return self;
            if (arg) |value| switch (value) {
                .Save => interop.setStrAttribute(self.ref, "DIALOGTYPE", .{}, "SAVE"),
                .Dir => interop.setStrAttribute(self.ref, "DIALOGTYPE", .{}, "DIR"),
                .Open => interop.setStrAttribute(self.ref, "DIALOGTYPE", .{}, "OPEN"),
            } else {
                interop.clearAttribute(self.ref, "DIALOGTYPE", .{});
            }
            return self;
        }

        pub fn zOrder(self: Initializer, arg: ?ZOrder) Initializer {
            if (self.last_error) |_| return self;
            if (arg) |value| switch (value) {
                .Top => interop.setStrAttribute(self.ref, "ZORDER", .{}, "TOP"),
                .Bottom => interop.setStrAttribute(self.ref, "ZORDER", .{}, "BOTTOM"),
            } else {
                interop.clearAttribute(self.ref, "ZORDER", .{});
            }
            return self;
        }

        pub fn setHideTitleBar(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "HIDETITLEBAR", .{}, arg);
            return self;
        }

        pub fn setMaxBox(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "MAXBOX", .{}, arg);
            return self;
        }

        pub fn setDragDrop(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DRAGDROP", .{}, arg);
            return self;
        }

        pub fn setDialogHint(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DIALOGHINT", .{}, arg);
            return self;
        }

        ///
        /// ALLOWNEW: Indicates if non-existent file names are accepted.
        /// If equals "NO" and the user specifies a non-existing file, an alert dialog
        /// is shown.
        /// Default: if the dialog is of type "OPEN", default is "NO"; if the dialog is
        /// of type "SAVE", default is "YES".
        /// Not used when DIALOGTYPE=DIR.
        pub fn setAllowNew(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "ALLOWNEW", .{}, arg);
            return self;
        }

        pub fn setDialogFrame(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DIALOGFRAME", .{}, arg);
            return self;
        }

        pub fn setNActive(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "NACTIVE", .{}, arg);
            return self;
        }

        pub fn setTheme(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "THEME", .{}, arg);
            return self;
        }

        pub fn setSaveUnder(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "SAVEUNDER", .{}, arg);
            return self;
        }

        pub fn setTray(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "TRAY", .{}, arg);
            return self;
        }

        pub fn setChildOffset(self: Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "CHILDOFFSET", .{}, value);
            return self;
        }

        pub fn setExpand(self: Initializer, arg: ?Expand) Initializer {
            if (self.last_error) |_| return self;
            if (arg) |value| switch (value) {
                .Yes => interop.setStrAttribute(self.ref, "EXPAND", .{}, "YES"),
                .Horizontal => interop.setStrAttribute(self.ref, "EXPAND", .{}, "HORIZONTAL"),
                .Vertical => interop.setStrAttribute(self.ref, "EXPAND", .{}, "VERTICAL"),
                .HorizontalFree => interop.setStrAttribute(self.ref, "EXPAND", .{}, "HORIZONTALFREE"),
                .VerticalFree => interop.setStrAttribute(self.ref, "EXPAND", .{}, "VERTICALFREE"),
                .No => interop.setStrAttribute(self.ref, "EXPAND", .{}, "NO"),
            } else {
                interop.clearAttribute(self.ref, "EXPAND", .{});
            }
            return self;
        }

        pub fn setSize(self: Initializer, width: ?iup.ScreenSize, height: ?iup.ScreenSize) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var str = iup.DialogSize.screenSizeToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "SIZE", .{}, str);
            return self;
        }

        pub fn setTipMarkup(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "TIPMARKUP", .{}, arg);
            return self;
        }

        ///
        /// EXTDEFAULT: default extension to be used if selected file does not have an extension.
        /// The inspected extension will consider to have the same number of characters
        /// of the default extension.
        /// It must NOT include the period ".".
        /// (since 3.18)
        pub fn setExtDefault(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "EXTDEFAULT", .{}, arg);
            return self;
        }

        pub fn setMdiMenu(self: Initializer, arg: *iup.Menu) Initializer {
            if (self.last_error) |_| return self;
            interop.setHandleAttribute(self.ref, "MDIMENU", .{}, arg);
            return self;
        }

        pub fn setMdiMenuHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "MDIMENU", .{}, arg);
            return self;
        }

        pub fn setStartFocus(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "STARTFOCUS", .{}, arg);
            return self;
        }

        pub fn setFontSize(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "FONTSIZE", .{}, arg);
            return self;
        }

        pub fn setDropTypes(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "DROPTYPES", .{}, arg);
            return self;
        }

        pub fn setTrayTipMarkup(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "TRAYTIPMARKUP", .{}, arg);
            return self;
        }

        pub fn setUserSize(self: Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "USERSIZE", .{}, value);
            return self;
        }

        pub fn setTipDelay(self: Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self;
            interop.setIntAttribute(self.ref, "TIPDELAY", .{}, arg);
            return self;
        }

        pub fn setCustomFrame(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "CUSTOMFRAME", .{}, arg);
            return self;
        }

        ///
        /// TITLE: Dialog's title.
        pub fn setTitle(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "TITLE", .{}, arg);
            return self;
        }

        pub fn setDefaultEsc(self: Initializer, arg: *iup.Button) Initializer {
            if (self.last_error) |_| return self;
            interop.setHandleAttribute(self.ref, "DEFAULTESC", .{}, arg);
            return self;
        }

        pub fn setDefaultEscHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "DEFAULTESC", .{}, arg);
            return self;
        }

        pub fn setPlacement(self: Initializer, arg: ?Placement) Initializer {
            if (self.last_error) |_| return self;
            if (arg) |value| switch (value) {
                .Maximized => interop.setStrAttribute(self.ref, "PLACEMENT", .{}, "MAXIMIZED"),
                .Minimized => interop.setStrAttribute(self.ref, "PLACEMENT", .{}, "MINIMIZED"),
                .Full => interop.setStrAttribute(self.ref, "PLACEMENT", .{}, "FULL"),
            } else {
                interop.clearAttribute(self.ref, "PLACEMENT", .{});
            }
            return self;
        }

        ///
        /// EXTFILTER [Windows and GTK Only]: Defines several file filters.
        /// It has priority over FILTERINFO and FILTER.
        /// Must be a text with the format "FilterInfo1|Filter1|FilterInfo2|Filter2|...".
        /// The list ends with character '|'.
        /// Example: "Text files|*.txt;*.doc|Image files|*.gif;*.jpg;*.bmp|".
        /// In GTK there is no way how to overwrite the filters, so it is recommended
        /// to always add a less restrictive filter to the filter list, for example
        /// "All Files|*.*".
        pub fn setExtFilter(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "EXTFILTER", .{}, arg);
            return self;
        }

        pub fn setPropagateFocus(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "PROPAGATEFOCUS", .{}, arg);
            return self;
        }

        pub fn setBgColor(self: Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self;
            interop.setRgb(self.ref, "BGCOLOR", .{}, rgb);
            return self;
        }

        pub fn setDropTarget(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DROPTARGET", .{}, arg);
            return self;
        }

        pub fn setDragSource(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "DRAGSOURCE", .{}, arg);
            return self;
        }

        pub fn setResize(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "RESIZE", .{}, arg);
            return self;
        }

        pub fn setFloating(self: Initializer, arg: ?Floating) Initializer {
            if (self.last_error) |_| return self;
            if (arg) |value| switch (value) {
                .Yes => interop.setStrAttribute(self.ref, "FLOATING", .{}, "YES"),
                .Ignore => interop.setStrAttribute(self.ref, "FLOATING", .{}, "IGNORE"),
                .No => interop.setStrAttribute(self.ref, "FLOATING", .{}, "NO"),
            } else {
                interop.clearAttribute(self.ref, "FLOATING", .{});
            }
            return self;
        }

        pub fn setNormalizerGroup(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "NORMALIZERGROUP", .{}, arg);
            return self;
        }

        pub fn setRasterSize(self: Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "RASTERSIZE", .{}, value);
            return self;
        }

        pub fn setShapeImage(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "SHAPEIMAGE", .{}, arg);
            return self;
        }

        pub fn setTipFgColor(self: Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self;
            interop.setRgb(self.ref, "TIPFGCOLOR", .{}, rgb);
            return self;
        }

        pub fn setFontFace(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "FONTFACE", .{}, arg);
            return self;
        }

        pub fn topMost(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "TOPMOST", .{}, arg);
            return self;
        }

        pub fn setName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "NAME", .{}, arg);
            return self;
        }

        pub fn setMinBox(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "MINBOX", .{}, arg);
            return self;
        }

        pub fn setDefaultEnter(self: Initializer, arg: *iup.Button) Initializer {
            if (self.last_error) |_| return self;
            interop.setHandleAttribute(self.ref, "DEFAULTENTER", .{}, arg);
            return self;
        }

        pub fn setDefaultEnterHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "DEFAULTENTER", .{}, arg);
            return self;
        }

        ///
        /// PARENTDIALOG: Makes the dialog be treated as a child of the specified dialog.
        pub fn setParentDialog(self: Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Dialog, arg)) {
                interop.setHandleAttribute(self.ref, "PARENTDIALOG", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setParentDialogHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "PARENTDIALOG", .{}, arg);
            return self;
        }

        pub fn setBackground(self: Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self;
            interop.setRgb(self.ref, "BACKGROUND", .{}, rgb);
            return self;
        }

        pub fn setHideTaskbar(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "HIDETASKBAR", .{}, arg);
            return self;
        }

        ///
        /// FILTER: String containing a list of file filters separated by ';' without spaces.
        /// Example: "*.C;*.LED;test.*".
        /// In Motif only the first filter is used.
        pub fn setFilter(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "FILTER", .{}, arg);
            return self;
        }

        pub fn setBringFront(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "BRINGFRONT", .{}, arg);
            return self;
        }

        pub fn setTrayImage(self: Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "TRAYIMAGE", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setTrayImageHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "TRAYIMAGE", .{}, arg);
            return self;
        }

        pub fn setActive(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "ACTIVE", .{}, arg);
            return self;
        }

        pub fn setTipVisible(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "TIPVISIBLE", .{}, arg);
            return self;
        }

        pub fn setExpandWeight(self: Initializer, arg: f64) Initializer {
            if (self.last_error) |_| return self;
            interop.setDoubleAttribute(self.ref, "EXPANDWEIGHT", .{}, arg);
            return self;
        }

        pub fn setMinSize(self: Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "MINSIZE", .{}, value);
            return self;
        }

        pub fn setNTheme(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "NTHEME", .{}, arg);
            return self;
        }

        pub fn setBorder(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "BORDER", .{}, arg);
            return self;
        }

        pub fn setCustomFramesImulate(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "CUSTOMFRAMESIMULATE", .{}, arg);
            return self;
        }

        pub fn setShrink(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "SHRINK", .{}, arg);
            return self;
        }

        pub fn setClientSize(self: Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "CLIENTSIZE", .{}, value);
            return self;
        }

        pub fn setTrayTip(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "TRAYTIP", .{}, arg);
            return self;
        }

        pub fn setDragTypes(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "DRAGTYPES", .{}, arg);
            return self;
        }

        pub fn setToolBox(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "TOOLBOX", .{}, arg);
            return self;
        }

        pub fn setMdiFrame(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "MDIFRAME", .{}, arg);
            return self;
        }

        ///
        /// NOOVERWRITEPROMPT: do not prompt to overwrite an existent file when in
        /// "SAVE" dialog.
        /// Default is "NO", i.e.
        /// prompt before overwrite.
        /// (GTK 2.8)
        pub fn setNoOverwritePrompt(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "NOOVERWRITEPROMPT", .{}, arg);
            return self;
        }

        pub fn setFontStyle(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "FONTSTYLE", .{}, arg);
            return self;
        }

        ///
        /// DIRECTORY: Initial directory.
        /// When consulted after the dialog is closed and the user pressed the OK
        /// button, it will contain the directory of the selected file.
        /// When set the last separator does not need to be specified, but when get the
        /// returned value will always contains the last separator.
        /// In Motif or GTK, if not defined, the dialog opens in the current directory.
        /// In Windows, if not defined and the application has used the dialog in the
        /// past, the path most recently used is selected as the initial directory.
        /// However, if an application is not run for a long time, its saved selected
        /// path is discarded.
        /// Also if not defined and the current directory contains any files of the
        /// specified filter types, the initial directory is the current directory.
        /// Otherwise, the initial directory is the "My Documents" directory of the
        /// current user.
        /// Otherwise, the initial directory is the Desktop folder.
        /// In Windows, the FILE and the DIRECTORY attributes also accept strings
        /// containing "/" as path separators, but the VALUE attribute will always
        /// return strings using the "\" character.
        pub fn setDirectory(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "DIRECTORY", .{}, arg);
            return self;
        }

        pub fn setMdiChild(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "MDICHILD", .{}, arg);
            return self;
        }

        pub fn fullScreen(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "FULLSCREEN", .{}, arg);
            return self;
        }

        pub fn setNativeParent(self: Initializer, arg: anytype) !Initializer {
            if (self.last_error) |_| return self;
            interop.setHandleAttribute(self.ref, "NATIVEPARENT", .{}, arg);
            return self;
        }

        pub fn setNativeParentHandleName(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "NATIVEPARENT", .{}, arg);
            return self;
        }

        pub fn setFont(self: Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "FONT", .{}, arg);
            return self;
        }

        pub fn simulateModal(self: Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self;
            interop.setBoolAttribute(self.ref, "SIMULATEMODAL", .{}, arg);
            return self;
        }

        ///
        /// TABIMAGEn (non inheritable): image name to be used in the respective tab.
        /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
        /// n starts at 0.
        /// See also IupImage.
        /// In Motif, the image is shown only if TABTITLEn is NULL.
        /// In Windows and Motif set the BGCOLOR attribute before setting the image.
        /// When set after map will update the TABIMAGE attribute on the respective
        /// child (since 3.10).
        /// (since 3.0).
        /// TABIMAGE (non inheritable) (at children only): Same as TABIMAGEn but set in
        /// each child.
        /// Works only if set before the child is added to the tabs.
        pub fn setTabImage(self: Initializer, index: i32, arg: anytype) Initializer {
            if (self.last_error) |_| return self;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "TABIMAGE", .{index}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self;
        }

        pub fn setTabImageHandleName(self: Initializer, index: i32, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "TABIMAGE", .{index}, arg);
            return self;
        }

        ///
        /// TABTITLEn (non inheritable): Contains the text to be shown in the
        /// respective tab title.
        /// n starts at 0.
        /// If this value is NULL, it will remain empty.
        /// The "&" character can be used to define a mnemonic, the next character will
        /// be used as key.
        /// Use "&&" to show the "&" character instead on defining a mnemonic.
        /// The button can be activated from any control in the dialog using the
        /// "Alt+key" combination.
        /// (mnemonic support since 3.3).
        /// When set after map will update the TABTITLE attribute on the respective
        /// child (since 3.10).
        /// (since 3.0).
        /// TABTITLE (non inheritable) (at children only): Same as TABTITLEn but set in
        /// each child.
        /// Works only if set before the child is added to the tabs.
        pub fn setTabTitle(self: Initializer, index: i32, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self;
            interop.setStrAttribute(self.ref, "TABTITLE", .{index}, arg);
            return self;
        }

        pub fn setFocusCallback(self: Initializer, callback: ?*const OnFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnFocusFn, "FOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// K_ANY K_ANY Action generated when a keyboard event occurs.
        /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
        /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
        /// c: identifier of typed key.
        /// Please refer to the Keyboard Codes table for a list of possible values.
        /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
        /// the control and not propagated.
        /// If returns IUP_CONTINUE, the key will be processed and the event will be
        /// propagated to the parent of the element receiving it, this is the default behavior.
        /// If returns IUP_DEFAULT the key is processed but it is not propagated.
        /// IUP_CLOSE will be processed.
        /// Notes Keyboard callbacks depend on the keyboard usage of the control with
        /// the focus.
        /// So if you return IUP_IGNORE the control will usually not process the key.
        /// But be aware that sometimes the control process the key in another event so
        /// even returning IUP_IGNORE the key can get processed.
        /// Although it will not be propagated.
        /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
        /// the IUP_CONTINUE return value to work while the control is in focus.
        /// If the callback does not exists it is automatically propagated to the
        /// parent of the element.
        /// K_* callbacks All defined keys are also callbacks of any element, called
        /// when the respective key is activated.
        /// For example: "K_cC" is also a callback activated when the user press
        /// Ctrl+C, when the focus is at the element or at a children with focus.
        /// This is the way an application can create shortcut keys, also called hot keys.
        /// These callbacks are not available in IupLua.
        /// Affects All elements with keyboard interaction.
        pub fn setKAnyCallback(self: Initializer, callback: ?*const OnKAnyFn) Initializer {
            const Handler = CallbackHandler(Self, OnKAnyFn, "K_ANY");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
        /// In Motif is also activated by the Help button in some workstations keyboard.
        /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Returns: IUP_CLOSE will be processed.
        /// Affects All elements with user interaction.
        pub fn setHelpCallback(self: Initializer, callback: ?*const OnHelpFn) Initializer {
            const Handler = CallbackHandler(Self, OnHelpFn, "HELP_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// CLOSE_CB CLOSE_CB Called just before a dialog is closed when the user
        /// clicks the close button of the title bar or an equivalent action.
        /// Callback int function(Ihandle *ih); [in C] ih:close_cb() -> (ret: number)
        /// [in Lua] ih: identifies the element that activated the event.
        /// Returns: if IUP_IGNORE, it prevents the dialog from being closed.
        /// If you destroy the dialog in this callback, you must return IUP_IGNORE.
        /// IUP_CLOSE will be processed.
        /// Affects IupDialog
        pub fn setCloseCallback(self: Initializer, callback: ?*const OnCloseFn) Initializer {
            const Handler = CallbackHandler(Self, OnCloseFn, "CLOSE_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setDropMotionCallback(self: Initializer, callback: ?*const OnDropMotionFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropMotionFn, "DROPMOTION_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setDragEndCallback(self: Initializer, callback: ?*const OnDragEndFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragEndFn, "DRAGEND_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setDragBeginCallback(self: Initializer, callback: ?*const OnDragBeginFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragBeginFn, "DRAGBEGIN_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
        /// updated in IupMap.
        /// When the element is a dialog, it is called after the layout is updated.
        /// For all other elements is called before the layout is updated, so the
        /// element current size will still be 0x0 during MAP_CB (since 3.14).
        /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
        /// Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setMapCallback(self: Initializer, callback: ?*const OnMapFn) Initializer {
            const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
        /// native element.
        /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Notes When the cursor is moved from one element to another, the call order
        /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
        /// control followed by the ENTERWINDOW_CB callback of the new control.
        /// (since 3.14) If the mouse button is hold pressed and the cursor moves
        /// outside the element the behavior is system dependent.
        /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
        /// GTK the callbacks are called.
        /// Affects All controls with user interaction.
        /// See Also LEAVEWINDOW_CB
        pub fn setEnterWindowCallback(self: Initializer, callback: ?*const OnEnterWindowFn) Initializer {
            const Handler = CallbackHandler(Self, OnEnterWindowFn, "ENTERWINDOW_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
        /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Notes If the dialog is visible then it is hidden before it is destroyed.
        /// The callback will be called right after it is hidden.
        /// The callback will be called before all other destroy procedures.
        /// For instance, if the element has children then it is called before the
        /// children are destroyed.
        /// For language binding implementations use the callback name "LDESTROY_CB" to
        /// release memory allocated by the binding for the element.
        /// Also the callback will be called before the language callback.
        /// Affects All.
        pub fn setDestroyCallback(self: Initializer, callback: ?*const OnDestroyFn) Initializer {
            const Handler = CallbackHandler(Self, OnDestroyFn, "DESTROY_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setDropDataCallback(self: Initializer, callback: ?*const OnDropDataFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropDataFn, "DROPDATA_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
        /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
        /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Affects All elements with user interaction, except menus.
        /// In Windows, there are restrictions when using this callback.
        /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
        /// function calls that display or activate a window.
        /// This causes the thread to yield control and can cause the application to
        /// stop responding to messages.
        /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
        pub fn setKillFocusCallback(self: Initializer, callback: ?*const OnKillFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnKillFocusFn, "KILLFOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setDragDataCallback(self: Initializer, callback: ?*const OnDragDataFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragDataFn, "DRAGDATA_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setDragDataSizeCallback(self: Initializer, callback: ?*const OnDragDataSizeFn) Initializer {
            const Handler = CallbackHandler(Self, OnDragDataSizeFn, "DRAGDATASIZE_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// SHOW_CB SHOW_CB Called right after the dialog is showed, hidden, maximized,
        /// minimized or restored from minimized/maximized.
        /// This callback is called when those actions were performed by the user or
        /// programmatically by the application.
        /// Callback int function(Ihandle *ih, int state); [in C] ih:show_cb(state:
        /// number) -> (ret: number) [in Lua] ih: identifier of the element that
        /// activated the event.
        /// state: indicates which of the following situations generated the event:
        /// IUP_HIDE (since 3.0) IUP_SHOW IUP_RESTORE (was minimized or maximized)
        /// IUP_MINIMIZE IUP_MAXIMIZE (since 3.0) (not received in Motif when activated
        /// from the maximize button) Returns: IUP_CLOSE will be processed.
        /// Affects IupDialog
        pub fn setShowCallback(self: Initializer, callback: ?*const OnShowFn) Initializer {
            const Handler = CallbackHandler(Self, OnShowFn, "SHOW_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// DROPFILES_CB DROPFILES_CB Action called when a file is "dropped" into the control.
        /// When several files are dropped at once, the callback is called several
        /// times, once for each file.
        /// If defined after the element is mapped then the attribute DROPFILESTARGET
        /// must be set to YES.
        /// [Windows and GTK Only] (GTK 2.6) Callback int function(Ihandle *ih, const
        /// char* filename, int num, int x, int y); [in C] ih:dropfiles_cb(filename:
        /// string; num, x, y: number) -> (ret: number) [in Lua] ih: identifier of the
        /// element that activated the event.
        /// filename: Name of the dropped file.
        /// num: Number index of the dropped file.
        /// If several files are dropped, num is the index of the dropped file starting
        /// from "total-1" to "0".
        /// x: X coordinate of the point where the user released the mouse button.
        /// y: Y coordinate of the point where the user released the mouse button.
        /// Returns: If IUP_IGNORE is returned the callback will NOT be called for the
        /// next dropped files, and the processing of dropped files will be interrupted.
        /// Affects IupDialog, IupCanvas, IupGLCanvas, IupText, IupList
        pub fn setDropFilesCallback(self: Initializer, callback: ?*const OnDropFilesFn) Initializer {
            const Handler = CallbackHandler(Self, OnDropFilesFn, "DROPFILES_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// RESIZE_CB RESIZE_CB Action generated when the canvas or dialog size is changed.
        /// Callback int function(Ihandle *ih, int width, int height); [in C]
        /// ih:resize_cb(width, height: number) -> (ret: number) [in Lua] ih:
        /// identifier of the element that activated the event.
        /// width: the width of the internal element size in pixels not considering the
        /// decorations (client size) height: the height of the internal element size
        /// in pixels not considering the decorations (client size) Notes For the
        /// dialog, this action is also generated when the dialog is mapped, after the
        /// map and before the show.
        /// When XAUTOHIDE=Yes or YAUTOHIDE=Yes, if the canvas scrollbar is
        /// hidden/shown after changing the DX or DY attributes from inside the
        /// callback, the size of the drawing area will immediately change, so the
        /// parameters with and height will be invalid.
        /// To update the parameters consult the DRAWSIZE attribute.
        /// Also activate the drawing toolkit only after updating the DX or DY attributes.
        /// Affects IupCanvas, IupGLCanvas, IupDialog
        pub fn setResizeCallback(self: Initializer, callback: ?*const OnResizeFn) Initializer {
            const Handler = CallbackHandler(Self, OnResizeFn, "RESIZE_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
        /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setUnmapCallback(self: Initializer, callback: ?*const OnUnmapFn) Initializer {
            const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setTrayClickCallback(self: Initializer, callback: ?*const OnTrayClickFn) Initializer {
            const Handler = CallbackHandler(Self, OnTrayClickFn, "TRAYCLICK_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// When saving a file, the overwrite check is done before the FILE_CB callback
        /// is called with status=OK.
        /// If the application wants to add an extension to the file name inside the
        /// FILE_CB callback when status=OK, then it must manually check if the file
        /// with the extension exits and asks the user if the file should be replaced,
        /// if not then the callback can set the FILE attribute and returns
        /// IUP_CONTINUE, so the file dialog will remain open and the user will have an
        /// opportunity to change the file name now that it contains the extension.
        pub fn setFileCallback(self: Initializer, callback: ?*const OnFileFn) Initializer {
            const Handler = CallbackHandler(Self, OnFileFn, "FILE_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
        /// This callback is called after the KILLFOCUS_CB of the element that loosed
        /// the focus.
        /// The IupGetFocus function during the callback returns the element that
        /// loosed the focus.
        /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that received keyboard focus.
        /// Affects All elements with user interaction, except menus.
        /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
        pub fn setGetFocusCallback(self: Initializer, callback: ?*const OnGetFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnGetFocusFn, "GETFOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setLDestroyCallback(self: Initializer, callback: ?*const OnLDestroyFn) Initializer {
            const Handler = CallbackHandler(Self, OnLDestroyFn, "LDESTROY_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        ///
        /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
        /// native element.
        /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Notes When the cursor is moved from one element to another, the call order
        /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
        /// control followed by the ENTERWINDOW_CB callback of the new control.
        /// (since 3.14) If the mouse button is hold pressed and the cursor moves
        /// outside the element the behavior is system dependent.
        /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
        /// GTK the callbacks are called.
        /// Affects All controls with user interaction.
        /// See Also ENTERWINDOW_CB
        pub fn setLeaveWindowCallback(self: Initializer, callback: ?*const OnLeaveWindowFn) Initializer {
            const Handler = CallbackHandler(Self, OnLeaveWindowFn, "LEAVEWINDOW_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }

        pub fn setPostMessageCallback(self: Initializer, callback: ?*const OnPostMessageFn) Initializer {
            const Handler = CallbackHandler(Self, OnPostMessageFn, "POSTMESSAGE_CB");
            Handler.setCallback(self.ref, callback);
            return self;
        }
    };

    pub fn setStrAttribute(self: *Self, attribute: [:0]const u8, arg: [:0]const u8) void {
        interop.setStrAttribute(self, attribute, .{}, arg);
    }

    pub fn getStrAttribute(self: *Self, attribute: [:0]const u8) [:0]const u8 {
        return interop.getStrAttribute(self, attribute, .{});
    }

    pub fn setIntAttribute(self: *Self, attribute: [:0]const u8, arg: i32) void {
        interop.setIntAttribute(self, attribute, .{}, arg);
    }

    pub fn getIntAttribute(self: *Self, attribute: [:0]const u8) i32 {
        return interop.getIntAttribute(self, attribute, .{});
    }

    pub fn setBoolAttribute(self: *Self, attribute: [:0]const u8, arg: bool) void {
        interop.setBoolAttribute(self, attribute, .{}, arg);
    }

    pub fn getBoolAttribute(self: *Self, attribute: [:0]const u8) bool {
        return interop.getBoolAttribute(self, attribute, .{});
    }

    pub fn getPtrAttribute(self: *Self, comptime T: type, attribute: [:0]const u8) ?*T {
        return interop.getPtrAttribute(T, self, attribute, .{});
    }

    pub fn setPtrAttribute(self: *Self, comptime T: type, attribute: [:0]const u8, value: ?*T) void {
        interop.setPtrAttribute(T, self, attribute, .{}, value);
    }

    pub fn setHandle(self: *Self, arg: [:0]const u8) void {
        interop.setHandle(self, arg);
    }

    pub fn fromHandleName(handle_name: [:0]const u8) ?*Self {
        return interop.fromHandleName(Self, handle_name);
    }

    pub fn postMessage(self: *Self, s: [:0]const u8, i: i32, f: f64, p: ?*anyopaque) void {
        return interop.postMessage(self, s, i, f, p);
    }

    ///
    /// Creates an interface element given its class name and parameters.
    /// After creation the element still needs to be attached to a container and mapped to the native system so it can be visible.
    pub fn init() Initializer {
        var handle = interop.create(Self);

        if (handle) |valid| {
            return .{
                .ref = @ptrCast(*Self, valid),
            };
        } else {
            return .{ .ref = undefined, .last_error = Error.NotInitialized };
        }
    }

    ///
    /// Displays a dialog in the current position, or changes a control VISIBLE attribute.
    /// For dialogs it is equivalent to call IupShowXY using IUP_CURRENT. See IupShowXY for more details.
    /// For other controls, to call IupShow is the same as setting VISIBLE=YES.
    pub fn show(self: *Self) !void {
        try interop.show(self);
    }

    ///
    /// Hides an interface element. This function has the same effect as attributing value "NO" to the interface element’s VISIBLE attribute.
    /// Once a dialog is hidden, either by means of IupHide or by changing the VISIBLE attribute or by means of a click in the window close button, the elements inside this dialog are not destroyed, so that you can show the dialog again. To destroy dialogs, the IupDestroy function must be called.
    pub fn hide(self: *Self) void {
        interop.hide(self);
    }

    ///
    /// Destroys an interface element and all its children.
    /// Only dialogs, timers, popup menus and images should be normally destroyed, but detached elements can also be destroyed.
    pub fn deinit(self: *Self) void {
        interop.destroy(self);
    }

    ///
    /// Creates (maps) the native interface objects corresponding to the given IUP interface elements.
    /// It will also called recursively to create the native element of all the children in the element's tree.
    /// The element must be already attached to a mapped container, except the dialog. A child can only be mapped if its parent is already mapped.
    /// This function is automatically called before the dialog is shown in IupShow, IupShowXY or IupPopup.
    /// If the element is a dialog then the abstract layout will be updated even if the dialog is already mapped. If the dialog is visible the elements will be immediately repositioned. Calling IupMap for an already mapped dialog is the same as only calling IupRefresh for the dialog.
    /// Calling IupMap for an already mapped element that is not a dialog does nothing.
    /// If you add new elements to an already mapped dialog you must call IupMap for that elements. And then call IupRefresh to update the dialog layout.
    /// If the WID attribute of an element is NULL, it means the element was not already mapped. Some containers do not have a native element associated, like VBOX and HBOX. In this case their WID is a fake value (void*)(-1).
    /// It is useful for the application to call IupMap when the value of the WID attribute must be known, i.e. the native element must exist, before a dialog is made visible.
    /// The MAP_CB callback is called at the end of the IupMap function, after all processing, so it can also be used to create other things that depend on the WID attribute. But notice that for non dialog elements it will be called before the dialog layout has been updated, so the element current size will still be 0x0 (since 3.14).
    pub fn map(self: *Self) !void {
        try interop.map(self);
    }

    pub fn popup(self: *Self, x: iup.DialogPosX, y: iup.DialogPosY) !void {
        try interop.popup(self, x, y);
    }

    pub fn showXY(self: *Self, x: iup.DialogPosX, y: iup.DialogPosY) !void {
        try interop.showXY(self, x, y);
    }

    ///
    /// Returns the the child element that has the NAME attribute equals to the given value on the same dialog hierarchy.
    /// Works also for children of a menu that is associated with a dialog.
    pub fn getDialogChild(self: *Self, byName: [:0]const u8) ?Element {
        return interop.getDialogChild(self, byName);
    }

    ///
    /// Updates the size and layout of all controls in the same dialog.
    /// To be used after changing size attributes, or attributes that affect the size of the control. Can be used for any element inside a dialog, but the layout of the dialog and all controls will be updated. It can change the layout of all the controls inside the dialog because of the dynamic layout positioning.
    pub fn refresh(self: *Self) void {
        Impl(Self).refresh(self);
    }

    ///
    /// Updates the size and layout of all controls in the same dialog.
    pub fn update(self: *Self) void {
        Impl(Self).update(self);
    }

    ///
    /// Updates the size and layout of all controls in the same dialog.
    pub fn updateChildren(self: *Self) void {
        Impl(Self).updateChildren(self);
    }

    ///
    /// Force the element and its children to be redrawn immediately.
    pub fn redraw(self: *Self, redraw_children: bool) void {
        Impl(Self).redraw(self, redraw_children);
    }

    pub fn getHandleName(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "HANDLENAME", .{});
    }

    pub fn setHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "HANDLENAME", .{}, arg);
    }

    pub fn getTipBgColor(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "TIPBGCOLOR", .{});
    }

    pub fn setTipBgColor(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "TIPBGCOLOR", .{}, rgb);
    }

    pub fn getMdiClient(self: *Self) bool {
        return interop.getBoolAttribute(self, "MDICLIENT", .{});
    }

    pub fn setMdiClient(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "MDICLIENT", .{}, arg);
    }

    pub fn getControl(self: *Self) bool {
        return interop.getBoolAttribute(self, "CONTROL", .{});
    }

    pub fn setControl(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "CONTROL", .{}, arg);
    }

    pub fn getTipIcon(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "TIPICON", .{});
    }

    pub fn setTipIcon(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TIPICON", .{}, arg);
    }

    ///
    /// SHOWPREVIEW: A preview area is shown inside the file dialog.
    /// Can have values "YES" or "NO".
    /// Default: "NO".
    /// In Windows, you must link with the "iup.rc" resource file so the preview
    /// area can be enabled (not necessary if using "iup.dll").
    /// Valid only if the FILE_CB callback is defined, use it to retrieve the file
    /// name and the necessary attributes to paint the preview area.
    /// (in Motif since 3.0) Read only attributes that are valid inside the FILE_CB
    /// callback when status="PAINT": PREVIEWDC: Returns the Device Context (HDC in
    /// Windows and GC in UNIX) PREVIEWWIDTH and PREVIEWHEIGHT: Returns the width
    /// and the height of the client rectangle for the preview area.
    /// Also the attributes WID, HWND, XWINDOW and XDISPLAY are valid and are
    /// relative to the preview area.
    /// If the attribute PREVIEWGLCANVAS is defined then it is used as the name of
    /// an existent IupGLCanvas control to be mapped internally to the preview canvas.
    /// Notice that this is not a fully implemented IupGLCanvas that inherits from IupCanvas.
    /// This does the minimum necessary so you can use IupGLCanvas auxiliary
    /// functions for the preview canvas and call OpenGL functions.
    /// No IupCanvas attributes or callbacks are available.
    /// (since 3.0)
    pub fn getShowPreview(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "SHOWPREVIEW", .{});
    }

    ///
    /// SHOWPREVIEW: A preview area is shown inside the file dialog.
    /// Can have values "YES" or "NO".
    /// Default: "NO".
    /// In Windows, you must link with the "iup.rc" resource file so the preview
    /// area can be enabled (not necessary if using "iup.dll").
    /// Valid only if the FILE_CB callback is defined, use it to retrieve the file
    /// name and the necessary attributes to paint the preview area.
    /// (in Motif since 3.0) Read only attributes that are valid inside the FILE_CB
    /// callback when status="PAINT": PREVIEWDC: Returns the Device Context (HDC in
    /// Windows and GC in UNIX) PREVIEWWIDTH and PREVIEWHEIGHT: Returns the width
    /// and the height of the client rectangle for the preview area.
    /// Also the attributes WID, HWND, XWINDOW and XDISPLAY are valid and are
    /// relative to the preview area.
    /// If the attribute PREVIEWGLCANVAS is defined then it is used as the name of
    /// an existent IupGLCanvas control to be mapped internally to the preview canvas.
    /// Notice that this is not a fully implemented IupGLCanvas that inherits from IupCanvas.
    /// This does the minimum necessary so you can use IupGLCanvas auxiliary
    /// functions for the preview canvas and call OpenGL functions.
    /// No IupCanvas attributes or callbacks are available.
    /// (since 3.0)
    pub fn setShowPreview(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "SHOWPREVIEW", .{}, arg);
    }

    pub fn getMenu(self: *Self) ?*iup.Menu {
        if (interop.getHandleAttribute(self, "MENU", .{})) |handle| {
            return @ptrCast(*iup.Menu, handle);
        } else {
            return null;
        }
    }

    pub fn setMenu(self: *Self, arg: *iup.Menu) void {
        interop.setHandleAttribute(self, "MENU", .{}, arg);
    }

    pub fn setMenuHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "MENU", .{}, arg);
    }

    pub fn getNoFlush(self: *Self) bool {
        return interop.getBoolAttribute(self, "NOFLUSH", .{});
    }

    pub fn setNoFlush(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "NOFLUSH", .{}, arg);
    }

    pub fn getMaxSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "MAXSIZE", .{});
        return Size.parse(str);
    }

    pub fn setMaxSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "MAXSIZE", .{}, value);
    }

    pub fn getOpacityImage(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "OPACITYIMAGE", .{});
    }

    pub fn setOpacityImage(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "OPACITYIMAGE", .{}, arg);
    }

    ///
    /// NOCHANGEDIR: Indicates if the current working directory must be restored
    /// after the user navigation.
    /// Default: "YES".
    pub fn getNoChangeDir(self: *Self) bool {
        return interop.getBoolAttribute(self, "NOCHANGEDIR", .{});
    }

    ///
    /// NOCHANGEDIR: Indicates if the current working directory must be restored
    /// after the user navigation.
    /// Default: "YES".
    pub fn setNoChangeDir(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "NOCHANGEDIR", .{}, arg);
    }

    pub fn getHelpButton(self: *Self) bool {
        return interop.getBoolAttribute(self, "HELPBUTTON", .{});
    }

    pub fn setHelpButton(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "HELPBUTTON", .{}, arg);
    }

    pub fn getShowNoFocus(self: *Self) bool {
        return interop.getBoolAttribute(self, "SHOWNOFOCUS", .{});
    }

    pub fn setShowNoFocus(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "SHOWNOFOCUS", .{}, arg);
    }

    pub fn getScreenPosition(self: *Self) iup.XYPos {
        var str = interop.getStrAttribute(self, "SCREENPOSITION", .{});
        return iup.XYPos.parse(str, ',');
    }

    pub fn getOpacity(self: *Self) i32 {
        return interop.getIntAttribute(self, "OPACITY", .{});
    }

    pub fn setOpacity(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "OPACITY", .{}, arg);
    }

    pub fn getPosition(self: *Self) iup.XYPos {
        var str = interop.getStrAttribute(self, "POSITION", .{});
        return iup.XYPos.parse(str, ',');
    }

    pub fn setPosition(self: *Self, x: i32, y: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
        interop.setStrAttribute(self, "POSITION", .{}, value);
    }

    pub fn getComposited(self: *Self) bool {
        return interop.getBoolAttribute(self, "COMPOSITED", .{});
    }

    pub fn setComposited(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "COMPOSITED", .{}, arg);
    }

    pub fn getDropFilesTarget(self: *Self) bool {
        return interop.getBoolAttribute(self, "DROPFILESTARGET", .{});
    }

    pub fn setDropFilesTarget(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DROPFILESTARGET", .{}, arg);
    }

    pub fn getBorderSize(self: *Self) i32 {
        return interop.getIntAttribute(self, "BORDERSIZE", .{});
    }

    pub fn getTip(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "TIP", .{});
    }

    pub fn setTip(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TIP", .{}, arg);
    }

    pub fn getCanFocus(self: *Self) bool {
        return interop.getBoolAttribute(self, "CANFOCUS", .{});
    }

    pub fn setCanFocus(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "CANFOCUS", .{}, arg);
    }

    pub fn getDragSourceMove(self: *Self) bool {
        return interop.getBoolAttribute(self, "DRAGSOURCEMOVE", .{});
    }

    pub fn setDragSourceMove(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DRAGSOURCEMOVE", .{}, arg);
    }

    pub fn getIcon(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "ICON", .{});
    }

    pub fn setIcon(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "ICON", .{}, arg);
    }

    pub fn getVisible(self: *Self) bool {
        return interop.getBoolAttribute(self, "VISIBLE", .{});
    }

    pub fn setVisible(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "VISIBLE", .{}, arg);
    }

    pub fn getCursor(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "CURSOR", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn setCursor(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "CURSOR", .{}, arg);
    }

    pub fn setCursorHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "CURSOR", .{}, arg);
    }

    pub fn getMenuBox(self: *Self) bool {
        return interop.getBoolAttribute(self, "MENUBOX", .{});
    }

    pub fn setMenuBox(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "MENUBOX", .{}, arg);
    }

    ///
    /// DIALOGTYPE: Type of dialog (Open, Save or Directory).
    /// Can have values "OPEN", "SAVE" or "DIR".
    /// Default: "OPEN".
    /// In Windows, when DIALOGTYPE=DIR the dialog shown is not the same dialog for
    /// OPEN and SAVE, this new dialog does not have the Help button neither filters.
    /// Also this new dialog needs CoInitializeEx with COINIT_APARTMENTTHREADED
    /// (done in IupOpen), if the COM library was initialized with
    /// COINIT_MULTITHREADED prior to IupOpen then the new dialog will have limited functionality.
    /// In Motif or GTK the dialog is the same, but it only allows the user to
    /// select a directory.
    pub fn getDialogType(self: *Self) ?DialogType {
        var ret = interop.getStrAttribute(self, "DIALOGTYPE", .{});

        if (std.ascii.eqlIgnoreCase("SAVE", ret)) return .Save;
        if (std.ascii.eqlIgnoreCase("DIR", ret)) return .Dir;
        if (std.ascii.eqlIgnoreCase("OPEN", ret)) return .Open;
        return null;
    }

    ///
    /// DIALOGTYPE: Type of dialog (Open, Save or Directory).
    /// Can have values "OPEN", "SAVE" or "DIR".
    /// Default: "OPEN".
    /// In Windows, when DIALOGTYPE=DIR the dialog shown is not the same dialog for
    /// OPEN and SAVE, this new dialog does not have the Help button neither filters.
    /// Also this new dialog needs CoInitializeEx with COINIT_APARTMENTTHREADED
    /// (done in IupOpen), if the COM library was initialized with
    /// COINIT_MULTITHREADED prior to IupOpen then the new dialog will have limited functionality.
    /// In Motif or GTK the dialog is the same, but it only allows the user to
    /// select a directory.
    pub fn setDialogType(self: *Self, arg: ?DialogType) void {
        if (arg) |value| switch (value) {
            .Save => interop.setStrAttribute(self, "DIALOGTYPE", .{}, "SAVE"),
            .Dir => interop.setStrAttribute(self, "DIALOGTYPE", .{}, "DIR"),
            .Open => interop.setStrAttribute(self, "DIALOGTYPE", .{}, "OPEN"),
        } else {
            interop.clearAttribute(self, "DIALOGTYPE", .{});
        }
    }

    pub fn zOrder(self: *Self, arg: ?ZOrder) void {
        if (arg) |value| switch (value) {
            .Top => interop.setStrAttribute(self, "ZORDER", .{}, "TOP"),
            .Bottom => interop.setStrAttribute(self, "ZORDER", .{}, "BOTTOM"),
        } else {
            interop.clearAttribute(self, "ZORDER", .{});
        }
    }

    pub fn getX(self: *Self) i32 {
        return interop.getIntAttribute(self, "X", .{});
    }

    pub fn getY(self: *Self) i32 {
        return interop.getIntAttribute(self, "Y", .{});
    }

    pub fn getHideTitleBar(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "HIDETITLEBAR", .{});
    }

    pub fn setHideTitleBar(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "HIDETITLEBAR", .{}, arg);
    }

    pub fn getMaxBox(self: *Self) bool {
        return interop.getBoolAttribute(self, "MAXBOX", .{});
    }

    pub fn setMaxBox(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "MAXBOX", .{}, arg);
    }

    pub fn getDragDrop(self: *Self) bool {
        return interop.getBoolAttribute(self, "DRAGDROP", .{});
    }

    pub fn setDragDrop(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DRAGDROP", .{}, arg);
    }

    pub fn getDialogHint(self: *Self) bool {
        return interop.getBoolAttribute(self, "DIALOGHINT", .{});
    }

    pub fn setDialogHint(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DIALOGHINT", .{}, arg);
    }

    ///
    /// ALLOWNEW: Indicates if non-existent file names are accepted.
    /// If equals "NO" and the user specifies a non-existing file, an alert dialog
    /// is shown.
    /// Default: if the dialog is of type "OPEN", default is "NO"; if the dialog is
    /// of type "SAVE", default is "YES".
    /// Not used when DIALOGTYPE=DIR.
    pub fn getAllowNew(self: *Self) bool {
        return interop.getBoolAttribute(self, "ALLOWNEW", .{});
    }

    ///
    /// ALLOWNEW: Indicates if non-existent file names are accepted.
    /// If equals "NO" and the user specifies a non-existing file, an alert dialog
    /// is shown.
    /// Default: if the dialog is of type "OPEN", default is "NO"; if the dialog is
    /// of type "SAVE", default is "YES".
    /// Not used when DIALOGTYPE=DIR.
    pub fn setAllowNew(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "ALLOWNEW", .{}, arg);
    }

    pub fn getDialogFrame(self: *Self) bool {
        return interop.getBoolAttribute(self, "DIALOGFRAME", .{});
    }

    pub fn setDialogFrame(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DIALOGFRAME", .{}, arg);
    }

    pub fn getNActive(self: *Self) bool {
        return interop.getBoolAttribute(self, "NACTIVE", .{});
    }

    pub fn setNActive(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "NACTIVE", .{}, arg);
    }

    pub fn getTheme(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "THEME", .{});
    }

    pub fn setTheme(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "THEME", .{}, arg);
    }

    pub fn getSaveUnder(self: *Self) bool {
        return interop.getBoolAttribute(self, "SAVEUNDER", .{});
    }

    pub fn setSaveUnder(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "SAVEUNDER", .{}, arg);
    }

    pub fn getTray(self: *Self) bool {
        return interop.getBoolAttribute(self, "TRAY", .{});
    }

    pub fn setTray(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "TRAY", .{}, arg);
    }

    pub fn getChildOffset(self: *Self) Size {
        var str = interop.getStrAttribute(self, "CHILDOFFSET", .{});
        return Size.parse(str);
    }

    pub fn setChildOffset(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "CHILDOFFSET", .{}, value);
    }

    pub fn getExpand(self: *Self) ?Expand {
        var ret = interop.getStrAttribute(self, "EXPAND", .{});

        if (std.ascii.eqlIgnoreCase("YES", ret)) return .Yes;
        if (std.ascii.eqlIgnoreCase("HORIZONTAL", ret)) return .Horizontal;
        if (std.ascii.eqlIgnoreCase("VERTICAL", ret)) return .Vertical;
        if (std.ascii.eqlIgnoreCase("HORIZONTALFREE", ret)) return .HorizontalFree;
        if (std.ascii.eqlIgnoreCase("VERTICALFREE", ret)) return .VerticalFree;
        if (std.ascii.eqlIgnoreCase("NO", ret)) return .No;
        return null;
    }

    pub fn setExpand(self: *Self, arg: ?Expand) void {
        if (arg) |value| switch (value) {
            .Yes => interop.setStrAttribute(self, "EXPAND", .{}, "YES"),
            .Horizontal => interop.setStrAttribute(self, "EXPAND", .{}, "HORIZONTAL"),
            .Vertical => interop.setStrAttribute(self, "EXPAND", .{}, "VERTICAL"),
            .HorizontalFree => interop.setStrAttribute(self, "EXPAND", .{}, "HORIZONTALFREE"),
            .VerticalFree => interop.setStrAttribute(self, "EXPAND", .{}, "VERTICALFREE"),
            .No => interop.setStrAttribute(self, "EXPAND", .{}, "NO"),
        } else {
            interop.clearAttribute(self, "EXPAND", .{});
        }
    }

    pub fn getSize(self: *Self) iup.DialogSize {
        var str = interop.getStrAttribute(self, "SIZE", .{});
        return iup.DialogSize.parse(str);
    }

    pub fn setSize(self: *Self, width: ?iup.ScreenSize, height: ?iup.ScreenSize) void {
        var buffer: [128]u8 = undefined;
        var str = iup.DialogSize.screenSizeToString(&buffer, width, height);
        interop.setStrAttribute(self, "SIZE", .{}, str);
    }

    pub fn getWId(self: *Self) i32 {
        return interop.getIntAttribute(self, "WID", .{});
    }

    ///
    /// STATUS (read-only): Indicates the status of the selection made: "1": New file.
    /// "0": Normal, existing file or directory.
    /// "-1": Operation cancelled.
    pub fn getStatus(self: *Self) Status {
        var ret = interop.getIntAttribute(self, "STATUS", .{});
        return @intToEnum(Status, ret);
    }

    pub fn getTipMarkup(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "TIPMARKUP", .{});
    }

    pub fn setTipMarkup(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TIPMARKUP", .{}, arg);
    }

    ///
    /// EXTDEFAULT: default extension to be used if selected file does not have an extension.
    /// The inspected extension will consider to have the same number of characters
    /// of the default extension.
    /// It must NOT include the period ".".
    /// (since 3.18)
    pub fn getExtDefault(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "EXTDEFAULT", .{});
    }

    ///
    /// EXTDEFAULT: default extension to be used if selected file does not have an extension.
    /// The inspected extension will consider to have the same number of characters
    /// of the default extension.
    /// It must NOT include the period ".".
    /// (since 3.18)
    pub fn setExtDefault(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "EXTDEFAULT", .{}, arg);
    }

    pub fn getMdiMenu(self: *Self) ?*iup.Menu {
        if (interop.getHandleAttribute(self, "MDIMENU", .{})) |handle| {
            return @ptrCast(*iup.Menu, handle);
        } else {
            return null;
        }
    }

    pub fn setMdiMenu(self: *Self, arg: *iup.Menu) void {
        interop.setHandleAttribute(self, "MDIMENU", .{}, arg);
    }

    pub fn setMdiMenuHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "MDIMENU", .{}, arg);
    }

    pub fn getStartFocus(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "STARTFOCUS", .{});
    }

    pub fn setStartFocus(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "STARTFOCUS", .{}, arg);
    }

    pub fn getFontSize(self: *Self) i32 {
        return interop.getIntAttribute(self, "FONTSIZE", .{});
    }

    pub fn setFontSize(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "FONTSIZE", .{}, arg);
    }

    pub fn getNaturalSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "NATURALSIZE", .{});
        return Size.parse(str);
    }

    pub fn getDropTypes(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "DROPTYPES", .{});
    }

    pub fn setDropTypes(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "DROPTYPES", .{}, arg);
    }

    pub fn getTrayTipMarkup(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "TRAYTIPMARKUP", .{});
    }

    pub fn setTrayTipMarkup(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TRAYTIPMARKUP", .{}, arg);
    }

    pub fn getUserSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "USERSIZE", .{});
        return Size.parse(str);
    }

    pub fn setUserSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "USERSIZE", .{}, value);
    }

    pub fn getTipDelay(self: *Self) i32 {
        return interop.getIntAttribute(self, "TIPDELAY", .{});
    }

    pub fn setTipDelay(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "TIPDELAY", .{}, arg);
    }

    pub fn getCustomFrame(self: *Self) bool {
        return interop.getBoolAttribute(self, "CUSTOMFRAME", .{});
    }

    pub fn setCustomFrame(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "CUSTOMFRAME", .{}, arg);
    }

    ///
    /// TITLE: Dialog's title.
    pub fn getTitle(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "TITLE", .{});
    }

    ///
    /// TITLE: Dialog's title.
    pub fn setTitle(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TITLE", .{}, arg);
    }

    pub fn getDefaultEsc(self: *Self) ?*iup.Button {
        if (interop.getHandleAttribute(self, "DEFAULTESC", .{})) |handle| {
            return @ptrCast(*iup.Button, handle);
        } else {
            return null;
        }
    }

    pub fn setDefaultEsc(self: *Self, arg: *iup.Button) void {
        interop.setHandleAttribute(self, "DEFAULTESC", .{}, arg);
    }

    pub fn setDefaultEscHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "DEFAULTESC", .{}, arg);
    }

    pub fn getPlacement(self: *Self) ?Placement {
        var ret = interop.getStrAttribute(self, "PLACEMENT", .{});

        if (std.ascii.eqlIgnoreCase("MAXIMIZED", ret)) return .Maximized;
        if (std.ascii.eqlIgnoreCase("MINIMIZED", ret)) return .Minimized;
        if (std.ascii.eqlIgnoreCase("FULL", ret)) return .Full;
        return null;
    }

    pub fn setPlacement(self: *Self, arg: ?Placement) void {
        if (arg) |value| switch (value) {
            .Maximized => interop.setStrAttribute(self, "PLACEMENT", .{}, "MAXIMIZED"),
            .Minimized => interop.setStrAttribute(self, "PLACEMENT", .{}, "MINIMIZED"),
            .Full => interop.setStrAttribute(self, "PLACEMENT", .{}, "FULL"),
        } else {
            interop.clearAttribute(self, "PLACEMENT", .{});
        }
    }

    ///
    /// EXTFILTER [Windows and GTK Only]: Defines several file filters.
    /// It has priority over FILTERINFO and FILTER.
    /// Must be a text with the format "FilterInfo1|Filter1|FilterInfo2|Filter2|...".
    /// The list ends with character '|'.
    /// Example: "Text files|*.txt;*.doc|Image files|*.gif;*.jpg;*.bmp|".
    /// In GTK there is no way how to overwrite the filters, so it is recommended
    /// to always add a less restrictive filter to the filter list, for example
    /// "All Files|*.*".
    pub fn getExtFilter(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "EXTFILTER", .{});
    }

    ///
    /// EXTFILTER [Windows and GTK Only]: Defines several file filters.
    /// It has priority over FILTERINFO and FILTER.
    /// Must be a text with the format "FilterInfo1|Filter1|FilterInfo2|Filter2|...".
    /// The list ends with character '|'.
    /// Example: "Text files|*.txt;*.doc|Image files|*.gif;*.jpg;*.bmp|".
    /// In GTK there is no way how to overwrite the filters, so it is recommended
    /// to always add a less restrictive filter to the filter list, for example
    /// "All Files|*.*".
    pub fn setExtFilter(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "EXTFILTER", .{}, arg);
    }

    pub fn getPropagateFocus(self: *Self) bool {
        return interop.getBoolAttribute(self, "PROPAGATEFOCUS", .{});
    }

    pub fn setPropagateFocus(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "PROPAGATEFOCUS", .{}, arg);
    }

    pub fn getBgColor(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "BGCOLOR", .{});
    }

    pub fn setBgColor(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "BGCOLOR", .{}, rgb);
    }

    pub fn getDropTarget(self: *Self) bool {
        return interop.getBoolAttribute(self, "DROPTARGET", .{});
    }

    pub fn setDropTarget(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DROPTARGET", .{}, arg);
    }

    pub fn getDragSource(self: *Self) bool {
        return interop.getBoolAttribute(self, "DRAGSOURCE", .{});
    }

    pub fn setDragSource(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "DRAGSOURCE", .{}, arg);
    }

    pub fn getResize(self: *Self) bool {
        return interop.getBoolAttribute(self, "RESIZE", .{});
    }

    pub fn setResize(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "RESIZE", .{}, arg);
    }

    pub fn getMaximized(self: *Self) bool {
        return interop.getBoolAttribute(self, "MAXIMIZED", .{});
    }

    pub fn getFloating(self: *Self) ?Floating {
        var ret = interop.getStrAttribute(self, "FLOATING", .{});

        if (std.ascii.eqlIgnoreCase("YES", ret)) return .Yes;
        if (std.ascii.eqlIgnoreCase("IGNORE", ret)) return .Ignore;
        if (std.ascii.eqlIgnoreCase("NO", ret)) return .No;
        return null;
    }

    pub fn setFloating(self: *Self, arg: ?Floating) void {
        if (arg) |value| switch (value) {
            .Yes => interop.setStrAttribute(self, "FLOATING", .{}, "YES"),
            .Ignore => interop.setStrAttribute(self, "FLOATING", .{}, "IGNORE"),
            .No => interop.setStrAttribute(self, "FLOATING", .{}, "NO"),
        } else {
            interop.clearAttribute(self, "FLOATING", .{});
        }
    }

    pub fn getNormalizerGroup(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "NORMALIZERGROUP", .{});
    }

    pub fn setNormalizerGroup(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "NORMALIZERGROUP", .{}, arg);
    }

    pub fn getRasterSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "RASTERSIZE", .{});
        return Size.parse(str);
    }

    pub fn setRasterSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "RASTERSIZE", .{}, value);
    }

    pub fn getShapeImage(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "SHAPEIMAGE", .{});
    }

    pub fn setShapeImage(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "SHAPEIMAGE", .{}, arg);
    }

    pub fn getTipFgColor(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "TIPFGCOLOR", .{});
    }

    pub fn setTipFgColor(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "TIPFGCOLOR", .{}, rgb);
    }

    pub fn getFontFace(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "FONTFACE", .{});
    }

    pub fn setFontFace(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "FONTFACE", .{}, arg);
    }

    pub fn topMost(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "TOPMOST", .{}, arg);
    }

    pub fn getName(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "NAME", .{});
    }

    pub fn setName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "NAME", .{}, arg);
    }

    pub fn getMinBox(self: *Self) bool {
        return interop.getBoolAttribute(self, "MINBOX", .{});
    }

    pub fn setMinBox(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "MINBOX", .{}, arg);
    }

    pub fn getDefaultEnter(self: *Self) ?*iup.Button {
        if (interop.getHandleAttribute(self, "DEFAULTENTER", .{})) |handle| {
            return @ptrCast(*iup.Button, handle);
        } else {
            return null;
        }
    }

    pub fn setDefaultEnter(self: *Self, arg: *iup.Button) void {
        interop.setHandleAttribute(self, "DEFAULTENTER", .{}, arg);
    }

    pub fn setDefaultEnterHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "DEFAULTENTER", .{}, arg);
    }

    pub fn getModal(self: *Self) bool {
        return interop.getBoolAttribute(self, "MODAL", .{});
    }

    ///
    /// PARENTDIALOG: Makes the dialog be treated as a child of the specified dialog.
    pub fn getParentDialog(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "PARENTDIALOG", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    ///
    /// PARENTDIALOG: Makes the dialog be treated as a child of the specified dialog.
    pub fn setParentDialog(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Dialog, arg);
        interop.setHandleAttribute(self, "PARENTDIALOG", .{}, arg);
    }

    pub fn setParentDialogHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "PARENTDIALOG", .{}, arg);
    }

    pub fn getBackground(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "BACKGROUND", .{});
    }

    pub fn setBackground(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "BACKGROUND", .{}, rgb);
    }

    pub fn getHideTaskbar(self: *Self) bool {
        return interop.getBoolAttribute(self, "HIDETASKBAR", .{});
    }

    pub fn setHideTaskbar(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "HIDETASKBAR", .{}, arg);
    }

    ///
    /// FILTER: String containing a list of file filters separated by ';' without spaces.
    /// Example: "*.C;*.LED;test.*".
    /// In Motif only the first filter is used.
    pub fn getFilter(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "FILTER", .{});
    }

    ///
    /// FILTER: String containing a list of file filters separated by ';' without spaces.
    /// Example: "*.C;*.LED;test.*".
    /// In Motif only the first filter is used.
    pub fn setFilter(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "FILTER", .{}, arg);
    }

    ///
    /// VALUE (read-only): Name of the selected file(s), or NULL if no file was selected.
    /// If FILE is not defined this is used as the initial value.
    /// When MULTIPLEFILES=Yes it contains the path (but NOT the same value
    /// returned in DIRECTORY, it does not contains the last separator) and several
    /// file names separated by the '|' character.
    /// The file list ends with character '|'.
    /// BUT when the user selects just one file, the directory and the file are not
    /// separated by '|'.
    /// For example: "/tecgraf/iup/test|a.txt|b.txt|c.txt|" (MULTIPLEFILES=Yes and
    /// more than one file is selected) "/tecgraf/iup/test/a.txt" (only one file is selected).
    /// In Windows, the FILE and the DIRECTORY attributes also accept strings
    /// containing "/" as path separators, but the VALUE attribute will always
    /// return strings using the "\" character.
    pub fn getValue(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "VALUE", .{});
    }

    pub fn getBringFront(self: *Self) bool {
        return interop.getBoolAttribute(self, "BRINGFRONT", .{});
    }

    pub fn setBringFront(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "BRINGFRONT", .{}, arg);
    }

    pub fn getTrayImage(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "TRAYIMAGE", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn setTrayImage(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "TRAYIMAGE", .{}, arg);
    }

    pub fn setTrayImageHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TRAYIMAGE", .{}, arg);
    }

    pub fn getActive(self: *Self) bool {
        return interop.getBoolAttribute(self, "ACTIVE", .{});
    }

    pub fn setActive(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "ACTIVE", .{}, arg);
    }

    pub fn getTipVisible(self: *Self) bool {
        return interop.getBoolAttribute(self, "TIPVISIBLE", .{});
    }

    pub fn setTipVisible(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "TIPVISIBLE", .{}, arg);
    }

    pub fn getExpandWeight(self: *Self) f64 {
        return interop.getDoubleAttribute(self, "EXPANDWEIGHT", .{});
    }

    pub fn setExpandWeight(self: *Self, arg: f64) void {
        interop.setDoubleAttribute(self, "EXPANDWEIGHT", .{}, arg);
    }

    pub fn getMinSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "MINSIZE", .{});
        return Size.parse(str);
    }

    pub fn setMinSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "MINSIZE", .{}, value);
    }

    pub fn getActiveWindow(self: *Self) bool {
        return interop.getBoolAttribute(self, "ACTIVEWINDOW", .{});
    }

    pub fn getNTheme(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "NTHEME", .{});
    }

    pub fn setNTheme(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "NTHEME", .{}, arg);
    }

    pub fn getBorder(self: *Self) bool {
        return interop.getBoolAttribute(self, "BORDER", .{});
    }

    pub fn setBorder(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "BORDER", .{}, arg);
    }

    pub fn getCustomFramesImulate(self: *Self) bool {
        return interop.getBoolAttribute(self, "CUSTOMFRAMESIMULATE", .{});
    }

    pub fn setCustomFramesImulate(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "CUSTOMFRAMESIMULATE", .{}, arg);
    }

    pub fn getShrink(self: *Self) bool {
        return interop.getBoolAttribute(self, "SHRINK", .{});
    }

    pub fn setShrink(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "SHRINK", .{}, arg);
    }

    pub fn getCharSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "CHARSIZE", .{});
        return Size.parse(str);
    }

    pub fn getClientSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "CLIENTSIZE", .{});
        return Size.parse(str);
    }

    pub fn setClientSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "CLIENTSIZE", .{}, value);
    }

    pub fn getClientOffset(self: *Self) Size {
        var str = interop.getStrAttribute(self, "CLIENTOFFSET", .{});
        return Size.parse(str);
    }

    pub fn getTrayTip(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "TRAYTIP", .{});
    }

    pub fn setTrayTip(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TRAYTIP", .{}, arg);
    }

    pub fn getDragTypes(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "DRAGTYPES", .{});
    }

    pub fn setDragTypes(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "DRAGTYPES", .{}, arg);
    }

    pub fn getToolBox(self: *Self) bool {
        return interop.getBoolAttribute(self, "TOOLBOX", .{});
    }

    pub fn setToolBox(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "TOOLBOX", .{}, arg);
    }

    pub fn getMdiFrame(self: *Self) bool {
        return interop.getBoolAttribute(self, "MDIFRAME", .{});
    }

    pub fn setMdiFrame(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "MDIFRAME", .{}, arg);
    }

    ///
    /// NOOVERWRITEPROMPT: do not prompt to overwrite an existent file when in
    /// "SAVE" dialog.
    /// Default is "NO", i.e.
    /// prompt before overwrite.
    /// (GTK 2.8)
    pub fn getNoOverwritePrompt(self: *Self) bool {
        return interop.getBoolAttribute(self, "NOOVERWRITEPROMPT", .{});
    }

    ///
    /// NOOVERWRITEPROMPT: do not prompt to overwrite an existent file when in
    /// "SAVE" dialog.
    /// Default is "NO", i.e.
    /// prompt before overwrite.
    /// (GTK 2.8)
    pub fn setNoOverwritePrompt(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "NOOVERWRITEPROMPT", .{}, arg);
    }

    pub fn getFontStyle(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "FONTSTYLE", .{});
    }

    pub fn setFontStyle(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "FONTSTYLE", .{}, arg);
    }

    ///
    /// DIRECTORY: Initial directory.
    /// When consulted after the dialog is closed and the user pressed the OK
    /// button, it will contain the directory of the selected file.
    /// When set the last separator does not need to be specified, but when get the
    /// returned value will always contains the last separator.
    /// In Motif or GTK, if not defined, the dialog opens in the current directory.
    /// In Windows, if not defined and the application has used the dialog in the
    /// past, the path most recently used is selected as the initial directory.
    /// However, if an application is not run for a long time, its saved selected
    /// path is discarded.
    /// Also if not defined and the current directory contains any files of the
    /// specified filter types, the initial directory is the current directory.
    /// Otherwise, the initial directory is the "My Documents" directory of the
    /// current user.
    /// Otherwise, the initial directory is the Desktop folder.
    /// In Windows, the FILE and the DIRECTORY attributes also accept strings
    /// containing "/" as path separators, but the VALUE attribute will always
    /// return strings using the "\" character.
    pub fn getDirectory(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "DIRECTORY", .{});
    }

    ///
    /// DIRECTORY: Initial directory.
    /// When consulted after the dialog is closed and the user pressed the OK
    /// button, it will contain the directory of the selected file.
    /// When set the last separator does not need to be specified, but when get the
    /// returned value will always contains the last separator.
    /// In Motif or GTK, if not defined, the dialog opens in the current directory.
    /// In Windows, if not defined and the application has used the dialog in the
    /// past, the path most recently used is selected as the initial directory.
    /// However, if an application is not run for a long time, its saved selected
    /// path is discarded.
    /// Also if not defined and the current directory contains any files of the
    /// specified filter types, the initial directory is the current directory.
    /// Otherwise, the initial directory is the "My Documents" directory of the
    /// current user.
    /// Otherwise, the initial directory is the Desktop folder.
    /// In Windows, the FILE and the DIRECTORY attributes also accept strings
    /// containing "/" as path separators, but the VALUE attribute will always
    /// return strings using the "\" character.
    pub fn setDirectory(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "DIRECTORY", .{}, arg);
    }

    pub fn getMdiChild(self: *Self) bool {
        return interop.getBoolAttribute(self, "MDICHILD", .{});
    }

    pub fn setMdiChild(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "MDICHILD", .{}, arg);
    }

    pub fn fullScreen(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "FULLSCREEN", .{}, arg);
    }

    pub fn getNativeParent(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "NATIVEPARENT", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    pub fn setNativeParent(self: *Self, arg: anytype) !void {
        interop.setHandleAttribute(self, "NATIVEPARENT", .{}, arg);
    }

    pub fn setNativeParentHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "NATIVEPARENT", .{}, arg);
    }

    pub fn getFont(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "FONT", .{});
    }

    pub fn setFont(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "FONT", .{}, arg);
    }

    pub fn simulateModal(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "SIMULATEMODAL", .{}, arg);
    }

    ///
    /// TABIMAGEn (non inheritable): image name to be used in the respective tab.
    /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
    /// n starts at 0.
    /// See also IupImage.
    /// In Motif, the image is shown only if TABTITLEn is NULL.
    /// In Windows and Motif set the BGCOLOR attribute before setting the image.
    /// When set after map will update the TABIMAGE attribute on the respective
    /// child (since 3.10).
    /// (since 3.0).
    /// TABIMAGE (non inheritable) (at children only): Same as TABIMAGEn but set in
    /// each child.
    /// Works only if set before the child is added to the tabs.
    pub fn getTabImage(self: *Self, index: i32) ?iup.Element {
        if (interop.getHandleAttribute(self, "TABIMAGE", .{index})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    ///
    /// TABIMAGEn (non inheritable): image name to be used in the respective tab.
    /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
    /// n starts at 0.
    /// See also IupImage.
    /// In Motif, the image is shown only if TABTITLEn is NULL.
    /// In Windows and Motif set the BGCOLOR attribute before setting the image.
    /// When set after map will update the TABIMAGE attribute on the respective
    /// child (since 3.10).
    /// (since 3.0).
    /// TABIMAGE (non inheritable) (at children only): Same as TABIMAGEn but set in
    /// each child.
    /// Works only if set before the child is added to the tabs.
    pub fn setTabImage(self: *Self, index: i32, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "TABIMAGE", .{index}, arg);
    }

    pub fn setTabImageHandleName(self: *Self, index: i32, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TABIMAGE", .{index}, arg);
    }

    ///
    /// TABTITLEn (non inheritable): Contains the text to be shown in the
    /// respective tab title.
    /// n starts at 0.
    /// If this value is NULL, it will remain empty.
    /// The "&" character can be used to define a mnemonic, the next character will
    /// be used as key.
    /// Use "&&" to show the "&" character instead on defining a mnemonic.
    /// The button can be activated from any control in the dialog using the
    /// "Alt+key" combination.
    /// (mnemonic support since 3.3).
    /// When set after map will update the TABTITLE attribute on the respective
    /// child (since 3.10).
    /// (since 3.0).
    /// TABTITLE (non inheritable) (at children only): Same as TABTITLEn but set in
    /// each child.
    /// Works only if set before the child is added to the tabs.
    pub fn getTabTitle(self: *Self, index: i32) [:0]const u8 {
        return interop.getStrAttribute(self, "TABTITLE", .{index});
    }

    ///
    /// TABTITLEn (non inheritable): Contains the text to be shown in the
    /// respective tab title.
    /// n starts at 0.
    /// If this value is NULL, it will remain empty.
    /// The "&" character can be used to define a mnemonic, the next character will
    /// be used as key.
    /// Use "&&" to show the "&" character instead on defining a mnemonic.
    /// The button can be activated from any control in the dialog using the
    /// "Alt+key" combination.
    /// (mnemonic support since 3.3).
    /// When set after map will update the TABTITLE attribute on the respective
    /// child (since 3.10).
    /// (since 3.0).
    /// TABTITLE (non inheritable) (at children only): Same as TABTITLEn but set in
    /// each child.
    /// Works only if set before the child is added to the tabs.
    pub fn setTabTitle(self: *Self, index: i32, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TABTITLE", .{index}, arg);
    }

    pub fn setFocusCallback(self: *Self, callback: ?*const OnFocusFn) void {
        const Handler = CallbackHandler(Self, OnFocusFn, "FOCUS_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// K_ANY K_ANY Action generated when a keyboard event occurs.
    /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
    /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
    /// c: identifier of typed key.
    /// Please refer to the Keyboard Codes table for a list of possible values.
    /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
    /// the control and not propagated.
    /// If returns IUP_CONTINUE, the key will be processed and the event will be
    /// propagated to the parent of the element receiving it, this is the default behavior.
    /// If returns IUP_DEFAULT the key is processed but it is not propagated.
    /// IUP_CLOSE will be processed.
    /// Notes Keyboard callbacks depend on the keyboard usage of the control with
    /// the focus.
    /// So if you return IUP_IGNORE the control will usually not process the key.
    /// But be aware that sometimes the control process the key in another event so
    /// even returning IUP_IGNORE the key can get processed.
    /// Although it will not be propagated.
    /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
    /// the IUP_CONTINUE return value to work while the control is in focus.
    /// If the callback does not exists it is automatically propagated to the
    /// parent of the element.
    /// K_* callbacks All defined keys are also callbacks of any element, called
    /// when the respective key is activated.
    /// For example: "K_cC" is also a callback activated when the user press
    /// Ctrl+C, when the focus is at the element or at a children with focus.
    /// This is the way an application can create shortcut keys, also called hot keys.
    /// These callbacks are not available in IupLua.
    /// Affects All elements with keyboard interaction.
    pub fn setKAnyCallback(self: *Self, callback: ?*const OnKAnyFn) void {
        const Handler = CallbackHandler(Self, OnKAnyFn, "K_ANY");
        Handler.setCallback(self, callback);
    }

    ///
    /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
    /// In Motif is also activated by the Help button in some workstations keyboard.
    /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Returns: IUP_CLOSE will be processed.
    /// Affects All elements with user interaction.
    pub fn setHelpCallback(self: *Self, callback: ?*const OnHelpFn) void {
        const Handler = CallbackHandler(Self, OnHelpFn, "HELP_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// CLOSE_CB CLOSE_CB Called just before a dialog is closed when the user
    /// clicks the close button of the title bar or an equivalent action.
    /// Callback int function(Ihandle *ih); [in C] ih:close_cb() -> (ret: number)
    /// [in Lua] ih: identifies the element that activated the event.
    /// Returns: if IUP_IGNORE, it prevents the dialog from being closed.
    /// If you destroy the dialog in this callback, you must return IUP_IGNORE.
    /// IUP_CLOSE will be processed.
    /// Affects IupDialog
    pub fn setCloseCallback(self: *Self, callback: ?*const OnCloseFn) void {
        const Handler = CallbackHandler(Self, OnCloseFn, "CLOSE_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDropMotionCallback(self: *Self, callback: ?*const OnDropMotionFn) void {
        const Handler = CallbackHandler(Self, OnDropMotionFn, "DROPMOTION_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragEndCallback(self: *Self, callback: ?*const OnDragEndFn) void {
        const Handler = CallbackHandler(Self, OnDragEndFn, "DRAGEND_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragBeginCallback(self: *Self, callback: ?*const OnDragBeginFn) void {
        const Handler = CallbackHandler(Self, OnDragBeginFn, "DRAGBEGIN_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setMapCallback(self: *Self, callback: ?*const OnMapFn) void {
        const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also LEAVEWINDOW_CB
    pub fn setEnterWindowCallback(self: *Self, callback: ?*const OnEnterWindowFn) void {
        const Handler = CallbackHandler(Self, OnEnterWindowFn, "ENTERWINDOW_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
    /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Notes If the dialog is visible then it is hidden before it is destroyed.
    /// The callback will be called right after it is hidden.
    /// The callback will be called before all other destroy procedures.
    /// For instance, if the element has children then it is called before the
    /// children are destroyed.
    /// For language binding implementations use the callback name "LDESTROY_CB" to
    /// release memory allocated by the binding for the element.
    /// Also the callback will be called before the language callback.
    /// Affects All.
    pub fn setDestroyCallback(self: *Self, callback: ?*const OnDestroyFn) void {
        const Handler = CallbackHandler(Self, OnDestroyFn, "DESTROY_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDropDataCallback(self: *Self, callback: ?*const OnDropDataFn) void {
        const Handler = CallbackHandler(Self, OnDropDataFn, "DROPDATA_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
    /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Affects All elements with user interaction, except menus.
    /// In Windows, there are restrictions when using this callback.
    /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
    /// function calls that display or activate a window.
    /// This causes the thread to yield control and can cause the application to
    /// stop responding to messages.
    /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
    pub fn setKillFocusCallback(self: *Self, callback: ?*const OnKillFocusFn) void {
        const Handler = CallbackHandler(Self, OnKillFocusFn, "KILLFOCUS_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragDataCallback(self: *Self, callback: ?*const OnDragDataFn) void {
        const Handler = CallbackHandler(Self, OnDragDataFn, "DRAGDATA_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setDragDataSizeCallback(self: *Self, callback: ?*const OnDragDataSizeFn) void {
        const Handler = CallbackHandler(Self, OnDragDataSizeFn, "DRAGDATASIZE_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// SHOW_CB SHOW_CB Called right after the dialog is showed, hidden, maximized,
    /// minimized or restored from minimized/maximized.
    /// This callback is called when those actions were performed by the user or
    /// programmatically by the application.
    /// Callback int function(Ihandle *ih, int state); [in C] ih:show_cb(state:
    /// number) -> (ret: number) [in Lua] ih: identifier of the element that
    /// activated the event.
    /// state: indicates which of the following situations generated the event:
    /// IUP_HIDE (since 3.0) IUP_SHOW IUP_RESTORE (was minimized or maximized)
    /// IUP_MINIMIZE IUP_MAXIMIZE (since 3.0) (not received in Motif when activated
    /// from the maximize button) Returns: IUP_CLOSE will be processed.
    /// Affects IupDialog
    pub fn setShowCallback(self: *Self, callback: ?*const OnShowFn) void {
        const Handler = CallbackHandler(Self, OnShowFn, "SHOW_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// DROPFILES_CB DROPFILES_CB Action called when a file is "dropped" into the control.
    /// When several files are dropped at once, the callback is called several
    /// times, once for each file.
    /// If defined after the element is mapped then the attribute DROPFILESTARGET
    /// must be set to YES.
    /// [Windows and GTK Only] (GTK 2.6) Callback int function(Ihandle *ih, const
    /// char* filename, int num, int x, int y); [in C] ih:dropfiles_cb(filename:
    /// string; num, x, y: number) -> (ret: number) [in Lua] ih: identifier of the
    /// element that activated the event.
    /// filename: Name of the dropped file.
    /// num: Number index of the dropped file.
    /// If several files are dropped, num is the index of the dropped file starting
    /// from "total-1" to "0".
    /// x: X coordinate of the point where the user released the mouse button.
    /// y: Y coordinate of the point where the user released the mouse button.
    /// Returns: If IUP_IGNORE is returned the callback will NOT be called for the
    /// next dropped files, and the processing of dropped files will be interrupted.
    /// Affects IupDialog, IupCanvas, IupGLCanvas, IupText, IupList
    pub fn setDropFilesCallback(self: *Self, callback: ?*const OnDropFilesFn) void {
        const Handler = CallbackHandler(Self, OnDropFilesFn, "DROPFILES_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// RESIZE_CB RESIZE_CB Action generated when the canvas or dialog size is changed.
    /// Callback int function(Ihandle *ih, int width, int height); [in C]
    /// ih:resize_cb(width, height: number) -> (ret: number) [in Lua] ih:
    /// identifier of the element that activated the event.
    /// width: the width of the internal element size in pixels not considering the
    /// decorations (client size) height: the height of the internal element size
    /// in pixels not considering the decorations (client size) Notes For the
    /// dialog, this action is also generated when the dialog is mapped, after the
    /// map and before the show.
    /// When XAUTOHIDE=Yes or YAUTOHIDE=Yes, if the canvas scrollbar is
    /// hidden/shown after changing the DX or DY attributes from inside the
    /// callback, the size of the drawing area will immediately change, so the
    /// parameters with and height will be invalid.
    /// To update the parameters consult the DRAWSIZE attribute.
    /// Also activate the drawing toolkit only after updating the DX or DY attributes.
    /// Affects IupCanvas, IupGLCanvas, IupDialog
    pub fn setResizeCallback(self: *Self, callback: ?*const OnResizeFn) void {
        const Handler = CallbackHandler(Self, OnResizeFn, "RESIZE_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setUnmapCallback(self: *Self, callback: ?*const OnUnmapFn) void {
        const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setTrayClickCallback(self: *Self, callback: ?*const OnTrayClickFn) void {
        const Handler = CallbackHandler(Self, OnTrayClickFn, "TRAYCLICK_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// When saving a file, the overwrite check is done before the FILE_CB callback
    /// is called with status=OK.
    /// If the application wants to add an extension to the file name inside the
    /// FILE_CB callback when status=OK, then it must manually check if the file
    /// with the extension exits and asks the user if the file should be replaced,
    /// if not then the callback can set the FILE attribute and returns
    /// IUP_CONTINUE, so the file dialog will remain open and the user will have an
    /// opportunity to change the file name now that it contains the extension.
    pub fn setFileCallback(self: *Self, callback: ?*const OnFileFn) void {
        const Handler = CallbackHandler(Self, OnFileFn, "FILE_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
    /// This callback is called after the KILLFOCUS_CB of the element that loosed
    /// the focus.
    /// The IupGetFocus function during the callback returns the element that
    /// loosed the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that received keyboard focus.
    /// Affects All elements with user interaction, except menus.
    /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
    pub fn setGetFocusCallback(self: *Self, callback: ?*const OnGetFocusFn) void {
        const Handler = CallbackHandler(Self, OnGetFocusFn, "GETFOCUS_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setLDestroyCallback(self: *Self, callback: ?*const OnLDestroyFn) void {
        const Handler = CallbackHandler(Self, OnLDestroyFn, "LDESTROY_CB");
        Handler.setCallback(self, callback);
    }

    ///
    /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also ENTERWINDOW_CB
    pub fn setLeaveWindowCallback(self: *Self, callback: ?*const OnLeaveWindowFn) void {
        const Handler = CallbackHandler(Self, OnLeaveWindowFn, "LEAVEWINDOW_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setPostMessageCallback(self: *Self, callback: ?*const OnPostMessageFn) void {
        const Handler = CallbackHandler(Self, OnPostMessageFn, "POSTMESSAGE_CB");
        Handler.setCallback(self, callback);
    }
};

test "FileDlg HandleName" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setHandleName("Hello").unwrap());
    defer item.deinit();

    var ret = item.getHandleName();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg TipBgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setTipBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTipBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FileDlg MdiClient" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setMdiClient(true).unwrap());
    defer item.deinit();

    var ret = item.getMdiClient();

    try std.testing.expect(ret == true);
}

test "FileDlg Control" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setControl(true).unwrap());
    defer item.deinit();

    var ret = item.getControl();

    try std.testing.expect(ret == true);
}

test "FileDlg TipIcon" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setTipIcon("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTipIcon();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg ShowPreview" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setShowPreview("Hello").unwrap());
    defer item.deinit();

    var ret = item.getShowPreview();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg NoFlush" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setNoFlush(true).unwrap());
    defer item.deinit();

    var ret = item.getNoFlush();

    try std.testing.expect(ret == true);
}

test "FileDlg MaxSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setMaxSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMaxSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "FileDlg OpacityImage" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setOpacityImage("Hello").unwrap());
    defer item.deinit();

    var ret = item.getOpacityImage();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg NoChangeDir" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setNoChangeDir(true).unwrap());
    defer item.deinit();

    var ret = item.getNoChangeDir();

    try std.testing.expect(ret == true);
}

test "FileDlg HelpButton" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setHelpButton(true).unwrap());
    defer item.deinit();

    var ret = item.getHelpButton();

    try std.testing.expect(ret == true);
}

test "FileDlg ShowNoFocus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setShowNoFocus(true).unwrap());
    defer item.deinit();

    var ret = item.getShowNoFocus();

    try std.testing.expect(ret == true);
}

test "FileDlg Opacity" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setOpacity(42).unwrap());
    defer item.deinit();

    var ret = item.getOpacity();

    try std.testing.expect(ret == 42);
}

test "FileDlg Position" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setPosition(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getPosition();

    try std.testing.expect(ret.x == 9 and ret.y == 10);
}

test "FileDlg Composited" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setComposited(true).unwrap());
    defer item.deinit();

    var ret = item.getComposited();

    try std.testing.expect(ret == true);
}

test "FileDlg DropFilesTarget" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setDropFilesTarget(true).unwrap());
    defer item.deinit();

    var ret = item.getDropFilesTarget();

    try std.testing.expect(ret == true);
}

test "FileDlg Tip" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setTip("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTip();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg CanFocus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setCanFocus(true).unwrap());
    defer item.deinit();

    var ret = item.getCanFocus();

    try std.testing.expect(ret == true);
}

test "FileDlg DragSourceMove" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setDragSourceMove(true).unwrap());
    defer item.deinit();

    var ret = item.getDragSourceMove();

    try std.testing.expect(ret == true);
}

test "FileDlg Icon" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setIcon("Hello").unwrap());
    defer item.deinit();

    var ret = item.getIcon();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg Visible" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setVisible(true).unwrap());
    defer item.deinit();

    var ret = item.getVisible();

    try std.testing.expect(ret == true);
}

test "FileDlg MenuBox" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setMenuBox(true).unwrap());
    defer item.deinit();

    var ret = item.getMenuBox();

    try std.testing.expect(ret == true);
}

test "FileDlg DialogType" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setDialogType(.Save).unwrap());
    defer item.deinit();

    var ret = item.getDialogType();

    try std.testing.expect(ret != null and ret.? == .Save);
}

test "FileDlg HideTitleBar" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setHideTitleBar("Hello").unwrap());
    defer item.deinit();

    var ret = item.getHideTitleBar();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg MaxBox" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setMaxBox(true).unwrap());
    defer item.deinit();

    var ret = item.getMaxBox();

    try std.testing.expect(ret == true);
}

test "FileDlg DragDrop" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setDragDrop(true).unwrap());
    defer item.deinit();

    var ret = item.getDragDrop();

    try std.testing.expect(ret == true);
}

test "FileDlg DialogHint" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setDialogHint(true).unwrap());
    defer item.deinit();

    var ret = item.getDialogHint();

    try std.testing.expect(ret == true);
}

test "FileDlg AllowNew" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setAllowNew(true).unwrap());
    defer item.deinit();

    var ret = item.getAllowNew();

    try std.testing.expect(ret == true);
}

test "FileDlg DialogFrame" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setDialogFrame(true).unwrap());
    defer item.deinit();

    var ret = item.getDialogFrame();

    try std.testing.expect(ret == true);
}

test "FileDlg NActive" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setNActive(true).unwrap());
    defer item.deinit();

    var ret = item.getNActive();

    try std.testing.expect(ret == true);
}

test "FileDlg Theme" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setTheme("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTheme();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg SaveUnder" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setSaveUnder(true).unwrap());
    defer item.deinit();

    var ret = item.getSaveUnder();

    try std.testing.expect(ret == true);
}

test "FileDlg Tray" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setTray(true).unwrap());
    defer item.deinit();

    var ret = item.getTray();

    try std.testing.expect(ret == true);
}

test "FileDlg ChildOffset" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setChildOffset(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getChildOffset();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "FileDlg Expand" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setExpand(.Yes).unwrap());
    defer item.deinit();

    var ret = item.getExpand();

    try std.testing.expect(ret != null and ret.? == .Yes);
}

test "FileDlg TipMarkup" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setTipMarkup("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTipMarkup();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg ExtDefault" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setExtDefault("Hello").unwrap());
    defer item.deinit();

    var ret = item.getExtDefault();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg StartFocus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setStartFocus("Hello").unwrap());
    defer item.deinit();

    var ret = item.getStartFocus();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg FontSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setFontSize(42).unwrap());
    defer item.deinit();

    var ret = item.getFontSize();

    try std.testing.expect(ret == 42);
}

test "FileDlg DropTypes" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setDropTypes("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDropTypes();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg TrayTipMarkup" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setTrayTipMarkup("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTrayTipMarkup();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg UserSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setUserSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getUserSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "FileDlg TipDelay" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setTipDelay(42).unwrap());
    defer item.deinit();

    var ret = item.getTipDelay();

    try std.testing.expect(ret == 42);
}

test "FileDlg CustomFrame" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setCustomFrame(true).unwrap());
    defer item.deinit();

    var ret = item.getCustomFrame();

    try std.testing.expect(ret == true);
}

test "FileDlg Title" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setTitle("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTitle();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg Placement" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setPlacement(.Maximized).unwrap());
    defer item.deinit();

    var ret = item.getPlacement();

    try std.testing.expect(ret != null and ret.? == .Maximized);
}

test "FileDlg ExtFilter" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setExtFilter("Hello").unwrap());
    defer item.deinit();

    var ret = item.getExtFilter();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg PropagateFocus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setPropagateFocus(true).unwrap());
    defer item.deinit();

    var ret = item.getPropagateFocus();

    try std.testing.expect(ret == true);
}

test "FileDlg BgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FileDlg DropTarget" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setDropTarget(true).unwrap());
    defer item.deinit();

    var ret = item.getDropTarget();

    try std.testing.expect(ret == true);
}

test "FileDlg DragSource" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setDragSource(true).unwrap());
    defer item.deinit();

    var ret = item.getDragSource();

    try std.testing.expect(ret == true);
}

test "FileDlg Resize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setResize(true).unwrap());
    defer item.deinit();

    var ret = item.getResize();

    try std.testing.expect(ret == true);
}

test "FileDlg Floating" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setFloating(.Yes).unwrap());
    defer item.deinit();

    var ret = item.getFloating();

    try std.testing.expect(ret != null and ret.? == .Yes);
}

test "FileDlg NormalizerGroup" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setNormalizerGroup("Hello").unwrap());
    defer item.deinit();

    var ret = item.getNormalizerGroup();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg RasterSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setRasterSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getRasterSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "FileDlg ShapeImage" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setShapeImage("Hello").unwrap());
    defer item.deinit();

    var ret = item.getShapeImage();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg TipFgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setTipFgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTipFgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FileDlg FontFace" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setFontFace("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFontFace();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg Name" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setName("Hello").unwrap());
    defer item.deinit();

    var ret = item.getName();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg MinBox" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setMinBox(true).unwrap());
    defer item.deinit();

    var ret = item.getMinBox();

    try std.testing.expect(ret == true);
}

test "FileDlg Background" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setBackground(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getBackground();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "FileDlg HideTaskbar" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setHideTaskbar(true).unwrap());
    defer item.deinit();

    var ret = item.getHideTaskbar();

    try std.testing.expect(ret == true);
}

test "FileDlg Filter" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setFilter("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFilter();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg BringFront" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setBringFront(true).unwrap());
    defer item.deinit();

    var ret = item.getBringFront();

    try std.testing.expect(ret == true);
}

test "FileDlg Active" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setActive(true).unwrap());
    defer item.deinit();

    var ret = item.getActive();

    try std.testing.expect(ret == true);
}

test "FileDlg TipVisible" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setTipVisible(true).unwrap());
    defer item.deinit();

    var ret = item.getTipVisible();

    try std.testing.expect(ret == true);
}

test "FileDlg ExpandWeight" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setExpandWeight(3.14).unwrap());
    defer item.deinit();

    var ret = item.getExpandWeight();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "FileDlg MinSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setMinSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMinSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "FileDlg NTheme" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setNTheme("Hello").unwrap());
    defer item.deinit();

    var ret = item.getNTheme();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg Border" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setBorder(true).unwrap());
    defer item.deinit();

    var ret = item.getBorder();

    try std.testing.expect(ret == true);
}

test "FileDlg CustomFramesImulate" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setCustomFramesImulate(true).unwrap());
    defer item.deinit();

    var ret = item.getCustomFramesImulate();

    try std.testing.expect(ret == true);
}

test "FileDlg Shrink" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setShrink(true).unwrap());
    defer item.deinit();

    var ret = item.getShrink();

    try std.testing.expect(ret == true);
}

test "FileDlg ClientSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setClientSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getClientSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "FileDlg TrayTip" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setTrayTip("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTrayTip();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg DragTypes" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setDragTypes("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDragTypes();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg ToolBox" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setToolBox(true).unwrap());
    defer item.deinit();

    var ret = item.getToolBox();

    try std.testing.expect(ret == true);
}

test "FileDlg MdiFrame" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setMdiFrame(true).unwrap());
    defer item.deinit();

    var ret = item.getMdiFrame();

    try std.testing.expect(ret == true);
}

test "FileDlg NoOverwritePrompt" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setNoOverwritePrompt(true).unwrap());
    defer item.deinit();

    var ret = item.getNoOverwritePrompt();

    try std.testing.expect(ret == true);
}

test "FileDlg FontStyle" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setFontStyle("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFontStyle();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg Directory" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setDirectory("Hello").unwrap());
    defer item.deinit();

    var ret = item.getDirectory();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "FileDlg MdiChild" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setMdiChild(true).unwrap());
    defer item.deinit();

    var ret = item.getMdiChild();

    try std.testing.expect(ret == true);
}

test "FileDlg Font" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.FileDlg.init().setFont("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFont();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}
