// This code was generated by a tool.
// IUP Metadata Code Generator
// https://github.com/batiati/IUPMetadata
//
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.

const std = @import("std");

const interop = @import("../interop.zig");
const iup = @import("../iup.zig");

const Impl = @import("../impl.zig").Impl;
const CallbackHandler = @import("../callback_handler.zig").CallbackHandler;

const debug = std.debug;
const trait = std.meta.trait;

const Element = iup.Element;
const Handle = iup.Handle;
const Error = iup.Error;
const ChildrenIterator = iup.ChildrenIterator;
const Size = iup.Size;
const Margin = iup.Margin;

/// 
/// Creates the toggle interface element.
/// It is a two-state (on/off) button that, when selected, generates an action
/// that activates a function in the associated application.
/// Its visual representation can contain a text or an image.
pub const Toggle = opaque {
    pub const CLASS_NAME = "toggle";
    pub const NATIVE_TYPE = iup.NativeType.Control;
    const Self = @This();

    /// 
    /// K_ANY K_ANY Action generated when a keyboard event occurs.
    /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
    /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
    /// c: identifier of typed key.
    /// Please refer to the Keyboard Codes table for a list of possible values.
    /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
    /// the control and not propagated.
    /// If returns IUP_CONTINUE, the key will be processed and the event will be
    /// propagated to the parent of the element receiving it, this is the default behavior.
    /// If returns IUP_DEFAULT the key is processed but it is not propagated.
    /// IUP_CLOSE will be processed.
    /// Notes Keyboard callbacks depend on the keyboard usage of the control with
    /// the focus.
    /// So if you return IUP_IGNORE the control will usually not process the key.
    /// But be aware that sometimes the control process the key in another event so
    /// even returning IUP_IGNORE the key can get processed.
    /// Although it will not be propagated.
    /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
    /// the IUP_CONTINUE return value to work while the control is in focus.
    /// If the callback does not exists it is automatically propagated to the
    /// parent of the element.
    /// K_* callbacks All defined keys are also callbacks of any element, called
    /// when the respective key is activated.
    /// For example: "K_cC" is also a callback activated when the user press
    /// Ctrl+C, when the focus is at the element or at a children with focus.
    /// This is the way an application can create shortcut keys, also called hot keys.
    /// These callbacks are not available in IupLua.
    /// Affects All elements with keyboard interaction.
    pub const OnKAnyFn = fn (self: *Self, arg0: i32) anyerror!void;

    /// 
    /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
    /// In Motif is also activated by the Help button in some workstations keyboard.
    /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Returns: IUP_CLOSE will be processed.
    /// Affects All elements with user interaction.
    pub const OnHelpFn = fn (self: *Self) anyerror!void;

    /// 
    /// ACTION ACTION Action generated when the element is activated.
    /// Affects each element differently.
    /// Callback int function(Ihandle *ih); [in C] ih:action() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// In some elements, this callback may receive more parameters, apart from ih.
    /// Please refer to each element's documentation.
    /// Affects IupButton, IupItem, IupList, IupText, IupCanvas, IupMultiline,
    /// IupToggle
    pub const OnActionFn = fn (self: *Self, arg0: i32) anyerror!void;

    /// 
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnMapFn = fn (self: *Self) anyerror!void;

    /// 
    /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also LEAVEWINDOW_CB
    pub const OnEnterWindowFn = fn (self: *Self) anyerror!void;

    /// 
    /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
    /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Notes If the dialog is visible then it is hidden before it is destroyed.
    /// The callback will be called right after it is hidden.
    /// The callback will be called before all other destroy procedures.
    /// For instance, if the element has children then it is called before the
    /// children are destroyed.
    /// For language binding implementations use the callback name "LDESTROY_CB" to
    /// release memory allocated by the binding for the element.
    /// Also the callback will be called before the language callback.
    /// Affects All.
    pub const OnDestroyFn = fn (self: *Self) anyerror!void;

    /// 
    /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
    /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Affects All elements with user interaction, except menus.
    /// In Windows, there are restrictions when using this callback.
    /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
    /// function calls that display or activate a window.
    /// This causes the thread to yield control and can cause the application to
    /// stop responding to messages.
    /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
    pub const OnKillFocusFn = fn (self: *Self) anyerror!void;

    /// 
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub const OnUnmapFn = fn (self: *Self) anyerror!void;

    /// 
    /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
    /// This callback is called after the KILLFOCUS_CB of the element that loosed
    /// the focus.
    /// The IupGetFocus function during the callback returns the element that
    /// loosed the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that received keyboard focus.
    /// Affects All elements with user interaction, except menus.
    /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
    pub const OnGetFocusFn = fn (self: *Self) anyerror!void;

    /// 
    /// VALUECHANGED_CB: Called after the value was interactively changed by the user.
    /// Called after the ACTION callback, but under the same context.
    /// (since 3.0) int function(Ihandle *ih); [in C]ih:valuechanged_cb() -> (ret:
    /// number) [in Lua]
    pub const OnValueChangedFn = fn (self: *Self) anyerror!void;

    pub const OnLDestroyFn = fn (self: *Self) anyerror!void;

    /// 
    /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also ENTERWINDOW_CB
    pub const OnLeaveWindowFn = fn (self: *Self) anyerror!void;

    pub const OnPostMessageFn = fn (self: *Self, arg0: [:0]const u8, arg1: i32, arg2: f64, arg3: *iup.Unknow) anyerror!void;

    pub const ZOrder = enum {
        Top,
        Bottom,
    };

    pub const Expand = enum {
        Yes,
        Horizontal,
        Vertical,
        HorizontalFree,
        VerticalFree,
        No,
    };

    pub const Floating = enum {
        Yes,
        Ignore,
        No,
    };
    /// 
    /// VALUE (non inheritable): Toggle's state.
    /// Values can be "ON", "OFF" or "TOGGLE".
    /// If 3STATE=YES then can also be "NOTDEF".
    /// Default: "OFF".
    /// The TOGGLE option will invert the current state (since 3.7).
    /// In GTK if you change the state of a radio, the unchecked toggle will
    /// receive an ACTION callback notification.
    /// Can only be set to ON if the toggle is inside a radio, it will
    /// automatically set to OFF the previous toggle that was ON in the radio.
    pub const Value = enum {
        On,
        Off,
        NotDef,
    };

    pub const Initializer = struct {
        last_error: ?anyerror = null,
        ref: *Self,

        ///
        /// Returns a pointer to IUP element or an error.
        /// Only top-level or detached elements needs to be unwraped,
        pub fn unwrap(self: Initializer) !*Self {
            if (self.last_error) |e| {
                return e;
            } else {
                return self.ref;
            }
        }

        ///
        /// Captures a reference into a external variable
        /// Allows to capture some references even using full declarative API
        pub fn capture(self: *Initializer, ref: **Self) Initializer {
            ref.* = self.ref;
            return self.*;
        }

        pub fn setStrAttribute(self: *Initializer, attributeName: [:0]const u8, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setStrAttribute(self.ref, attributeName, arg);
            return self.*;
        }

        pub fn setIntAttribute(self: *Initializer, attributeName: [:0]const u8, arg: i32) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setIntAttribute(self.ref, attributeName, arg);
            return self.*;
        }

        pub fn setBoolAttribute(self: *Initializer, attributeName: [:0]const u8, arg: bool) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setBoolAttribute(self.ref, attributeName, arg);
            return self.*;
        }

        pub fn setPtrAttribute(self: *Initializer, comptime T: type, attributeName: [:0]const u8, value: ?*T) Initializer {
            if (self.last_error) |_| return self.*;
            Self.setPtrAttribute(self.ref, T, attributeName, value);
            return self.*;
        }

        pub fn setHandle(self: *Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setHandle(self.ref, arg);
            return self.*;
        }

        /// 
        /// FGCOLOR: Color of the text shown on the toggle.
        /// In Windows, when using Visual Styles FGCOLOR is ignored.
        /// Default: the global attribute DLGFGCOLOR.
        pub fn setFgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setRgb(self.ref, "FGCOLOR", .{}, rgb);
            return self.*;
        }

        pub fn setHandleName(self: *Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setStrAttribute(self.ref, "HANDLENAME", .{}, arg);
            return self.*;
        }

        pub fn setTipBgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setRgb(self.ref, "TIPBGCOLOR", .{}, rgb);
            return self.*;
        }

        pub fn setTipIcon(self: *Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setStrAttribute(self.ref, "TIPICON", .{}, arg);
            return self.*;
        }

        /// 
        /// RIGHTBUTTON (Windows Only) (creation only): place the check button at the
        /// right of the text.
        /// Can be "YES" or "NO".
        /// Default: "NO".
        pub fn setRightButton(self: *Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setBoolAttribute(self.ref, "RIGHTBUTTON", .{}, arg);
            return self.*;
        }

        pub fn setMaxSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self.*;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "MAXSIZE", .{}, value);
            return self.*;
        }

        pub fn setPosition(self: *Initializer, x: i32, y: i32) Initializer {
            if (self.last_error) |_| return self.*;
            var buffer: [128]u8 = undefined;
            var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
            interop.setStrAttribute(self.ref, "POSITION", .{}, value);
            return self.*;
        }

        /// 
        /// IMPRESS (non inheritable): Image name of the pressed toggle.
        /// Unlike buttons, toggles always display the button border when IMAGE and
        /// IMPRESS are both defined.
        /// (GTK 2.6)
        pub fn setImPress(self: *Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self.*;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "IMPRESS", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self.*;
        }

        pub fn setImPressHandleName(self: *Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setStrAttribute(self.ref, "IMPRESS", .{}, arg);
            return self.*;
        }

        /// 
        /// IMINACTIVE (non inheritable): Image name of the inactive toggle.
        /// If it is not defined but IMAGE is defined then for inactive toggles the
        /// colors will be replaced by a modified version of the background color
        /// creating the disabled effect.
        /// (GTK 2.6)
        pub fn setIMinActive(self: *Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self.*;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "IMINACTIVE", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self.*;
        }

        pub fn setIMinActiveHandleName(self: *Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setStrAttribute(self.ref, "IMINACTIVE", .{}, arg);
            return self.*;
        }

        pub fn setTip(self: *Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setStrAttribute(self.ref, "TIP", .{}, arg);
            return self.*;
        }

        /// 
        /// CANFOCUS (creation only) (non inheritable): enables the focus traversal of
        /// the control.
        /// In Windows the control will still get the focus when clicked.
        /// Default: YES.
        /// (since 3.0)
        pub fn setCanFocus(self: *Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setBoolAttribute(self.ref, "CANFOCUS", .{}, arg);
            return self.*;
        }

        pub fn setVisible(self: *Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setBoolAttribute(self.ref, "VISIBLE", .{}, arg);
            return self.*;
        }

        /// 
        /// IMAGE (non inheritable): Image name.
        /// When the IMAGE attribute is defined, the TITLE is not shown.
        /// This makes the toggle looks just like a button with an image, but its
        /// behavior remains the same.
        /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
        /// See also IupImage.
        /// (GTK 2.6)
        pub fn setImage(self: *Initializer, arg: anytype) Initializer {
            if (self.last_error) |_| return self.*;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "IMAGE", .{}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self.*;
        }

        pub fn setImageHandleName(self: *Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setStrAttribute(self.ref, "IMAGE", .{}, arg);
            return self.*;
        }

        pub fn zOrder(self: *Initializer, arg: ?ZOrder) Initializer {
            if (self.last_error) |_| return self.*;
            if (arg) |value| switch (value) {
                .Top => interop.setStrAttribute(self.ref, "ZORDER", .{}, "TOP"),
                .Bottom => interop.setStrAttribute(self.ref, "ZORDER", .{}, "BOTTOM"),
            } else {
                interop.clearAttribute(self.ref, "ZORDER", .{});
            }
            return self.*;
        }

        pub fn setTheme(self: *Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setStrAttribute(self.ref, "THEME", .{}, arg);
            return self.*;
        }

        pub fn setExpand(self: *Initializer, arg: ?Expand) Initializer {
            if (self.last_error) |_| return self.*;
            if (arg) |value| switch (value) {
                .Yes => interop.setStrAttribute(self.ref, "EXPAND", .{}, "YES"),
                .Horizontal => interop.setStrAttribute(self.ref, "EXPAND", .{}, "HORIZONTAL"),
                .Vertical => interop.setStrAttribute(self.ref, "EXPAND", .{}, "VERTICAL"),
                .HorizontalFree => interop.setStrAttribute(self.ref, "EXPAND", .{}, "HORIZONTALFREE"),
                .VerticalFree => interop.setStrAttribute(self.ref, "EXPAND", .{}, "VERTICALFREE"),
                .No => interop.setStrAttribute(self.ref, "EXPAND", .{}, "NO"),
            } else {
                interop.clearAttribute(self.ref, "EXPAND", .{});
            }
            return self.*;
        }

        pub fn setSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self.*;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "SIZE", .{}, value);
            return self.*;
        }

        /// 
        /// PADDING: internal margin when IMAGE is defined.
        /// Works just like the MARGIN attribute of the IupHbox and IupVbox containers,
        /// but uses a different name to avoid inheritance problems.
        /// Default value: "0x0".
        /// Value can be DEFAULTBUTTONPADDING, so the global attribute of this name
        /// will be used instead (since 3.29).
        /// (since 3.0)
        pub fn setPadding(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self.*;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "PADDING", .{}, value);
            return self.*;
        }

        pub fn setTipMarkup(self: *Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setStrAttribute(self.ref, "TIPMARKUP", .{}, arg);
            return self.*;
        }

        pub fn setFontSize(self: *Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setIntAttribute(self.ref, "FONTSIZE", .{}, arg);
            return self.*;
        }

        pub fn setUserSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self.*;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "USERSIZE", .{}, value);
            return self.*;
        }

        pub fn setTipDelay(self: *Initializer, arg: i32) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setIntAttribute(self.ref, "TIPDELAY", .{}, arg);
            return self.*;
        }

        /// 
        /// TITLE (non inheritable): Toggle's text.
        /// If IMAGE is not defined before map, then the default behavior is to contain
        /// a text.
        /// The button behavior can not be changed after map.
        /// The natural size will be larger enough to include all the text in the
        /// selected font, even using multiple lines, plus the button borders or check
        /// box if any.
        /// The '\n' character is accepted for line change.
        /// The "&" character can be used to define a mnemonic, the next character will
        /// be used as key.
        /// Use "&&" to show the "&" character instead on defining a mnemonic.
        /// The toggle can be activated from any control in the dialog using the
        /// "Alt+key" combination.
        /// (mnemonic support since 3.0)
        pub fn setTitle(self: *Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setStrAttribute(self.ref, "TITLE", .{}, arg);
            return self.*;
        }

        /// 
        /// PROPAGATEFOCUS(non inheritable): enables the focus callback forwarding to
        /// the next native parent with FOCUS_CB defined.
        /// Default: NO.
        /// (since 3.23)
        pub fn setPropagateFocus(self: *Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setBoolAttribute(self.ref, "PROPAGATEFOCUS", .{}, arg);
            return self.*;
        }

        /// 
        /// BGCOLOR: Background color of toggle mark when displaying a text.
        /// The text background is transparent, it will use the background color of the
        /// native parent.
        /// When displaying an image in Windows the background is ignored and the
        /// system color is used.
        /// Default: the global attribute DLGBGCOLOR.
        pub fn setBgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setRgb(self.ref, "BGCOLOR", .{}, rgb);
            return self.*;
        }

        /// 
        /// MARKUP [GTK only]: allows the title string to contains pango markup commands.
        /// Works only if a mnemonic is NOT defined in the title.
        /// Can be "YES" or "NO".
        /// Default: "NO".
        pub fn setMarkup(self: *Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setBoolAttribute(self.ref, "MARKUP", .{}, arg);
            return self.*;
        }

        pub fn setFloating(self: *Initializer, arg: ?Floating) Initializer {
            if (self.last_error) |_| return self.*;
            if (arg) |value| switch (value) {
                .Yes => interop.setStrAttribute(self.ref, "FLOATING", .{}, "YES"),
                .Ignore => interop.setStrAttribute(self.ref, "FLOATING", .{}, "IGNORE"),
                .No => interop.setStrAttribute(self.ref, "FLOATING", .{}, "NO"),
            } else {
                interop.clearAttribute(self.ref, "FLOATING", .{});
            }
            return self.*;
        }

        pub fn setNormalizerGroup(self: *Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setStrAttribute(self.ref, "NORMALIZERGROUP", .{}, arg);
            return self.*;
        }

        pub fn setRasterSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self.*;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "RASTERSIZE", .{}, value);
            return self.*;
        }

        pub fn setTipFgColor(self: *Initializer, rgb: iup.Rgb) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setRgb(self.ref, "TIPFGCOLOR", .{}, rgb);
            return self.*;
        }

        pub fn setFontFace(self: *Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setStrAttribute(self.ref, "FONTFACE", .{}, arg);
            return self.*;
        }

        /// 
        /// 3STATE (creation only): Enable a three state toggle.
        /// Valid for toggles with text only and that do not belong to a radio.
        /// Can be "YES" or NO".
        /// Default: "NO".
        pub fn set3State(self: *Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setBoolAttribute(self.ref, "3STATE", .{}, arg);
            return self.*;
        }

        pub fn setName(self: *Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setStrAttribute(self.ref, "NAME", .{}, arg);
            return self.*;
        }

        /// 
        /// VALUE (non inheritable): Toggle's state.
        /// Values can be "ON", "OFF" or "TOGGLE".
        /// If 3STATE=YES then can also be "NOTDEF".
        /// Default: "OFF".
        /// The TOGGLE option will invert the current state (since 3.7).
        /// In GTK if you change the state of a radio, the unchecked toggle will
        /// receive an ACTION callback notification.
        /// Can only be set to ON if the toggle is inside a radio, it will
        /// automatically set to OFF the previous toggle that was ON in the radio.
        pub fn setValue(self: *Initializer, arg: ?Value) Initializer {
            if (self.last_error) |_| return self.*;
            if (arg) |value| switch (value) {
                .On => interop.setStrAttribute(self.ref, "VALUE", .{}, "ON"),
                .Off => interop.setStrAttribute(self.ref, "VALUE", .{}, "OFF"),
                .NotDef => interop.setStrAttribute(self.ref, "VALUE", .{}, "NOTDEF"),
            } else {
                interop.clearAttribute(self.ref, "VALUE", .{});
            }
            return self.*;
        }

        /// 
        /// ACTIVE, FONT, EXPAND, SCREENPOSITION, POSITION, MINSIZE, MAXSIZE, WID, TIP,
        /// SIZE, RASTERSIZE, ZORDER, VISIBLE, THEME: also accepted.
        pub fn setActive(self: *Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setBoolAttribute(self.ref, "ACTIVE", .{}, arg);
            return self.*;
        }

        pub fn setTipVisible(self: *Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setBoolAttribute(self.ref, "TIPVISIBLE", .{}, arg);
            return self.*;
        }

        pub fn setExpandWeight(self: *Initializer, arg: f64) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setDoubleAttribute(self.ref, "EXPANDWEIGHT", .{}, arg);
            return self.*;
        }

        pub fn setMinSize(self: *Initializer, width: ?i32, height: ?i32) Initializer {
            if (self.last_error) |_| return self.*;
            var buffer: [128]u8 = undefined;
            var value = Size.intIntToString(&buffer, width, height);
            interop.setStrAttribute(self.ref, "MINSIZE", .{}, value);
            return self.*;
        }

        /// 
        /// FLAT (creation only): Hides the toggle borders until the mouse enter the
        /// toggle area when the toggle is not checked.
        /// If the toggle is checked, then the borders will be shown even if flat is enabled.
        /// Used only when IMAGE is defined.
        /// Can be YES or NO.
        /// Default: NO.
        /// (since 3.3)
        pub fn setFlat(self: *Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setBoolAttribute(self.ref, "FLAT", .{}, arg);
            return self.*;
        }

        pub fn setNTheme(self: *Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setStrAttribute(self.ref, "NTHEME", .{}, arg);
            return self.*;
        }

        /// 
        /// IGNORERADIO (non inheritable): when set the toggle will not behave as a
        /// radio when inside an IupRadio hierarchy.
        /// (since 3.21)
        pub fn setIgnoreRadio(self: *Initializer, arg: bool) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setBoolAttribute(self.ref, "IGNORERADIO", .{}, arg);
            return self.*;
        }

        pub fn setFontStyle(self: *Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setStrAttribute(self.ref, "FONTSTYLE", .{}, arg);
            return self.*;
        }

        pub fn setFont(self: *Initializer, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setStrAttribute(self.ref, "FONT", .{}, arg);
            return self.*;
        }

        /// 
        /// TABIMAGEn (non inheritable): image name to be used in the respective tab.
        /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
        /// n starts at 0.
        /// See also IupImage.
        /// In Motif, the image is shown only if TABTITLEn is NULL.
        /// In Windows and Motif set the BGCOLOR attribute before setting the image.
        /// When set after map will update the TABIMAGE attribute on the respective
        /// child (since 3.10).
        /// (since 3.0).
        /// TABIMAGE (non inheritable) (at children only): Same as TABIMAGEn but set in
        /// each child.
        /// Works only if set before the child is added to the tabs.
        pub fn setTabImage(self: *Initializer, index: i32, arg: anytype) Initializer {
            if (self.last_error) |_| return self.*;
            if (interop.validateHandle(.Image, arg)) {
                interop.setHandleAttribute(self.ref, "TABIMAGE", .{index}, arg);
            } else |err| {
                self.last_error = err;
            }
            return self.*;
        }

        pub fn setTabImageHandleName(self: *Initializer, index: i32, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setStrAttribute(self.ref, "TABIMAGE", .{index}, arg);
            return self.*;
        }

        /// 
        /// TABTITLEn (non inheritable): Contains the text to be shown in the
        /// respective tab title.
        /// n starts at 0.
        /// If this value is NULL, it will remain empty.
        /// The "&" character can be used to define a mnemonic, the next character will
        /// be used as key.
        /// Use "&&" to show the "&" character instead on defining a mnemonic.
        /// The button can be activated from any control in the dialog using the
        /// "Alt+key" combination.
        /// (mnemonic support since 3.3).
        /// When set after map will update the TABTITLE attribute on the respective
        /// child (since 3.10).
        /// (since 3.0).
        /// TABTITLE (non inheritable) (at children only): Same as TABTITLEn but set in
        /// each child.
        /// Works only if set before the child is added to the tabs.
        pub fn setTabTitle(self: *Initializer, index: i32, arg: [:0]const u8) Initializer {
            if (self.last_error) |_| return self.*;
            interop.setStrAttribute(self.ref, "TABTITLE", .{index}, arg);
            return self.*;
        }

        /// 
        /// K_ANY K_ANY Action generated when a keyboard event occurs.
        /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
        /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
        /// c: identifier of typed key.
        /// Please refer to the Keyboard Codes table for a list of possible values.
        /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
        /// the control and not propagated.
        /// If returns IUP_CONTINUE, the key will be processed and the event will be
        /// propagated to the parent of the element receiving it, this is the default behavior.
        /// If returns IUP_DEFAULT the key is processed but it is not propagated.
        /// IUP_CLOSE will be processed.
        /// Notes Keyboard callbacks depend on the keyboard usage of the control with
        /// the focus.
        /// So if you return IUP_IGNORE the control will usually not process the key.
        /// But be aware that sometimes the control process the key in another event so
        /// even returning IUP_IGNORE the key can get processed.
        /// Although it will not be propagated.
        /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
        /// the IUP_CONTINUE return value to work while the control is in focus.
        /// If the callback does not exists it is automatically propagated to the
        /// parent of the element.
        /// K_* callbacks All defined keys are also callbacks of any element, called
        /// when the respective key is activated.
        /// For example: "K_cC" is also a callback activated when the user press
        /// Ctrl+C, when the focus is at the element or at a children with focus.
        /// This is the way an application can create shortcut keys, also called hot keys.
        /// These callbacks are not available in IupLua.
        /// Affects All elements with keyboard interaction.
        pub fn setKAnyCallback(self: *Initializer, callback: ?OnKAnyFn) Initializer {
            const Handler = CallbackHandler(Self, OnKAnyFn, "K_ANY");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
        /// In Motif is also activated by the Help button in some workstations keyboard.
        /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Returns: IUP_CLOSE will be processed.
        /// Affects All elements with user interaction.
        pub fn setHelpCallback(self: *Initializer, callback: ?OnHelpFn) Initializer {
            const Handler = CallbackHandler(Self, OnHelpFn, "HELP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// ACTION ACTION Action generated when the element is activated.
        /// Affects each element differently.
        /// Callback int function(Ihandle *ih); [in C] ih:action() -> (ret: number) [in
        /// Lua] ih: identifier of the element that activated the event.
        /// In some elements, this callback may receive more parameters, apart from ih.
        /// Please refer to each element's documentation.
        /// Affects IupButton, IupItem, IupList, IupText, IupCanvas, IupMultiline,
        /// IupToggle
        pub fn setActionCallback(self: *Initializer, callback: ?OnActionFn) Initializer {
            const Handler = CallbackHandler(Self, OnActionFn, "ACTION");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
        /// updated in IupMap.
        /// When the element is a dialog, it is called after the layout is updated.
        /// For all other elements is called before the layout is updated, so the
        /// element current size will still be 0x0 during MAP_CB (since 3.14).
        /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
        /// Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setMapCallback(self: *Initializer, callback: ?OnMapFn) Initializer {
            const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
        /// native element.
        /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Notes When the cursor is moved from one element to another, the call order
        /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
        /// control followed by the ENTERWINDOW_CB callback of the new control.
        /// (since 3.14) If the mouse button is hold pressed and the cursor moves
        /// outside the element the behavior is system dependent.
        /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
        /// GTK the callbacks are called.
        /// Affects All controls with user interaction.
        /// See Also LEAVEWINDOW_CB
        pub fn setEnterWindowCallback(self: *Initializer, callback: ?OnEnterWindowFn) Initializer {
            const Handler = CallbackHandler(Self, OnEnterWindowFn, "ENTERWINDOW_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
        /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Notes If the dialog is visible then it is hidden before it is destroyed.
        /// The callback will be called right after it is hidden.
        /// The callback will be called before all other destroy procedures.
        /// For instance, if the element has children then it is called before the
        /// children are destroyed.
        /// For language binding implementations use the callback name "LDESTROY_CB" to
        /// release memory allocated by the binding for the element.
        /// Also the callback will be called before the language callback.
        /// Affects All.
        pub fn setDestroyCallback(self: *Initializer, callback: ?OnDestroyFn) Initializer {
            const Handler = CallbackHandler(Self, OnDestroyFn, "DESTROY_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
        /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
        /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Affects All elements with user interaction, except menus.
        /// In Windows, there are restrictions when using this callback.
        /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
        /// function calls that display or activate a window.
        /// This causes the thread to yield control and can cause the application to
        /// stop responding to messages.
        /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
        pub fn setKillFocusCallback(self: *Initializer, callback: ?OnKillFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnKillFocusFn, "KILLFOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
        /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
        /// [in Lua] ih: identifier of the element that activated the event.
        /// Affects All that have a native representation.
        pub fn setUnmapCallback(self: *Initializer, callback: ?OnUnmapFn) Initializer {
            const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
        /// This callback is called after the KILLFOCUS_CB of the element that loosed
        /// the focus.
        /// The IupGetFocus function during the callback returns the element that
        /// loosed the focus.
        /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that received keyboard focus.
        /// Affects All elements with user interaction, except menus.
        /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
        pub fn setGetFocusCallback(self: *Initializer, callback: ?OnGetFocusFn) Initializer {
            const Handler = CallbackHandler(Self, OnGetFocusFn, "GETFOCUS_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// VALUECHANGED_CB: Called after the value was interactively changed by the user.
        /// Called after the ACTION callback, but under the same context.
        /// (since 3.0) int function(Ihandle *ih); [in C]ih:valuechanged_cb() -> (ret:
        /// number) [in Lua]
        pub fn setValueChangedCallback(self: *Initializer, callback: ?OnValueChangedFn) Initializer {
            const Handler = CallbackHandler(Self, OnValueChangedFn, "VALUECHANGED_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setLDestroyCallback(self: *Initializer, callback: ?OnLDestroyFn) Initializer {
            const Handler = CallbackHandler(Self, OnLDestroyFn, "LDESTROY_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        /// 
        /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
        /// native element.
        /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
        /// number) [in Lua] ih: identifier of the element that activated the event.
        /// Notes When the cursor is moved from one element to another, the call order
        /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
        /// control followed by the ENTERWINDOW_CB callback of the new control.
        /// (since 3.14) If the mouse button is hold pressed and the cursor moves
        /// outside the element the behavior is system dependent.
        /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
        /// GTK the callbacks are called.
        /// Affects All controls with user interaction.
        /// See Also ENTERWINDOW_CB
        pub fn setLeaveWindowCallback(self: *Initializer, callback: ?OnLeaveWindowFn) Initializer {
            const Handler = CallbackHandler(Self, OnLeaveWindowFn, "LEAVEWINDOW_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }

        pub fn setPostMessageCallback(self: *Initializer, callback: ?OnPostMessageFn) Initializer {
            const Handler = CallbackHandler(Self, OnPostMessageFn, "POSTMESSAGE_CB");
            Handler.setCallback(self.ref, callback);
            return self.*;
        }
    };

    pub fn setStrAttribute(self: *Self, attribute: [:0]const u8, arg: [:0]const u8) void {
        interop.setStrAttribute(self, attribute, .{}, arg);
    }

    pub fn getStrAttribute(self: *Self, attribute: [:0]const u8) [:0]const u8 {
        return interop.getStrAttribute(self, attribute, .{});
    }

    pub fn setIntAttribute(self: *Self, attribute: [:0]const u8, arg: i32) void {
        interop.setIntAttribute(self, attribute, .{}, arg);
    }

    pub fn getIntAttribute(self: *Self, attribute: [:0]const u8) i32 {
        return interop.getIntAttribute(self, attribute, .{});
    }

    pub fn setBoolAttribute(self: *Self, attribute: [:0]const u8, arg: bool) void {
        interop.setBoolAttribute(self, attribute, .{}, arg);
    }

    pub fn getBoolAttribute(self: *Self, attribute: [:0]const u8) bool {
        return interop.getBoolAttribute(self, attribute, .{});
    }

    pub fn getPtrAttribute(self: *Self, comptime T: type, attribute: [:0]const u8) ?*T {
        return interop.getPtrAttribute(T, self, attribute, .{});
    }

    pub fn setPtrAttribute(self: *Self, comptime T: type, attribute: [:0]const u8, value: ?*T) void {
        interop.setPtrAttribute(T, self, attribute, .{}, value);
    }

    pub fn setHandle(self: *Self, arg: [:0]const u8) void {
        interop.setHandle(self, arg);
    }

    pub fn fromHandleName(handle_name: [:0]const u8) ?*Self {
        return interop.fromHandleName(Self, handle_name);
    }

    ///
    /// Creates an interface element given its class name and parameters.
    /// After creation the element still needs to be attached to a container and mapped to the native system so it can be visible.
    pub fn init() Initializer {
        var handle = interop.create(Self);

        if (handle) |valid| {
            return .{
                .ref = @ptrCast(*Self, valid),
            };
        } else {
            return .{ .ref = undefined, .last_error = Error.NotInitialized };
        }
    }

    /// 
    /// Displays a dialog in the current position, or changes a control VISIBLE attribute.
    /// For dialogs it is equivalent to call IupShowXY using IUP_CURRENT. See IupShowXY for more details.
    /// For other controls, to call IupShow is the same as setting VISIBLE=YES.
    pub fn show(self: *Self) !void {
        try interop.show(self);
    }

    ///
    /// Hides an interface element. This function has the same effect as attributing value "NO" to the interface element’s VISIBLE attribute.
    /// Once a dialog is hidden, either by means of IupHide or by changing the VISIBLE attribute or by means of a click in the window close button, the elements inside this dialog are not destroyed, so that you can show the dialog again. To destroy dialogs, the IupDestroy function must be called.
    pub fn hide(self: *Self) void {
        interop.hide(self);
    }

    /// 
    /// Destroys an interface element and all its children.
    /// Only dialogs, timers, popup menus and images should be normally destroyed, but detached elements can also be destroyed.        
    pub fn deinit(self: *Self) void {
        interop.destroy(self);
    }

    /// 
    /// Creates (maps) the native interface objects corresponding to the given IUP interface elements.
    /// It will also called recursively to create the native element of all the children in the element's tree.
    /// The element must be already attached to a mapped container, except the dialog. A child can only be mapped if its parent is already mapped.
    /// This function is automatically called before the dialog is shown in IupShow, IupShowXY or IupPopup.
    /// If the element is a dialog then the abstract layout will be updated even if the dialog is already mapped. If the dialog is visible the elements will be immediately repositioned. Calling IupMap for an already mapped dialog is the same as only calling IupRefresh for the dialog.
    /// Calling IupMap for an already mapped element that is not a dialog does nothing.
    /// If you add new elements to an already mapped dialog you must call IupMap for that elements. And then call IupRefresh to update the dialog layout.
    /// If the WID attribute of an element is NULL, it means the element was not already mapped. Some containers do not have a native element associated, like VBOX and HBOX. In this case their WID is a fake value (void*)(-1).
    /// It is useful for the application to call IupMap when the value of the WID attribute must be known, i.e. the native element must exist, before a dialog is made visible.
    /// The MAP_CB callback is called at the end of the IupMap function, after all processing, so it can also be used to create other things that depend on the WID attribute. But notice that for non dialog elements it will be called before the dialog layout has been updated, so the element current size will still be 0x0 (since 3.14).
    pub fn map(self: *Self) !void {
        try interop.map(self);
    }

    ///
    ///
    pub fn getDialog(self: *Self) ?*iup.Dialog {
        return interop.getDialog(self);
    }

    ///
    /// Returns the the child element that has the NAME attribute equals to the given value on the same dialog hierarchy.
    /// Works also for children of a menu that is associated with a dialog.
    pub fn getDialogChild(self: *Self, byName: [:0]const u8) ?Element {
        return interop.getDialogChild(self, byName);
    }

    ///
    /// Updates the size and layout of all controls in the same dialog.
    /// To be used after changing size attributes, or attributes that affect the size of the control. Can be used for any element inside a dialog, but the layout of the dialog and all controls will be updated. It can change the layout of all the controls inside the dialog because of the dynamic layout positioning.
    pub fn refresh(self: *Self) void {
        Impl(Self).refresh(self);
    }

    /// 
    /// FGCOLOR: Color of the text shown on the toggle.
    /// In Windows, when using Visual Styles FGCOLOR is ignored.
    /// Default: the global attribute DLGFGCOLOR.
    pub fn getFgColor(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "FGCOLOR", .{});
    }

    /// 
    /// FGCOLOR: Color of the text shown on the toggle.
    /// In Windows, when using Visual Styles FGCOLOR is ignored.
    /// Default: the global attribute DLGFGCOLOR.
    pub fn setFgColor(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "FGCOLOR", .{}, rgb);
    }

    pub fn getHandleName(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "HANDLENAME", .{});
    }

    pub fn setHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "HANDLENAME", .{}, arg);
    }

    pub fn getTipBgColor(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "TIPBGCOLOR", .{});
    }

    pub fn setTipBgColor(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "TIPBGCOLOR", .{}, rgb);
    }

    pub fn getTipIcon(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "TIPICON", .{});
    }

    pub fn setTipIcon(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TIPICON", .{}, arg);
    }

    pub fn getMaxSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "MAXSIZE", .{});
        return Size.parse(str);
    }

    pub fn setMaxSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "MAXSIZE", .{}, value);
    }

    pub fn getScreenPosition(self: *Self) iup.XYPos {
        var str = interop.getStrAttribute(self, "SCREENPOSITION", .{});
        return iup.XYPos.parse(str, ',');
    }

    pub fn getPosition(self: *Self) iup.XYPos {
        var str = interop.getStrAttribute(self, "POSITION", .{});
        return iup.XYPos.parse(str, ',');
    }

    pub fn setPosition(self: *Self, x: i32, y: i32) void {
        var buffer: [128]u8 = undefined;
        var value = iup.XYPos.intIntToString(&buffer, x, y, ',');
        interop.setStrAttribute(self, "POSITION", .{}, value);
    }

    /// 
    /// IMPRESS (non inheritable): Image name of the pressed toggle.
    /// Unlike buttons, toggles always display the button border when IMAGE and
    /// IMPRESS are both defined.
    /// (GTK 2.6)
    pub fn getImPress(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "IMPRESS", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    /// 
    /// IMPRESS (non inheritable): Image name of the pressed toggle.
    /// Unlike buttons, toggles always display the button border when IMAGE and
    /// IMPRESS are both defined.
    /// (GTK 2.6)
    pub fn setImPress(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "IMPRESS", .{}, arg);
    }

    pub fn setImPressHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "IMPRESS", .{}, arg);
    }

    /// 
    /// IMINACTIVE (non inheritable): Image name of the inactive toggle.
    /// If it is not defined but IMAGE is defined then for inactive toggles the
    /// colors will be replaced by a modified version of the background color
    /// creating the disabled effect.
    /// (GTK 2.6)
    pub fn getIMinActive(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "IMINACTIVE", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    /// 
    /// IMINACTIVE (non inheritable): Image name of the inactive toggle.
    /// If it is not defined but IMAGE is defined then for inactive toggles the
    /// colors will be replaced by a modified version of the background color
    /// creating the disabled effect.
    /// (GTK 2.6)
    pub fn setIMinActive(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "IMINACTIVE", .{}, arg);
    }

    pub fn setIMinActiveHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "IMINACTIVE", .{}, arg);
    }

    pub fn getTip(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "TIP", .{});
    }

    pub fn setTip(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TIP", .{}, arg);
    }

    pub fn getVisible(self: *Self) bool {
        return interop.getBoolAttribute(self, "VISIBLE", .{});
    }

    pub fn setVisible(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "VISIBLE", .{}, arg);
    }

    /// 
    /// IMAGE (non inheritable): Image name.
    /// When the IMAGE attribute is defined, the TITLE is not shown.
    /// This makes the toggle looks just like a button with an image, but its
    /// behavior remains the same.
    /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
    /// See also IupImage.
    /// (GTK 2.6)
    pub fn getImage(self: *Self) ?iup.Element {
        if (interop.getHandleAttribute(self, "IMAGE", .{})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    /// 
    /// IMAGE (non inheritable): Image name.
    /// When the IMAGE attribute is defined, the TITLE is not shown.
    /// This makes the toggle looks just like a button with an image, but its
    /// behavior remains the same.
    /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
    /// See also IupImage.
    /// (GTK 2.6)
    pub fn setImage(self: *Self, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "IMAGE", .{}, arg);
    }

    pub fn setImageHandleName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "IMAGE", .{}, arg);
    }

    pub fn zOrder(self: *Self, arg: ?ZOrder) void {
        if (arg) |value| switch (value) {
            .Top => interop.setStrAttribute(self, "ZORDER", .{}, "TOP"),
            .Bottom => interop.setStrAttribute(self, "ZORDER", .{}, "BOTTOM"),
        } else {
            interop.clearAttribute(self, "ZORDER", .{});
        }
    }

    pub fn getX(self: *Self) i32 {
        return interop.getIntAttribute(self, "X", .{});
    }

    pub fn getY(self: *Self) i32 {
        return interop.getIntAttribute(self, "Y", .{});
    }

    pub fn getTheme(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "THEME", .{});
    }

    pub fn setTheme(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "THEME", .{}, arg);
    }

    pub fn getExpand(self: *Self) ?Expand {
        var ret = interop.getStrAttribute(self, "EXPAND", .{});

        if (std.ascii.eqlIgnoreCase("YES", ret)) return .Yes;
        if (std.ascii.eqlIgnoreCase("HORIZONTAL", ret)) return .Horizontal;
        if (std.ascii.eqlIgnoreCase("VERTICAL", ret)) return .Vertical;
        if (std.ascii.eqlIgnoreCase("HORIZONTALFREE", ret)) return .HorizontalFree;
        if (std.ascii.eqlIgnoreCase("VERTICALFREE", ret)) return .VerticalFree;
        if (std.ascii.eqlIgnoreCase("NO", ret)) return .No;
        return null;
    }

    pub fn setExpand(self: *Self, arg: ?Expand) void {
        if (arg) |value| switch (value) {
            .Yes => interop.setStrAttribute(self, "EXPAND", .{}, "YES"),
            .Horizontal => interop.setStrAttribute(self, "EXPAND", .{}, "HORIZONTAL"),
            .Vertical => interop.setStrAttribute(self, "EXPAND", .{}, "VERTICAL"),
            .HorizontalFree => interop.setStrAttribute(self, "EXPAND", .{}, "HORIZONTALFREE"),
            .VerticalFree => interop.setStrAttribute(self, "EXPAND", .{}, "VERTICALFREE"),
            .No => interop.setStrAttribute(self, "EXPAND", .{}, "NO"),
        } else {
            interop.clearAttribute(self, "EXPAND", .{});
        }
    }

    pub fn getSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "SIZE", .{});
        return Size.parse(str);
    }

    pub fn setSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "SIZE", .{}, value);
    }

    /// 
    /// PADDING: internal margin when IMAGE is defined.
    /// Works just like the MARGIN attribute of the IupHbox and IupVbox containers,
    /// but uses a different name to avoid inheritance problems.
    /// Default value: "0x0".
    /// Value can be DEFAULTBUTTONPADDING, so the global attribute of this name
    /// will be used instead (since 3.29).
    /// (since 3.0)
    pub fn getPadding(self: *Self) Size {
        var str = interop.getStrAttribute(self, "PADDING", .{});
        return Size.parse(str);
    }

    /// 
    /// PADDING: internal margin when IMAGE is defined.
    /// Works just like the MARGIN attribute of the IupHbox and IupVbox containers,
    /// but uses a different name to avoid inheritance problems.
    /// Default value: "0x0".
    /// Value can be DEFAULTBUTTONPADDING, so the global attribute of this name
    /// will be used instead (since 3.29).
    /// (since 3.0)
    pub fn setPadding(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "PADDING", .{}, value);
    }

    pub fn getWId(self: *Self) i32 {
        return interop.getIntAttribute(self, "WID", .{});
    }

    pub fn getTipMarkup(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "TIPMARKUP", .{});
    }

    pub fn setTipMarkup(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TIPMARKUP", .{}, arg);
    }

    pub fn getFontSize(self: *Self) i32 {
        return interop.getIntAttribute(self, "FONTSIZE", .{});
    }

    pub fn setFontSize(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "FONTSIZE", .{}, arg);
    }

    pub fn getNaturalSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "NATURALSIZE", .{});
        return Size.parse(str);
    }

    pub fn getUserSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "USERSIZE", .{});
        return Size.parse(str);
    }

    pub fn setUserSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "USERSIZE", .{}, value);
    }

    pub fn getTipDelay(self: *Self) i32 {
        return interop.getIntAttribute(self, "TIPDELAY", .{});
    }

    pub fn setTipDelay(self: *Self, arg: i32) void {
        interop.setIntAttribute(self, "TIPDELAY", .{}, arg);
    }

    /// 
    /// TITLE (non inheritable): Toggle's text.
    /// If IMAGE is not defined before map, then the default behavior is to contain
    /// a text.
    /// The button behavior can not be changed after map.
    /// The natural size will be larger enough to include all the text in the
    /// selected font, even using multiple lines, plus the button borders or check
    /// box if any.
    /// The '\n' character is accepted for line change.
    /// The "&" character can be used to define a mnemonic, the next character will
    /// be used as key.
    /// Use "&&" to show the "&" character instead on defining a mnemonic.
    /// The toggle can be activated from any control in the dialog using the
    /// "Alt+key" combination.
    /// (mnemonic support since 3.0)
    pub fn getTitle(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "TITLE", .{});
    }

    /// 
    /// TITLE (non inheritable): Toggle's text.
    /// If IMAGE is not defined before map, then the default behavior is to contain
    /// a text.
    /// The button behavior can not be changed after map.
    /// The natural size will be larger enough to include all the text in the
    /// selected font, even using multiple lines, plus the button borders or check
    /// box if any.
    /// The '\n' character is accepted for line change.
    /// The "&" character can be used to define a mnemonic, the next character will
    /// be used as key.
    /// Use "&&" to show the "&" character instead on defining a mnemonic.
    /// The toggle can be activated from any control in the dialog using the
    /// "Alt+key" combination.
    /// (mnemonic support since 3.0)
    pub fn setTitle(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TITLE", .{}, arg);
    }

    /// 
    /// RADIO (read-only): returns if the toggle is inside a radio.
    /// Can be "YES" or "NO".
    /// Valid only after the element is mapped, before returns NULL.
    /// (since 3.0)
    pub fn getRadio(self: *Self) bool {
        return interop.getBoolAttribute(self, "RADIO", .{});
    }

    /// 
    /// PROPAGATEFOCUS(non inheritable): enables the focus callback forwarding to
    /// the next native parent with FOCUS_CB defined.
    /// Default: NO.
    /// (since 3.23)
    pub fn getPropagateFocus(self: *Self) bool {
        return interop.getBoolAttribute(self, "PROPAGATEFOCUS", .{});
    }

    /// 
    /// PROPAGATEFOCUS(non inheritable): enables the focus callback forwarding to
    /// the next native parent with FOCUS_CB defined.
    /// Default: NO.
    /// (since 3.23)
    pub fn setPropagateFocus(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "PROPAGATEFOCUS", .{}, arg);
    }

    /// 
    /// BGCOLOR: Background color of toggle mark when displaying a text.
    /// The text background is transparent, it will use the background color of the
    /// native parent.
    /// When displaying an image in Windows the background is ignored and the
    /// system color is used.
    /// Default: the global attribute DLGBGCOLOR.
    pub fn getBgColor(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "BGCOLOR", .{});
    }

    /// 
    /// BGCOLOR: Background color of toggle mark when displaying a text.
    /// The text background is transparent, it will use the background color of the
    /// native parent.
    /// When displaying an image in Windows the background is ignored and the
    /// system color is used.
    /// Default: the global attribute DLGBGCOLOR.
    pub fn setBgColor(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "BGCOLOR", .{}, rgb);
    }

    /// 
    /// MARKUP [GTK only]: allows the title string to contains pango markup commands.
    /// Works only if a mnemonic is NOT defined in the title.
    /// Can be "YES" or "NO".
    /// Default: "NO".
    pub fn getMarkup(self: *Self) bool {
        return interop.getBoolAttribute(self, "MARKUP", .{});
    }

    /// 
    /// MARKUP [GTK only]: allows the title string to contains pango markup commands.
    /// Works only if a mnemonic is NOT defined in the title.
    /// Can be "YES" or "NO".
    /// Default: "NO".
    pub fn setMarkup(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "MARKUP", .{}, arg);
    }

    pub fn getFloating(self: *Self) ?Floating {
        var ret = interop.getStrAttribute(self, "FLOATING", .{});

        if (std.ascii.eqlIgnoreCase("YES", ret)) return .Yes;
        if (std.ascii.eqlIgnoreCase("IGNORE", ret)) return .Ignore;
        if (std.ascii.eqlIgnoreCase("NO", ret)) return .No;
        return null;
    }

    pub fn setFloating(self: *Self, arg: ?Floating) void {
        if (arg) |value| switch (value) {
            .Yes => interop.setStrAttribute(self, "FLOATING", .{}, "YES"),
            .Ignore => interop.setStrAttribute(self, "FLOATING", .{}, "IGNORE"),
            .No => interop.setStrAttribute(self, "FLOATING", .{}, "NO"),
        } else {
            interop.clearAttribute(self, "FLOATING", .{});
        }
    }

    pub fn getNormalizerGroup(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "NORMALIZERGROUP", .{});
    }

    pub fn setNormalizerGroup(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "NORMALIZERGROUP", .{}, arg);
    }

    pub fn getRasterSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "RASTERSIZE", .{});
        return Size.parse(str);
    }

    pub fn setRasterSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "RASTERSIZE", .{}, value);
    }

    pub fn getTipFgColor(self: *Self) ?iup.Rgb {
        return interop.getRgb(self, "TIPFGCOLOR", .{});
    }

    pub fn setTipFgColor(self: *Self, rgb: iup.Rgb) void {
        interop.setRgb(self, "TIPFGCOLOR", .{}, rgb);
    }

    pub fn getFontFace(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "FONTFACE", .{});
    }

    pub fn setFontFace(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "FONTFACE", .{}, arg);
    }

    pub fn getName(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "NAME", .{});
    }

    pub fn setName(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "NAME", .{}, arg);
    }

    /// 
    /// VALUE (non inheritable): Toggle's state.
    /// Values can be "ON", "OFF" or "TOGGLE".
    /// If 3STATE=YES then can also be "NOTDEF".
    /// Default: "OFF".
    /// The TOGGLE option will invert the current state (since 3.7).
    /// In GTK if you change the state of a radio, the unchecked toggle will
    /// receive an ACTION callback notification.
    /// Can only be set to ON if the toggle is inside a radio, it will
    /// automatically set to OFF the previous toggle that was ON in the radio.
    pub fn getValue(self: *Self) ?Value {
        var ret = interop.getStrAttribute(self, "VALUE", .{});

        if (std.ascii.eqlIgnoreCase("ON", ret)) return .On;
        if (std.ascii.eqlIgnoreCase("OFF", ret)) return .Off;
        if (std.ascii.eqlIgnoreCase("NOTDEF", ret)) return .NotDef;
        return null;
    }

    /// 
    /// VALUE (non inheritable): Toggle's state.
    /// Values can be "ON", "OFF" or "TOGGLE".
    /// If 3STATE=YES then can also be "NOTDEF".
    /// Default: "OFF".
    /// The TOGGLE option will invert the current state (since 3.7).
    /// In GTK if you change the state of a radio, the unchecked toggle will
    /// receive an ACTION callback notification.
    /// Can only be set to ON if the toggle is inside a radio, it will
    /// automatically set to OFF the previous toggle that was ON in the radio.
    pub fn setValue(self: *Self, arg: ?Value) void {
        if (arg) |value| switch (value) {
            .On => interop.setStrAttribute(self, "VALUE", .{}, "ON"),
            .Off => interop.setStrAttribute(self, "VALUE", .{}, "OFF"),
            .NotDef => interop.setStrAttribute(self, "VALUE", .{}, "NOTDEF"),
        } else {
            interop.clearAttribute(self, "VALUE", .{});
        }
    }

    /// 
    /// ACTIVE, FONT, EXPAND, SCREENPOSITION, POSITION, MINSIZE, MAXSIZE, WID, TIP,
    /// SIZE, RASTERSIZE, ZORDER, VISIBLE, THEME: also accepted.
    pub fn getActive(self: *Self) bool {
        return interop.getBoolAttribute(self, "ACTIVE", .{});
    }

    /// 
    /// ACTIVE, FONT, EXPAND, SCREENPOSITION, POSITION, MINSIZE, MAXSIZE, WID, TIP,
    /// SIZE, RASTERSIZE, ZORDER, VISIBLE, THEME: also accepted.
    pub fn setActive(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "ACTIVE", .{}, arg);
    }

    pub fn getTipVisible(self: *Self) bool {
        return interop.getBoolAttribute(self, "TIPVISIBLE", .{});
    }

    pub fn setTipVisible(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "TIPVISIBLE", .{}, arg);
    }

    pub fn getExpandWeight(self: *Self) f64 {
        return interop.getDoubleAttribute(self, "EXPANDWEIGHT", .{});
    }

    pub fn setExpandWeight(self: *Self, arg: f64) void {
        interop.setDoubleAttribute(self, "EXPANDWEIGHT", .{}, arg);
    }

    pub fn getMinSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "MINSIZE", .{});
        return Size.parse(str);
    }

    pub fn setMinSize(self: *Self, width: ?i32, height: ?i32) void {
        var buffer: [128]u8 = undefined;
        var value = Size.intIntToString(&buffer, width, height);
        interop.setStrAttribute(self, "MINSIZE", .{}, value);
    }

    pub fn getNTheme(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "NTHEME", .{});
    }

    pub fn setNTheme(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "NTHEME", .{}, arg);
    }

    pub fn getCharSize(self: *Self) Size {
        var str = interop.getStrAttribute(self, "CHARSIZE", .{});
        return Size.parse(str);
    }

    /// 
    /// IGNORERADIO (non inheritable): when set the toggle will not behave as a
    /// radio when inside an IupRadio hierarchy.
    /// (since 3.21)
    pub fn getIgnoreRadio(self: *Self) bool {
        return interop.getBoolAttribute(self, "IGNORERADIO", .{});
    }

    /// 
    /// IGNORERADIO (non inheritable): when set the toggle will not behave as a
    /// radio when inside an IupRadio hierarchy.
    /// (since 3.21)
    pub fn setIgnoreRadio(self: *Self, arg: bool) void {
        interop.setBoolAttribute(self, "IGNORERADIO", .{}, arg);
    }

    pub fn getFontStyle(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "FONTSTYLE", .{});
    }

    pub fn setFontStyle(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "FONTSTYLE", .{}, arg);
    }

    pub fn getFont(self: *Self) [:0]const u8 {
        return interop.getStrAttribute(self, "FONT", .{});
    }

    pub fn setFont(self: *Self, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "FONT", .{}, arg);
    }

    /// 
    /// TABIMAGEn (non inheritable): image name to be used in the respective tab.
    /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
    /// n starts at 0.
    /// See also IupImage.
    /// In Motif, the image is shown only if TABTITLEn is NULL.
    /// In Windows and Motif set the BGCOLOR attribute before setting the image.
    /// When set after map will update the TABIMAGE attribute on the respective
    /// child (since 3.10).
    /// (since 3.0).
    /// TABIMAGE (non inheritable) (at children only): Same as TABIMAGEn but set in
    /// each child.
    /// Works only if set before the child is added to the tabs.
    pub fn getTabImage(self: *Self, index: i32) ?iup.Element {
        if (interop.getHandleAttribute(self, "TABIMAGE", .{index})) |handle| {
            return iup.Element.fromHandle(handle);
        } else {
            return null;
        }
    }

    /// 
    /// TABIMAGEn (non inheritable): image name to be used in the respective tab.
    /// Use IupSetHandle or IupSetAttributeHandle to associate an image to a name.
    /// n starts at 0.
    /// See also IupImage.
    /// In Motif, the image is shown only if TABTITLEn is NULL.
    /// In Windows and Motif set the BGCOLOR attribute before setting the image.
    /// When set after map will update the TABIMAGE attribute on the respective
    /// child (since 3.10).
    /// (since 3.0).
    /// TABIMAGE (non inheritable) (at children only): Same as TABIMAGEn but set in
    /// each child.
    /// Works only if set before the child is added to the tabs.
    pub fn setTabImage(self: *Self, index: i32, arg: anytype) !void {
        try interop.validateHandle(.Image, arg);
        interop.setHandleAttribute(self, "TABIMAGE", .{index}, arg);
    }

    pub fn setTabImageHandleName(self: *Self, index: i32, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TABIMAGE", .{index}, arg);
    }

    /// 
    /// TABTITLEn (non inheritable): Contains the text to be shown in the
    /// respective tab title.
    /// n starts at 0.
    /// If this value is NULL, it will remain empty.
    /// The "&" character can be used to define a mnemonic, the next character will
    /// be used as key.
    /// Use "&&" to show the "&" character instead on defining a mnemonic.
    /// The button can be activated from any control in the dialog using the
    /// "Alt+key" combination.
    /// (mnemonic support since 3.3).
    /// When set after map will update the TABTITLE attribute on the respective
    /// child (since 3.10).
    /// (since 3.0).
    /// TABTITLE (non inheritable) (at children only): Same as TABTITLEn but set in
    /// each child.
    /// Works only if set before the child is added to the tabs.
    pub fn getTabTitle(self: *Self, index: i32) [:0]const u8 {
        return interop.getStrAttribute(self, "TABTITLE", .{index});
    }

    /// 
    /// TABTITLEn (non inheritable): Contains the text to be shown in the
    /// respective tab title.
    /// n starts at 0.
    /// If this value is NULL, it will remain empty.
    /// The "&" character can be used to define a mnemonic, the next character will
    /// be used as key.
    /// Use "&&" to show the "&" character instead on defining a mnemonic.
    /// The button can be activated from any control in the dialog using the
    /// "Alt+key" combination.
    /// (mnemonic support since 3.3).
    /// When set after map will update the TABTITLE attribute on the respective
    /// child (since 3.10).
    /// (since 3.0).
    /// TABTITLE (non inheritable) (at children only): Same as TABTITLEn but set in
    /// each child.
    /// Works only if set before the child is added to the tabs.
    pub fn setTabTitle(self: *Self, index: i32, arg: [:0]const u8) void {
        interop.setStrAttribute(self, "TABTITLE", .{index}, arg);
    }

    /// 
    /// K_ANY K_ANY Action generated when a keyboard event occurs.
    /// Callback int function(Ihandle *ih, int c); [in C] ih:k_any(c: number) ->
    /// (ret: number) [in Lua] ih: identifier of the element that activated the event.
    /// c: identifier of typed key.
    /// Please refer to the Keyboard Codes table for a list of possible values.
    /// Returns: If IUP_IGNORE is returned the key is ignored and not processed by
    /// the control and not propagated.
    /// If returns IUP_CONTINUE, the key will be processed and the event will be
    /// propagated to the parent of the element receiving it, this is the default behavior.
    /// If returns IUP_DEFAULT the key is processed but it is not propagated.
    /// IUP_CLOSE will be processed.
    /// Notes Keyboard callbacks depend on the keyboard usage of the control with
    /// the focus.
    /// So if you return IUP_IGNORE the control will usually not process the key.
    /// But be aware that sometimes the control process the key in another event so
    /// even returning IUP_IGNORE the key can get processed.
    /// Although it will not be propagated.
    /// IMPORTANT: The callbacks "K_*" of the dialog or native containers depend on
    /// the IUP_CONTINUE return value to work while the control is in focus.
    /// If the callback does not exists it is automatically propagated to the
    /// parent of the element.
    /// K_* callbacks All defined keys are also callbacks of any element, called
    /// when the respective key is activated.
    /// For example: "K_cC" is also a callback activated when the user press
    /// Ctrl+C, when the focus is at the element or at a children with focus.
    /// This is the way an application can create shortcut keys, also called hot keys.
    /// These callbacks are not available in IupLua.
    /// Affects All elements with keyboard interaction.
    pub fn setKAnyCallback(self: *Self, callback: ?OnKAnyFn) void {
        const Handler = CallbackHandler(Self, OnKAnyFn, "K_ANY");
        Handler.setCallback(self, callback);
    }

    /// 
    /// HELP_CB HELP_CB Action generated when the user press F1 at a control.
    /// In Motif is also activated by the Help button in some workstations keyboard.
    /// Callback void function(Ihandle *ih); [in C] ih:help_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Returns: IUP_CLOSE will be processed.
    /// Affects All elements with user interaction.
    pub fn setHelpCallback(self: *Self, callback: ?OnHelpFn) void {
        const Handler = CallbackHandler(Self, OnHelpFn, "HELP_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// ACTION ACTION Action generated when the element is activated.
    /// Affects each element differently.
    /// Callback int function(Ihandle *ih); [in C] ih:action() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// In some elements, this callback may receive more parameters, apart from ih.
    /// Please refer to each element's documentation.
    /// Affects IupButton, IupItem, IupList, IupText, IupCanvas, IupMultiline,
    /// IupToggle
    pub fn setActionCallback(self: *Self, callback: ?OnActionFn) void {
        const Handler = CallbackHandler(Self, OnActionFn, "ACTION");
        Handler.setCallback(self, callback);
    }

    /// 
    /// MAP_CB MAP_CB Called right after an element is mapped and its attributes
    /// updated in IupMap.
    /// When the element is a dialog, it is called after the layout is updated.
    /// For all other elements is called before the layout is updated, so the
    /// element current size will still be 0x0 during MAP_CB (since 3.14).
    /// Callback int function(Ihandle *ih); [in C] ih:map_cb() -> (ret: number) [in
    /// Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setMapCallback(self: *Self, callback: ?OnMapFn) void {
        const Handler = CallbackHandler(Self, OnMapFn, "MAP_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// ENTERWINDOW_CB ENTERWINDOW_CB Action generated when the mouse enters the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:enterwindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also LEAVEWINDOW_CB
    pub fn setEnterWindowCallback(self: *Self, callback: ?OnEnterWindowFn) void {
        const Handler = CallbackHandler(Self, OnEnterWindowFn, "ENTERWINDOW_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// DESTROY_CB DESTROY_CB Called right before an element is destroyed.
    /// Callback int function(Ihandle *ih); [in C] ih:destroy_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Notes If the dialog is visible then it is hidden before it is destroyed.
    /// The callback will be called right after it is hidden.
    /// The callback will be called before all other destroy procedures.
    /// For instance, if the element has children then it is called before the
    /// children are destroyed.
    /// For language binding implementations use the callback name "LDESTROY_CB" to
    /// release memory allocated by the binding for the element.
    /// Also the callback will be called before the language callback.
    /// Affects All.
    pub fn setDestroyCallback(self: *Self, callback: ?OnDestroyFn) void {
        const Handler = CallbackHandler(Self, OnDestroyFn, "DESTROY_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// KILLFOCUS_CB KILLFOCUS_CB Action generated when an element loses keyboard focus.
    /// This callback is called before the GETFOCUS_CB of the element that gets the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:killfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Affects All elements with user interaction, except menus.
    /// In Windows, there are restrictions when using this callback.
    /// From MSDN on WM_KILLFOCUS: "While processing this message, do not make any
    /// function calls that display or activate a window.
    /// This causes the thread to yield control and can cause the application to
    /// stop responding to messages.
    /// See Also GETFOCUS_CB, IupGetFocus, IupSetFocus
    pub fn setKillFocusCallback(self: *Self, callback: ?OnKillFocusFn) void {
        const Handler = CallbackHandler(Self, OnKillFocusFn, "KILLFOCUS_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// UNMAP_CB UNMAP_CB Called right before an element is unmapped.
    /// Callback int function(Ihandle *ih); [in C] ih:unmap_cb() -> (ret: number)
    /// [in Lua] ih: identifier of the element that activated the event.
    /// Affects All that have a native representation.
    pub fn setUnmapCallback(self: *Self, callback: ?OnUnmapFn) void {
        const Handler = CallbackHandler(Self, OnUnmapFn, "UNMAP_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// GETFOCUS_CB GETFOCUS_CB Action generated when an element is given keyboard focus.
    /// This callback is called after the KILLFOCUS_CB of the element that loosed
    /// the focus.
    /// The IupGetFocus function during the callback returns the element that
    /// loosed the focus.
    /// Callback int function(Ihandle *ih); [in C] ih:getfocus_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that received keyboard focus.
    /// Affects All elements with user interaction, except menus.
    /// See Also KILLFOCUS_CB, IupGetFocus, IupSetFocus
    pub fn setGetFocusCallback(self: *Self, callback: ?OnGetFocusFn) void {
        const Handler = CallbackHandler(Self, OnGetFocusFn, "GETFOCUS_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// VALUECHANGED_CB: Called after the value was interactively changed by the user.
    /// Called after the ACTION callback, but under the same context.
    /// (since 3.0) int function(Ihandle *ih); [in C]ih:valuechanged_cb() -> (ret:
    /// number) [in Lua]
    pub fn setValueChangedCallback(self: *Self, callback: ?OnValueChangedFn) void {
        const Handler = CallbackHandler(Self, OnValueChangedFn, "VALUECHANGED_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setLDestroyCallback(self: *Self, callback: ?OnLDestroyFn) void {
        const Handler = CallbackHandler(Self, OnLDestroyFn, "LDESTROY_CB");
        Handler.setCallback(self, callback);
    }

    /// 
    /// LEAVEWINDOW_CB LEAVEWINDOW_CB Action generated when the mouse leaves the
    /// native element.
    /// Callback int function(Ihandle *ih); [in C] ih:leavewindow_cb() -> (ret:
    /// number) [in Lua] ih: identifier of the element that activated the event.
    /// Notes When the cursor is moved from one element to another, the call order
    /// in all platforms will be first the LEAVEWINDOW_CB callback of the old
    /// control followed by the ENTERWINDOW_CB callback of the new control.
    /// (since 3.14) If the mouse button is hold pressed and the cursor moves
    /// outside the element the behavior is system dependent.
    /// In Windows the LEAVEWINDOW_CB/ENTERWINDOW_CB callbacks are NOT called, in
    /// GTK the callbacks are called.
    /// Affects All controls with user interaction.
    /// See Also ENTERWINDOW_CB
    pub fn setLeaveWindowCallback(self: *Self, callback: ?OnLeaveWindowFn) void {
        const Handler = CallbackHandler(Self, OnLeaveWindowFn, "LEAVEWINDOW_CB");
        Handler.setCallback(self, callback);
    }

    pub fn setPostMessageCallback(self: *Self, callback: ?OnPostMessageFn) void {
        const Handler = CallbackHandler(Self, OnPostMessageFn, "POSTMESSAGE_CB");
        Handler.setCallback(self, callback);
    }
};

test "Toggle FgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setFgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getFgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "Toggle HandleName" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setHandleName("Hello").unwrap());
    defer item.deinit();

    var ret = item.getHandleName();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Toggle TipBgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setTipBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTipBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "Toggle TipIcon" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setTipIcon("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTipIcon();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Toggle MaxSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setMaxSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMaxSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Toggle Position" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setPosition(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getPosition();

    try std.testing.expect(ret.x == 9 and ret.y == 10);
}

test "Toggle Tip" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setTip("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTip();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Toggle Visible" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setVisible(true).unwrap());
    defer item.deinit();

    var ret = item.getVisible();

    try std.testing.expect(ret == true);
}

test "Toggle Theme" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setTheme("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTheme();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Toggle Expand" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setExpand(.Yes).unwrap());
    defer item.deinit();

    var ret = item.getExpand();

    try std.testing.expect(ret != null and ret.? == .Yes);
}

test "Toggle Size" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Toggle Padding" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setPadding(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getPadding();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Toggle TipMarkup" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setTipMarkup("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTipMarkup();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Toggle FontSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setFontSize(42).unwrap());
    defer item.deinit();

    var ret = item.getFontSize();

    try std.testing.expect(ret == 42);
}

test "Toggle UserSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setUserSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getUserSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Toggle TipDelay" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setTipDelay(42).unwrap());
    defer item.deinit();

    var ret = item.getTipDelay();

    try std.testing.expect(ret == 42);
}

test "Toggle Title" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setTitle("Hello").unwrap());
    defer item.deinit();

    var ret = item.getTitle();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Toggle PropagateFocus" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setPropagateFocus(true).unwrap());
    defer item.deinit();

    var ret = item.getPropagateFocus();

    try std.testing.expect(ret == true);
}

test "Toggle BgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setBgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getBgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "Toggle Markup" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setMarkup(true).unwrap());
    defer item.deinit();

    var ret = item.getMarkup();

    try std.testing.expect(ret == true);
}

test "Toggle Floating" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setFloating(.Yes).unwrap());
    defer item.deinit();

    var ret = item.getFloating();

    try std.testing.expect(ret != null and ret.? == .Yes);
}

test "Toggle NormalizerGroup" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setNormalizerGroup("Hello").unwrap());
    defer item.deinit();

    var ret = item.getNormalizerGroup();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Toggle RasterSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setRasterSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getRasterSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Toggle TipFgColor" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setTipFgColor(.{ .r = 9, .g = 10, .b = 11 }).unwrap());
    defer item.deinit();

    var ret = item.getTipFgColor();

    try std.testing.expect(ret != null and ret.?.r == 9 and ret.?.g == 10 and ret.?.b == 11);
}

test "Toggle FontFace" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setFontFace("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFontFace();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Toggle Name" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setName("Hello").unwrap());
    defer item.deinit();

    var ret = item.getName();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Toggle Value" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setValue(.On).unwrap());
    defer item.deinit();

    var ret = item.getValue();

    try std.testing.expect(ret != null and ret.? == .On);
}

test "Toggle Active" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setActive(true).unwrap());
    defer item.deinit();

    var ret = item.getActive();

    try std.testing.expect(ret == true);
}

test "Toggle TipVisible" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setTipVisible(true).unwrap());
    defer item.deinit();

    var ret = item.getTipVisible();

    try std.testing.expect(ret == true);
}

test "Toggle ExpandWeight" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setExpandWeight(3.14).unwrap());
    defer item.deinit();

    var ret = item.getExpandWeight();

    try std.testing.expect(ret == @as(f64, 3.14));
}

test "Toggle MinSize" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setMinSize(9, 10).unwrap());
    defer item.deinit();

    var ret = item.getMinSize();

    try std.testing.expect(ret.width != null and ret.width.? == 9 and ret.height != null and ret.height.? == 10);
}

test "Toggle NTheme" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setNTheme("Hello").unwrap());
    defer item.deinit();

    var ret = item.getNTheme();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Toggle IgnoreRadio" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setIgnoreRadio(true).unwrap());
    defer item.deinit();

    var ret = item.getIgnoreRadio();

    try std.testing.expect(ret == true);
}

test "Toggle FontStyle" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setFontStyle("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFontStyle();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}

test "Toggle Font" {
    try iup.MainLoop.open();
    defer iup.MainLoop.close();

    var item = try (iup.Toggle.init().setFont("Hello").unwrap());
    defer item.deinit();

    var ret = item.getFont();

    try std.testing.expect(std.mem.eql(u8, ret, "Hello"));
}
